
= Basic REC-RPL Use Case =

== Creation of a REC ==

From a diagram, select a consistent set of elements (here, a Component and the Functions it is performing).


[[Image:Images/8.2.%20Basic%20Use%20Case_html_61ca87e6.png|627x157px]]<!-- BasicUseCase/[LAB] Logical System -->


From the contextual menu, select &ldquo;REC/RPL->Create REC->From selection...&rdquo;

[[Image:Images/8.2.%20Basic%20Use%20Case_html_4fd534ab.png|575x88px]]

The REC creation dialog appears. A name shall be given to the REC. The Catalog field allows to select in which catalog this REC should be created.
When working with Libraries, the Catalog is most likely located in a Library. In a library, an additional action &ldquo;With whole library content...&rdquo; is shown in the REC creation menu. If that action is chosen, the new REC will be initialized with the entire contents of the library.

[[Image:Images/8.2.%20Basic%20Use%20Case_html_m11a06012.png|590x692px]]


The scope (content) of the REC is displayed. This dialog helps modifying this scope (for example adding or removing elements). By default, the tool applies a set of business rules to include elements (for example, allocations between Component and Functions, children of an element, Etc.). Note here that despite Functional Exchange &ldquo;fe23&rdquo; is carrying Exchange Items, these Exchange Items are not included by default in the REC. In most of the cases, they shoud not be, as references are kept.


It is possible at this stage to define which elements will have to be renamed when the REC will be instantiated (label '''&#91;+SUFFIX&#93;''').


{| border="1"
|-
| 
[[Image:Images/8.2.%20Basic%20Use%20Case_html_m2b5f66f0.gif|23x21px]]


| 
Set/Unset the 				Element as having to be renamed at Instantiation


|-
| 
[[Image:Images/8.2.%20Basic%20Use%20Case_html_121da960.gif|23x20px]]


| 
Include 				Selected Element


|-
| 
[[Image:Images/8.2.%20Basic%20Use%20Case_html_78d20a04.gif|23x24px]]


| 
Remove 				Element


|-
| 
[[Image:Images/8.2.%20Basic%20Use%20Case_html_515e8b51.png|23x22px]]


| 
Generic 				Include Elements


|-
| 
[[Image:Images/8.2.%20Basic%20Use%20Case_html_m43c6043e.gif|21x21px]]


| 
Include 				Related Elements


|-
| 
[[Image:Images/8.2.%20Basic%20Use%20Case_html_m24ae884e.gif|24x22px]]


| 
Include 				Children Elements


|-
| 
[[Image:Images/8.2.%20Basic%20Use%20Case_html_589a1b2e.png|20x20px]]


| 
Include Required 				Dependencies of Selected Element


|-
| 
[[Image:Images/8.2.%20Basic%20Use%20Case_html_m594eb14d.gif|22x24px]]


| 
Include All 				Requirement Dependencies


|}  

<br>

The compliancy field allows defining how REC would be instantiated (is it possible to modify content of the replica? add external interfaces? add ports? add more functions?).<br>
See the RPL Validation part for further description of any kind of compliancy (This feature is not fully available yet).

<br>

Notice the message at the bottom of the dialog, selected elements are linked to some elements which are not included in the REC (many exchange items, visible by clicking on the browse button on the right). When the REC will be instanciated, elements of the newly RPL will be linked to these exchange items too.


[[Image:Images/8.2.%20Basic%20Use%20Case_html_56e383b9.png|627x51px]]

<br>

Close the dialog and check the result.

In the Project Explorer, the newly created REC appears. The Semantic Browser also show REC-related information:


[[Image:Images/8.2.%20Basic%20Use%20Case_html_707f60f9.png|208x108px]]


[[Image:Images/8.2.%20Basic%20Use%20Case_html_m76b1c545.png|626x180px]]


And from the Function F2 included in the REC:


[[Image:Images/8.2.%20Basic%20Use%20Case_html_mf6bfd89.png|627x181px]]


== Instantiation of a REC ==

From anywhere in the model, use the contextual command &ldquo;REC/RPL->Instantiate a RPL from a REC&rdquo;:

[[Image:Images/8.2.%20Basic%20Use%20Case_html_17699e08.png|574x93px]]

The instantiation dialog opens:


[[Image:Images/8.2.%20Basic%20Use%20Case_html_3f98bee7.png|685x826px]]<!-- BasicUseCase/REC1 -->


This dialog allows:


* The selection of the REC to instantiate (click on &ldquo;Browse&rdquo;)
* The definition of a target container (Catalog) for the RPL going to 	be created.
* The definition of a suffix for each element of the REC that was marked as having to be renamed.
* The compliancy field allows defining how RPL can be modified 	according to its REC (is it possible to modify content of the 	replica? add external interfaces? add ports? add more functions?) 	See the RPL Validation part for further description of any kind of 	compliancy''' (This feature is not fully available yet)'''
* To enable live compliancy validation for this RPL select &ldquo;Enforce RPL Compliance on the fly&rdquo;.

All RPL elements corresponding to a REC element with the suffix tag &#91;+SUFFIX&#93; will have the RPL suffix.


The parent locator options exist to specify where the RPL elements will be located:
* Use default locations: Elements will be located in standard containers in the model
* Create specific packages: For each element type, a RPL specific package will be created. Elements of the corresponding type will be stored in that package. Some elements, e.g. Parts do not get a specific package and are located just as if the default locations option would be selected.
* Locate parents manually: A location has to be found manually for the root elements of the RPL. The elements for which a location still has to be found are marked in Orange. The definition of a new location is performed using drag and drop between the two trees:

[[Image:Images/8.2.%20Basic%20Use%20Case_html_m734c92a5.png|668x381px]]

It is possible to create on-the-fly new elements in the right tree, using the contextual menu and rename them by pressing F2. It is possible to double click on a RPL element in the left tree to find its parent in the right tree.

[[Image:Images/8.2_Basic_Use_Case.png|500x180px]]


Close the dialog.

The new RPL can be seen in the Project Explorer. The type of the RPL is displayed in brackets:


[[Image:Images/8.2.%20Basic%20Use%20Case_html_m2d869e08.png|199x70px]]


A good practice is to manage REC and RPLs in different folders:


[[Image:Images/8.2.%20Basic%20Use%20Case_html_m62402328.png|215x107px]]


On a diagram, insert the newly created elements (here, the Component and its Functions):


[[Image:Images/8.2.%20Basic%20Use%20Case_html_4627cc64.png|203x120px]]


The Semantic Browser display RPL- and REC-related information:


* The RPL to which an element belongs (in Referencing Elements)
* The original REC elements it is corresponding to (in Referenced 	Elements)

[[Image:Images/8.2.%20Basic%20Use%20Case_html_3464e2e1.png|752x323px]]


The Semantic Browser also shows the Functional Exchange &ldquo;fe2&rdquo;, part of the RPL, is also carrying the Exchange Items EI1 and EI2, even though these two Exchange Items were not included in the REC:


[[Image:Images/8.2.%20Basic%20Use%20Case_html_5877aab1.png|850x200px]]


It is now possible to use this RPL in the model. For example, by connecting it also to other elements:


[[Image:Images/8.2.%20Basic%20Use%20Case_html_2eecec59.png|627x139px]]


== Copy-Paste Layout ==

On a diagram showing the source elements of the REC, select all elements and copy the layout:


[[Image:Images/8.2.%20Basic%20Use%20Case_html_m35487b8e.png|627x199px]]


On a diagram when the RPL is displayed, paste the layout:


[[Image:Images/8.2.%20Basic%20Use%20Case_html_c008666.png|627x211px]]


The layout is synchronized between the REC and the RPL:


[[Image:Images/8.2.%20Basic%20Use%20Case_html_m3dbcc481.png|627x160px]]
