/*******************************************************************************
 * Copyright (c) 2006, 2019 THALES DMS FRANCE.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Thales - initial API and implementation
 *******************************************************************************/

/* Generated file */

package org.polarsys.capella.viatra.core.data.fa.surrogate

import "http://www.polarsys.org/capella/core/fa/1.4.0"

// Start of user code for imports 
import "http://www.polarsys.org/capella/core/core/1.4.0"
import "http://www.polarsys.org/capella/common/core/1.4.0"
import "http://www.polarsys.org/capella/common/activity/1.4.0"

// End of user code

@Surrogate(feature="involvingFunctionalChains")
pattern FunctionalExchange__involvingFunctionalChains(self : FunctionalExchange, target : FunctionalChain) {
	FunctionalExchange.involvingInvolvements(self, fci);
FunctionalChainInvolvement.involver(fci, target);
}

@Surrogate(feature="allocatingComponentExchanges")
pattern FunctionalExchange__allocatingComponentExchanges(self : FunctionalExchange, target : ComponentExchange) {
	FunctionalExchange.incomingComponentExchangeFunctionalExchangeRealizations.allocatingComponentExchange(self, target);
}

@Surrogate(feature="incomingComponentExchangeFunctionalExchangeRealizations")
pattern FunctionalExchange__incomingComponentExchangeFunctionalExchangeRealizations(self : FunctionalExchange, target : ComponentExchangeFunctionalExchangeAllocation) {
	FunctionalExchange.incomingTraces(self, target);
}

@Surrogate(feature="incomingFunctionalExchangeRealizations")
pattern FunctionalExchange__incomingFunctionalExchangeRealizations(self : FunctionalExchange, target : FunctionalExchangeRealization) {
	FunctionalExchange.incomingTraces(self, target);
}

@Surrogate(feature="outgoingFunctionalExchangeRealizations")
pattern FunctionalExchange__outgoingFunctionalExchangeRealizations(self : FunctionalExchange, target : FunctionalExchangeRealization) {
	FunctionalExchange.outgoingTraces(self, target);
}

@Surrogate(feature="categories")
pattern FunctionalExchange__categories(self : FunctionalExchange, target : ExchangeCategory) {
	ExchangeCategory.exchanges(target, self);
}

@Surrogate(feature="sourceFunctionOutputPort")
pattern FunctionalExchange__sourceFunctionOutputPort(self : FunctionalExchange, target : FunctionOutputPort) {
	FunctionalExchange.source(self, target);
}

@Surrogate(feature="targetFunctionInputPort")
pattern FunctionalExchange__targetFunctionInputPort(self : FunctionalExchange, target : FunctionInputPort) {
	FunctionalExchange.target(self, target);
}

@Surrogate(feature="realizedFunctionalExchanges")
pattern FunctionalExchange__realizedFunctionalExchanges(self : FunctionalExchange, target : FunctionalExchange) {
	FunctionalExchangeRealization.sourceElement(fer, self);
FunctionalExchangeRealization.targetElement(fer, target);
}

@Surrogate(feature="realizingFunctionalExchanges")
pattern FunctionalExchange__realizingFunctionalExchanges(self : FunctionalExchange, target : FunctionalExchange) {
	FunctionalExchangeRealization.targetElement(fer, self);
FunctionalExchangeRealization.sourceElement(fer, target);
}


