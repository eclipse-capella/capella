/*******************************************************************************
 * Copyright (c) 2006, 2019 THALES DMS FRANCE.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Thales - initial API and implementation
 *******************************************************************************/

/* Generated file */

package org.polarsys.capella.viatra.core.data.la.surrogate

import "http://www.polarsys.org/capella/core/la/1.4.0"

// Start of user code for imports 
import "http://www.polarsys.org/capella/core/core/1.4.0"
import "http://www.polarsys.org/capella/core/cs/1.4.0"
import "http://www.polarsys.org/capella/common/core/1.4.0"
import "http://www.polarsys.org/capella/core/interaction/1.4.0"
import "http://www.polarsys.org/capella/core/ctx/1.4.0"

// End of user code

@Surrogate(feature="realizedCapabilities")
pattern CapabilityRealization__realizedCapabilities(self : CapabilityRealization, target : Capability) {
	CapabilityRealization.outgoingTraces(self, acr);
AbstractCapabilityRealization.realizedCapability(acr, target);
}

@Surrogate(feature="realizedCapabilityRealizations")
pattern CapabilityRealization__realizedCapabilityRealizations(self : CapabilityRealization, target : CapabilityRealization) {
	CapabilityRealization.outgoingTraces(self, acr);
AbstractCapabilityRealization.realizedCapability(acr, target);
}

@Surrogate(feature="realizingCapabilityRealizations")
pattern CapabilityRealization__realizingCapabilityRealizations(self : CapabilityRealization, target : CapabilityRealization) {
	CapabilityRealization.incomingTraces(self, acr);
AbstractCapabilityRealization.realizingCapability(acr, target);
}

@Surrogate(feature="systemComponent")
pattern CapabilityInvolvement__systemComponent(self :CapabilityInvolvement, target : SystemComponent) {
	CapabilityInvolvement.involved(self, target);
}

@Surrogate(feature="capability")
pattern CapabilityInvolvement__capability(self :CapabilityInvolvement, target : Capability) {
	CapabilityInvolvement.involver(self, target);
}


