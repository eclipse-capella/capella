/*******************************************************************************
 * Copyright (c) 2006, 2019 THALES DMS FRANCE.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Thales - initial API and implementation
 *******************************************************************************/

/* Generated file */

package org.polarsys.capella.viatra.core.data.oa.surrogate

import "http://www.polarsys.org/capella/core/oa/1.4.0"

// Start of user code for imports 
import "http://www.polarsys.org/capella/common/core/1.4.0"
import "http://www.polarsys.org/capella/core/fa/1.4.0"
import "http://www.polarsys.org/capella/core/ctx/1.4.0"

// End of user code

@Surrogate(feature="activityAllocations")
pattern OperationalActivity__activityAllocations(self : OperationalActivity, target : ActivityAllocation) {
	OperationalActivity.incomingTraces(self, target);
}

@Surrogate(feature="ownedProcess")
pattern OperationalActivity__ownedProcess(self : OperationalActivity, target : OperationalProcess) {
	OperationalActivity.ownedFunctionalChains(self, target);
}

@Surrogate(feature="allocatorEntities")
pattern OperationalActivity__allocatorEntities(self : OperationalActivity, target : Entity) {
	OperationalActivity.incomingTraces(self, cfa);
ComponentFunctionalAllocation.sourceElement(cfa, target);
}

@Surrogate(feature="realizingSystemFunctions")
pattern OperationalActivity__realizingSystemFunctions(self : OperationalActivity, target : SystemFunction) {
	OperationalActivity.inFunctionRealizations.allocatingFunction(self, target);
}

@Surrogate(feature="allocatingRoles")
pattern OperationalActivity__allocatingRoles(self : OperationalActivity, target : Role) {
	OperationalActivity.activityAllocations.role(self, target);
}

@Surrogate(feature="containedOperationalActivities")
pattern OperationalActivity__containedOperationalActivities(self : OperationalActivity, target : OperationalActivity) {
	OperationalActivity.ownedFunctions(self, target);
}

@Surrogate(feature="childrenOperationalActivities")
pattern OperationalActivity__childrenOperationalActivities(self : OperationalActivity, target : OperationalActivity) {
	OperationalActivity.subFunctions(self, target);
}


