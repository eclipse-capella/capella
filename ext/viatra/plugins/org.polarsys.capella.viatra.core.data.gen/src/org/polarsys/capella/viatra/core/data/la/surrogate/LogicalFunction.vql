/*******************************************************************************
 * Copyright (c) 2006, 2019 THALES DMS FRANCE.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Thales - initial API and implementation
 *******************************************************************************/

/* Generated file */

package org.polarsys.capella.viatra.core.data.la.surrogate

import "http://www.polarsys.org/capella/core/la/1.4.0"

// Start of user code for imports 
import "http://www.polarsys.org/capella/common/core/1.4.0"
import "http://www.polarsys.org/capella/core/fa/1.4.0"
import "http://www.polarsys.org/capella/core/ctx/1.4.0"
import "http://www.polarsys.org/capella/core/pa/1.4.0"
import "http://www.polarsys.org/capella/core/cs/1.4.0"


// End of user code

@Surrogate(feature="realizedSystemFunctions")
pattern LogicalFunction__realizedSystemFunctions(self : LogicalFunction, target : SystemFunction) {
	LogicalFunction.outFunctionRealizations.allocatedFunction(self, target);
}

@Surrogate(feature="realizingPhysicalFunctions")
pattern LogicalFunction__realizingPhysicalFunctions(self : LogicalFunction, target : PhysicalFunction) {
	LogicalFunction.inFunctionRealizations.allocatingFunction(self, target);
}

@Surrogate(feature="containedLogicalFunctions")
pattern LogicalFunction__containedLogicalFunctions(self : LogicalFunction, target : LogicalFunction) {
	LogicalFunction.ownedFunctions(self, target);
}

@Surrogate(feature="childrenLogicalFunctions")
pattern LogicalFunction__childrenLogicalFunctions(self : LogicalFunction, target : LogicalFunction) {
	LogicalFunction.subFunctions(self, target);
}

@Surrogate(feature="allocatingLogicalComponents")
pattern LogicalFunction__allocatingSystemComponents(self : LogicalFunction, target : LogicalComponent) {
	LogicalFunction.incomingTraces(self, traces);
	ComponentFunctionalAllocation.sourceElement(traces, target);
}



