/*******************************************************************************
 * Copyright (c) 2006, 2019 THALES DMS FRANCE.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Thales - initial API and implementation
 *******************************************************************************/

/* Generated file */

package org.polarsys.capella.viatra.core.data.information.communication.surrogate

import "http://www.polarsys.org/capella/core/information/communication/1.4.0"

// Start of user code for imports 

// End of user code

@Surrogate(feature="produce")
pattern CommunicationLinkExchanger__produce(self : CommunicationLinkExchanger, target : CommunicationLink) {
	CommunicationLinkExchanger.ownedCommunicationLinks(self, target);
CommunicationLink.kind(target, ::PRODUCE);
}

@Surrogate(feature="consume")
pattern CommunicationLinkExchanger__consume(self : CommunicationLinkExchanger, target : CommunicationLink) {
	CommunicationLinkExchanger.ownedCommunicationLinks(self, target);
CommunicationLink.kind(target, ::CONSUME);
}

@Surrogate(feature="send")
pattern CommunicationLinkExchanger__send(self : CommunicationLinkExchanger, target : CommunicationLink) {
	CommunicationLinkExchanger.ownedCommunicationLinks(self, target);
CommunicationLink.kind(target, ::SEND);
}

@Surrogate(feature="receive")
pattern CommunicationLinkExchanger__receive(self : CommunicationLinkExchanger, target : CommunicationLink) {
	CommunicationLinkExchanger.ownedCommunicationLinks(self, target);
CommunicationLink.kind(target, ::RECEIVE);
}

@Surrogate(feature="call")
pattern CommunicationLinkExchanger__call(self : CommunicationLinkExchanger, target : CommunicationLink) {
	CommunicationLinkExchanger.ownedCommunicationLinks(self, target);
CommunicationLink.kind(target, ::CALL);
}

@Surrogate(feature="execute")
pattern CommunicationLinkExchanger__execute(self : CommunicationLinkExchanger, target : CommunicationLink) {
	CommunicationLinkExchanger.ownedCommunicationLinks(self, target);
CommunicationLink.kind(target, ::EXECUTE);
}

@Surrogate(feature="write")
pattern CommunicationLinkExchanger__write(self : CommunicationLinkExchanger, target : CommunicationLink) {
	CommunicationLinkExchanger.ownedCommunicationLinks(self, target);
CommunicationLink.kind(target, ::WRITE);
}

@Surrogate(feature="access")
pattern CommunicationLinkExchanger__access(self : CommunicationLinkExchanger, target : CommunicationLink) {
	CommunicationLinkExchanger.ownedCommunicationLinks(self, target);
CommunicationLink.kind(target, ::ACCESS);
}

@Surrogate(feature="acquire")
pattern CommunicationLinkExchanger__acquire(self : CommunicationLinkExchanger, target : CommunicationLink) {
	CommunicationLinkExchanger.ownedCommunicationLinks(self, target);
CommunicationLink.kind(target, ::ACQUIRE);
}

@Surrogate(feature="transmit")
pattern CommunicationLinkExchanger__transmit(self : CommunicationLinkExchanger, target : CommunicationLink) {
	CommunicationLinkExchanger.ownedCommunicationLinks(self, target);
CommunicationLink.kind(target, ::TRANSMIT);
}


