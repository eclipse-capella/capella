/*******************************************************************************
 * Copyright (c) 2006, 2019 THALES DMS FRANCE.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Thales - initial API and implementation
 *******************************************************************************/

/* Generated file */

package org.polarsys.capella.viatra.core.data.fa.surrogate

import "http://www.polarsys.org/capella/core/fa/1.4.0"

// Start of user code for imports 
import "http://www.polarsys.org/capella/core/core/1.4.0"
import "http://www.polarsys.org/capella/common/core/1.4.0"
import "http://www.polarsys.org/capella/core/interaction/1.4.0"
import "http://www.polarsys.org/capella/core/ctx/1.4.0"
import "http://www.polarsys.org/capella/core/la/1.4.0"

// End of user code

@Surrogate(feature="involvedFunctionalChainInvolvements")
pattern FunctionalChain__involvedFunctionalChainInvolvements(self : FunctionalChain, target : FunctionalChainInvolvement) {
	FunctionalChain.ownedFunctionalChainInvolvements(self, target);
}

@Surrogate(feature="involvedFunctions")
pattern FunctionalChain__involvedFunctions(self : FunctionalChain, target : AbstractFunction) {
	FunctionalChain.involvedElements(self, target);
}

@Surrogate(feature="involvedFunctionalExchanges")
pattern FunctionalChain__involvedFunctionalExchanges(self : FunctionalChain, target : FunctionalExchange) {
	FunctionalChain.involvedElements(self, target);
}

@Surrogate(feature="involvedElements")
pattern FunctionalChain__involvedElements(self : FunctionalChain, target : InvolvedElement) {
	FunctionalChain.involvedFunctionalChainInvolvements.involved(self, target);
}

@Surrogate(feature="enactedFunctions")
pattern FunctionalChain__enactedFunctions(self : FunctionalChain, target : AbstractFunction) {
	FunctionalChain.involvedFunctions(self, target);
}

@Surrogate(feature="enactedFunctionalBlocks")
pattern FunctionalChain__enactedFunctionalBlocks(self : FunctionalChain, target : AbstractFunctionalBlock) {
	FunctionalChain.enactedFunctions.allocationBlocks(self, target);
}

@Surrogate(feature="firstFunctionalChainInvolvements")
pattern FunctionalChain__firstFunctionalChainInvolvements(self : FunctionalChain, target : FunctionalChainInvolvement) {
	FunctionalChain.ownedFunctionalChainInvolvements(self, target);
	FunctionalChainInvolvement.involved(target, _);
	neg find _PreviousInvolvement(target, _);
}
private pattern _PreviousInvolvement(fci : FunctionalChainInvolvement, previous : FunctionalChainInvolvement) {
	FunctionalChainInvolvement.previousFunctionalChainInvolvements(fci, previous);
}


@Surrogate(feature="involvingCapabilities")
pattern FunctionalChain__involvingCapabilities(self : FunctionalChain, target : Capability) {
	FunctionalChain.involvingInvolvements(self, fcaci);
FunctionalChainAbstractCapabilityInvolvement.capability(fcaci, target);
}

@Surrogate(feature="involvingCapabilityRealizations")
pattern FunctionalChain__involvingCapabilityRealizations(self : FunctionalChain, target : CapabilityRealization) {
	FunctionalChain.involvingInvolvements(self, fcaci);
FunctionalChainAbstractCapabilityInvolvement.capability(fcaci, target);
}

@Surrogate(feature="realizedFunctionalChains")
pattern FunctionalChain__realizedFunctionalChains(self : FunctionalChain, target : FunctionalChain) {
	FunctionalChainRealization.sourceElement(fcr, self);
FunctionalChainRealization.targetElement(fcr, target);
}

@Surrogate(feature="realizingFunctionalChains")
pattern FunctionalChain__realizingFunctionalChains(self : FunctionalChain, target : FunctionalChain) {
	FunctionalChainRealization.targetElement(fcr, self);
FunctionalChainRealization.sourceElement(fcr, target);
}


