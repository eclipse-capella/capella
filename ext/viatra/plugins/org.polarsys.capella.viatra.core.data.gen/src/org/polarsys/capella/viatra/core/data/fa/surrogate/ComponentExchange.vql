/*******************************************************************************
 * Copyright (c) 2006, 2019 THALES DMS FRANCE.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 * 
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Thales - initial API and implementation
 *******************************************************************************/

/* Generated file */

package org.polarsys.capella.viatra.core.data.fa.surrogate

import "http://www.polarsys.org/capella/core/fa/1.4.0"

// Start of user code for imports 
import "http://www.polarsys.org/capella/common/core/1.4.0"
import "http://www.polarsys.org/capella/core/cs/1.4.0"
import "http://www.polarsys.org/capella/core/information/1.4.0"

// End of user code

@Surrogate(feature="allocatedFunctionalExchanges")
pattern ComponentExchange__allocatedFunctionalExchanges(self : ComponentExchange, target : FunctionalExchange) {
	ComponentExchange.outgoingComponentExchangeFunctionalExchangeAllocations.allocatedFunctionalExchange(self, target);
}

@Surrogate(feature="incomingComponentExchangeRealizations")
pattern ComponentExchange__incomingComponentExchangeRealizations(self : ComponentExchange, target : ComponentExchangeRealization) {
	ComponentExchange.incomingTraces(self, target);
}

@Surrogate(feature="outgoingComponentExchangeRealizations")
pattern ComponentExchange__outgoingComponentExchangeRealizations(self : ComponentExchange, target : ComponentExchangeRealization) {
	ComponentExchange.outgoingTraces(self, target);
}

@Surrogate(feature="outgoingComponentExchangeFunctionalExchangeAllocations")
pattern ComponentExchange__outgoingComponentExchangeFunctionalExchangeAllocations(self : ComponentExchange, target : ComponentExchangeFunctionalExchangeAllocation) {
	ComponentExchange.outgoingTraces(self, target);
}

@Surrogate(feature="sourcePort")
pattern ComponentExchange__sourcePort(self : ComponentExchange, target : Port) {
	ComponentExchange.source(self, target);
} or {
	ComponentExchange.source(self, cee);
	ComponentExchangeEnd.port(cee, target);
}

@Surrogate(feature="sourcePart")
pattern ComponentExchange__sourcePart(self : ComponentExchange, target : Part) {
	ComponentExchange.source(self, target);
} or {
	ComponentExchange.source(self, cee);
	ComponentExchangeEnd.part(cee, target);
}

@Surrogate(feature="targetPort")
pattern ComponentExchange__targetPort(self : ComponentExchange, target : Port) {
	ComponentExchange.target(self, target);
} or {
	ComponentExchange.target(self, cee);
	ComponentExchangeEnd.port(cee, target);
}

@Surrogate(feature="targetPart")
pattern ComponentExchange__targetPart(self : ComponentExchange, target : Part) {
	ComponentExchange.target(self, target);
} or {
	ComponentExchange.target(self, cee);
	ComponentExchangeEnd.part(cee, target);
}

@Surrogate(feature="categories")
pattern ComponentExchange__categories(self : ComponentExchange, target : ComponentExchangeCategory) {
	ComponentExchangeCategory.exchanges(target, self);
}

@Surrogate(feature="allocatorPhysicalLinks")
pattern ComponentExchange__allocatorPhysicalLinks(self : ComponentExchange, target : PhysicalLink) {
	ComponentExchange.incomingTraces(self, cea);
ComponentExchangeAllocation.componentExchangeAllocator(cea, target);
}

@Surrogate(feature="realizedComponentExchanges")
pattern ComponentExchange__realizedComponentExchanges(self : ComponentExchange, target : ComponentExchange) {
	ComponentExchange.outgoingTraces(self, cer);
ComponentExchangeRealization.allocatedComponentExchange(cer, target);
}

@Surrogate(feature="realizingComponentExchanges")
pattern ComponentExchange__realizingComponentExchanges(self : ComponentExchange, target : ComponentExchange) {
	ComponentExchange.incomingTraces(self, cer);
ComponentExchangeRealization.allocatingComponentExchange(cer, target);
}


