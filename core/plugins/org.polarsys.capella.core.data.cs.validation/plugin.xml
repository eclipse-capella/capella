<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.2"?>
<!--
  Copyright (c) 2006, 2019 THALES GLOBAL SERVICES.
  
  This program and the accompanying materials are made available under the
  terms of the Eclipse Public License 2.0 which is available at
  http://www.eclipse.org/legal/epl-2.0
  
  SPDX-License-Identifier: EPL-2.0
  
  Contributors:
       Thales - initial API and implementation
-->
<plugin>
<extension
         point="org.eclipse.emf.validation.constraintProviders">
      <constraintProvider>
         <package
               namespaceUri="http://www.polarsys.org/capella/core/cs/1.4.0">
         </package>
         <constraints
               categories="capella.category/design/well-formedness/dataflows">
         </constraints>
         <constraints
               categories="capella.category/design/well-formedness/interfaces">
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.component.MDCHK_Component_Interfaces_Level"
                  id="DWF_I_04"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_I_04 - Components must implements/uses accessible interfaces"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  The component {0} uses or implements the interface {1} defined in the {2} level
               </message>
               <description>
                  This rule checks that a component uses and implements only interface from valid architecture.
               </description>
               <target
                     class="Interface">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.component.ComponentCommunicationLinkRule"
                  id="DWF_I_05"
                  isEnabledByDefault="true"
                  lang="java"
                  mode="Batch"
                  name="DWF_I_05 - No Equivalent Component Communication Links"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  {0}(Component) has {1} equivalent Communication Links (kind = {2}, protocol = {3}) targeting {4}(ExchangeItem)
               </message>
               <target
                     class="Component">
               </target>
               <description>
                  This rule checks that the component cannot have the same kind of communication link targeting to the same exchange item with the same protocol.
               </description>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interfacePkg.MDCHK_InterfacePkg_Location_1"
                  id="DWF_I_06"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_I_06 - Interface location check"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  {0} (Interface Package) cannot be located under EPBS Architecture.
               </message>
               <description>
                  This rule checks that no Interface is located in EPBS.
               </description>
               <target
                     class="InterfacePkg">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.MDCHK_Component_InterfaceLevel"
                  id="DWF_I_07"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_I_07 - Interface location level"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  {0}({1}) uses or implements the interface {2} from {3} level.
               </message>
               <target
                     class="Component">
               </target>
               <description>
                  This rule checks that a component uses/implements interfaces from the same level or from an upper level.
               </description>
            </constraint>
            
            
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.ExchangeItemAllocationProtocol"
                  id="DWF_I_21"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_I_21 - Exchange Item Allocation Protocol consistency"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  Exchange Item Allocation {0} ({1}) should have ({2}) {3}.
               </message>
               <target
                     class="ExchangeItemAllocation">
               </target>
               <description>
                  This rule checks consistency between the allocated Exchange Item and Acquisition/Transmission protocols of Exchange Item Allocation
               </description>
            </constraint>
            
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.ExchangeItemAllocationProtocolSequence"
                  id="DWF_I_22"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_I_22 - Exchange Item Allocation Protocol used on Sequence Diagram consistency"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  Exchange Item Allocation {0} ({1}) should have ({2}) {3}, since it is referenced through {4} (Sequence Message) ({5}, {6} return message) in {7} (Scenario)
               </message>
               <target
                     class="ExchangeItemAllocation">
               </target>
               <description>
                  This rule checks consistency between the Acquisition/Transmission protocols of Exchange Item Allocation and its usage through Sequence Message
               </description>
            </constraint>
            
            
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.ExchangeItemAllocationAllocatedItem"
                  id="DWF_I_11"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_I_11 - ExchangeItemAllocation AllocatedItem Check"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  {0}
               </message>
               <target
                     class="ExchangeItemAllocation">
               </target>
               <description>
                  This rule checks that a ExchangeItemAllocation AllocatedItem value is not null.
               </description>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.EIAAllocatedItemLayerConsistency"
                  id="DWF_I_12"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_I_12 - Exchange item allocation layer consistency"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} (ExchangeItemAllocation) should not allocate {1} ({2}) of lower Architecture layer.
               </message>
               <description>
                  This rule ensures that an ExchangeItemAllocation from given layer should not allocate element of lower Architecture layer.

Exmaple:
If an ExchangeItemAllocation is on SystemArchitecture layer. It should not allocate any element from Logical or Physical Layer.
               </description>
               <target
                     class="ExchangeItemAllocation">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.TechnicalInterfaceRepresentAllCommunicationLinks"
                  id="DWF_I_14"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_I_14 -  Technical interface represent all communication links"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} (Interface) does not represents all the communication links from {1} (Component) to {2} (Component). Exchange items {3} should be allocated to this interface.
               </message>
               <description>
                  This rule checks that an existing technical interface between two Components represent all the Communication Links with the same direction between those two components.
               </description>
               <target
                     class="Interface">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.ExchangeItemAllocationForTechnicalInterfaceHasCommunicationLink"
                  id="DWF_I_15"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_I_15 -  Exchange Item Allocation For Technical Interface Has Communication Link"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  There is no corresponding communication link from component {0} to component {1} for the exchange item {2} that is allocated to interface {3}.
               </message>
               <description>
                  This rule checks that for each Exchange Item Allocation of a technical Interface, there is a Communication Link associated to it.
               </description>
               <target
                     class="ExchangeItemAllocation">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.TechnicalInterfacesAreNotProvidedOrRequired"
                  id="DWF_I_16"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_I_16 -  Technical interfaces are not provided or required"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} (Interface) can not be provided or required by components since it is a technical interface ({1}).
               </message>
               <description>
                  This rule checks that technical interfaces are not provided or required
               </description>
               <target
                     class="Interface">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.AtMostOneTechnicalInterfaceBetweenTwoComponents"
                  id="DWF_I_17"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_I_17 - At most one technical interface between two components"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  Couple of components ({0}, {1}) has more than one technical interfaces ({2}).
               </message>
               <description>
                  This rule checks that there is at most one technical Interfaces by couple of component (direction is meaningful).
               </description>
               <target
                     class="Interface">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.TechnicalInterfacesShouldNotBeUsedByMoreThanOneComponent"
                  id="DWF_I_18"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_I_18 - Technical interfaces should not be used by more than one component"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  Technical interface {0} is used by more than one component ({1}).
               </message>
               <description>
                  This rule checks that a technical interfaces should not be used by more than one component.
               </description>
               <target
                     class="Interface">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.TechnicalInterfacesShouldNotBeImplementedByMoreThanOneComponent"
                  id="DWF_I_19"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_I_19 - Technical interfaces should not be implemented by more than one component"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  Technical interface {0} is implemented by more than one component ({1}).
               </message>
               <description>
                  This rule checks that a technical interfaces should not be implemented by more than one component
               </description>
               <target
                     class="Interface">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.IntefaceDoesNotContainSimilarExchangeItemAllocation"
                  id="DWF_I_20"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_I_20 - Interface does not contain similar Exchange Item Allocation"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0}(Interface) has {1} equivalent Exchange Item Allocation (protocols = {2}, {3}) targeting {4}(ExchangeItem)
               </message>
               <description>
                  This rule checks that an interface does not contain similar Exchange Item Allocation (that target the same Exchange Item and have same protocols).
               </description>
               <target
                     class="Interface">
               </target>
            </constraint>            
         </constraints>
         <constraints
               categories="capella.category/design/well-formedness/components">
            <constraint class="org.polarsys.capella.core.data.cs.validation.component.MDCHK_ComponentCycle" 
            	id="DWF_DC_01" 
            	isEnabledByDefault="true" 
            	lang="Java" mode="Batch" 
            	name="DWF_DC_01 - Partitions cycles check" 
            	severity="ERROR" 
            	statusCode="1">
               <message>
                  Part cycle: {0} {3} contains at a certain depth a part typed by {1} {4} and {1} {4}
contains the part {2} {5} typed by {0} {3}.
               </message>
               <description>
                  This validation rule ensures that a partition of an element cannot have a partition typed by this element. Thus it avoids"partitions cycles".
               </description>
               <target class="Component">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.part.Part_AccessibleType"
                  id="DWF_DC_05"
                  isEnabledByDefault="true"
                  lang="java"
                  mode="Batch"
                  name="DWF_DC_05 - Part type accessibility check"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} (Part) is typed by inaccessible {1}.
               </message>
               <target
                     class="Part">
               </target>
               <description>
                  This rule ensures that a part is typed by an accessible Component.
               </description>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.component.MDCHK_Component_PartTypeLevel"
                  id="DWF_DC_06"
                  isEnabledByDefault="true"
                  lang="java"
                  mode="Batch"
                  name="DWF_DC_06 - Component Parts type level check"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  The Part {0} of {1} is typed by {2} which does not belong to the same level.
               </message>
               <target
                     class="Component">
               </target>
               <description>
                  This rule ensures that each parts of a component have the same level (i.e context, logical, physical,...) that the component itself.
               </description>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.physicalPath.PhysicalPathComponentExchangeAllocation"
                  id="DWF_DC_33"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_DC_33 - PhysicalPath allocated CE"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0}
               </message>
               <description>
                  This rule checks that a PhysicalPath should allocated component exchage between its path.
               </description>
               <target
                     class="PhysicalPath">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.physicalPort.PhysicalPortOnBehaviourPC"
                  id="DWF_DC_30"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_DC_30 - PhysicalPort on BehaviourPC"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  {0}
               </message>
               <description>
                  This rule ensures that a Physical Port is not contained in a Physical Component of nature BEHAVIOUR.
               </description>
               <target
                     class="PhysicalPort">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.part.Part_AbstractType"
                  id="DWF_DC_07"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_DC_07 - Part typed by an Abstract Type"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} (Part) is typed by {1} which is abstract.
               </message>
               <description>
                  This rule checks that a Part is typed by an abstract type.
               </description>
               <target
                     class="Part">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.part.Part_NullType"
                  id="DWF_DC_08"
                  isEnabledByDefault="true"
                  lang="java"
                  mode="Batch"
                  name="DWF_DC_08 - Part typed"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  {0} (Part) does not have a type.
               </message>
               <target
                     class="Part">
               </target>
               <description>
                  This rule ensures that a part has always a type.
               </description>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.component.MDCHK_Component_AllocatedFunctions_1"
                  id="DWF_DC_09"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_DC_09 - Component allocated functions types check"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  {0}
               </message>
               <description>
                  This rule checks that a Component allocates only leaf Functions of its own level.
               </description>
               <target
                     class="Component">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.physicalPath.MDCHK_PhysicalPath_InvolvedLinks"
                  id="DWF_DC_03"
                  isEnabledByDefault="true"
                  lang="java"
                  mode="Batch"
                  name="DWF_DC_03 - Physical Path Involved Links check"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} (PhysicalPath) {1}
               </message>
               <description>
                  This rule checks that a PhysicalPath is valid.
               </description>
               <target
                     class="PhysicalPath">
               </target>
            </constraint>
            <constraint class="org.polarsys.capella.core.data.cs.validation.physicalPathInvolvement.PhysicalPathInvolvement_Involved" 
                        id="DWF_DC_24" 
                        isEnabledByDefault="true" 
            			lang="Java" 
                        mode="Batch" 
            			name="DWF_DC_24 - Physical Path involvement check involved element" 
                        severity="WARNING" 
            			statusCode="1">
               <message>
                  ({0}) is not well formed. Involved element shall be set to {1}.
               </message>
               <description>
                  This rule checks that a Physical Path Involvement only involves an Part, a Physical Link or a Physical Path.
               </description>
               <target class="PhysicalPathInvolvement">
               </target>
            </constraint>
            <constraint class="org.polarsys.capella.core.data.cs.validation.physicalLink.PhysicalLink_Location" id="DWF_DC_19" isEnabledByDefault="false" lang="Java" mode="Batch" name="DWF_DC_19 - Physical Link location check" severity="WARNING" statusCode="1">
               <message>
                  The Physical Link &quot;{0}&quot; is not located in &quot;{1}&quot;, the common ancestor between its source/target elements.
               </message>
               <description>
                  This rule ensures that Physical Link is located in the common ancestor between its source/target elements.
               </description>
               <target class="PhysicalLink">
               </target>
            </constraint>
            <constraint class="org.polarsys.capella.core.data.cs.validation.component.MDCHK_ComponentHumanCheckNoSubComponents" id="DWF_DC_36" 
            isEnabledByDefault="true" lang="Java" mode="Batch" 
            name="DWF_DC_36 - Component or Actor compositions checks" severity="ERROR" statusCode="1">
               <message>
                  {0} {1}.
               </message>
               <description>
                  This rule checks Component or Actor composition following the rules below:
                  1. Component or Actor with the 'is Human' flag set on true cannot have sub Components, sub Actors, also no contained Parts or managing sub-packages.
               	  2. An Operational Actor cannot be decomposed.
               </description>
               <target class="Component">
               </target>
            </constraint>
            <constraint class="org.polarsys.capella.core.data.cs.validation.component.MDCHK_SystemAnalysisOneSystem" id="DWF_DC_37" 
            isEnabledByDefault="true" lang="Java" mode="Batch" 
            name="DWF_DC_37 - This rule checks that only one System Component is allowed at SystemAnalysis level" severity="ERROR" statusCode="1">
               <message>
                  System cannot be decomposed.
               </message>
               <description>
                  This rule checks that only one System Component is allowed at SystemAnalysis level (cannot have parts inside a System nor component type)
               </description>
               <target class="Component">
               </target>
            </constraint>
            <constraint class="org.polarsys.capella.core.data.cs.validation.component.MDCHK_OneRootComponent" id="DWF_DC_38" 
            isEnabledByDefault="true" lang="Java" mode="Batch" 
            name="DWF_DC_38 - This rule checks that only a Root Component exists at System/Logical/Physical level" severity="ERROR" statusCode="1">
               <message>
                  {0}
               </message>
               <description>
                  This rule checks that only a Root Component exists at an Architectural level. Zero or more than one Root Components are not allowed.
               </description>
               <target class="ComponentArchitecture">
               </target>
            </constraint>
            <constraint class="org.polarsys.capella.core.data.cs.validation.component.MDCHK_OperationalEntityCheckNotHuman" id="DWF_DC_40" 
            isEnabledByDefault="true" lang="Java" mode="Batch" 
            name="DWF_DC_40 - This rule checks that an Operational Entity is not HUMAN" severity="WARNING" statusCode="1">
               <message>
                  {0} cannot be HUMAN.
               </message>
               <description>
                  This rule checks that an Operational Entity is not HUMAN.
               </description>
               <target class="Component">
               </target>
            </constraint>
            <constraint class="org.polarsys.capella.core.data.cs.validation.component.MDCHK_OperationalActorCheckHuman" id="DWF_DC_41" 
            isEnabledByDefault="true" lang="Java" mode="Batch" 
            name="DWF_DC_41 - This rule checks that an Operational Actor is HUMAN" severity="WARNING" statusCode="1">
               <message>
                  {0} should be HUMAN.
               </message>
               <description>
                  This rule checks that an Operational Actor is HUMAN.
               </description>
               <target class="Component">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.component.ComponentNoPart"
                  id="DWF_DC_42"
                  isEnabledByDefault="true"
                  lang="java"
                  mode="Batch"
                  name="DWF_DC_42 - Component with parts"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  {0} is not referenced by any Part.
               </message>
               <target
                     class="Component">
               </target>
               <description>
                  This rule ensures that a component is always referenced by at least one part.
               </description>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.component.Component_GeneralizationItself"
                  id="DWF_DC_17"
                  isEnabledByDefault="true"
                  lang="java"
                  mode="Batch"
                  name="DWF_DC_17 - Component self generalization not allowed"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  {0} generalizes itself.
               </message>
               <target
                     class="Component">
               </target>
               <description>
                  This rule ensures that a Component cannot generalize itself.
               </description>
            </constraint>
         </constraints>
         <constraints
               categories="capella.category/integrity">
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.component.ComponentRealization_Consistency"
                  id="I_05"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="I_05 - Component Realization consistency"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  Realization consistency error: {0}.
               </message>
               <target
                     class="Component">
               </target>
               <description>
                  This rule ensures that Component Realization Realizations always have consistent Source and Target.
               </description>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.component.MDCHK_Component_MultipleUseOrImplementationOfSameItfCheck"
                  id="I_16"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="I_16 - Several Implementation/Use of the same interface by a component Check"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  {0} cannot {1} {2} (Interface) several times.
               </message>
               <description>
                  This rule allows to ensure that a component cannot implement the same interface several times or use the same interface several times.
               </description>
               <target
                     class="Component">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.part.ComponentPkg_RootComponentPart"
                  id="I_17"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="I_17 - Contexts minimal content check"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  {0} ({1}) does not contain any root component part.
               </message>
               <description>
                  This rule checks that context packages contain at least one component (the root component) of the correct level.
               </description>
               <target
                     class="ComponentPkg">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.physicalPathInvolvement.PhysicalPathInvolvement_NextAndPrevious_1"
                  id="I_29"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="I_29 - Physical path involvement check 1"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} (Physical Path Involvement) has an empty next and/or previous involvement.
               </message>
               <description>
                  This rule checks that a Physical Path Involvement has a valid next and/or previous involvement (not empty)
               </description>
               <target
                     class="PhysicalPathInvolvement">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.physicalPathInvolvement.PhysicalPathInvolvement_NextAndPrevious_2"
                  id="I_30"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="I_30 - Physical path involvement check 2"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} (Physical Path Involvement) has an invalid next and/or previous involvement.
               </message>
               <description>
                  This rule checks that a Physical Path Involvement has a valid next and/or previous involvement (contained by the same physical path)
               </description>
               <target
                     class="PhysicalPathInvolvement">
               </target>
            </constraint>
         <constraint
                  class="org.polarsys.capella.core.data.cs.validation.component.GeneralizedComponents_Human"
                  id="I_41"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="I_41 - Component generalizes other Components with HUMAN different by its own"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} is {1} but generalizes {2} Components.
               </message>
               <description>
                  This rule checks if a Component generalizes other Components with HUMAN different by its own.
               </description>
               <target
                     class="Component">
               </target>
         </constraint>
         <constraint
                  class="org.polarsys.capella.core.data.cs.validation.component.RealizedComponents_Human"
                  id="I_42"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="I_42 - Component realizes other Components with HUMAN different by its own"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} is {1} but realizes {2} Components.
               </message>
               <description>
                  Checks if a Component realizes other Components with HUMAN different by its own.
               </description>
               <target
                     class="Component">
               </target>
            </constraint>
         </constraints>
         <constraints
               categories="capella.category/transition/justification/physical_architecture">
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.MDCHK_Interface_Realization_2"
                  id="TJ_PA_11"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="TJ_PA_11 - Interface realization check 2"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} (Interface) is not realized by any Physical Interface.
               </message>
               <description>
                  This rule checks that a Logical Interface is realized by at least one Physical Interface.
               </description>
               <target
                     class="Interface">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.physicalArtifact.PhysicalArtifactAllocated"
                  id="TJ_PA_09"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="TJ_PA_09 - Physical Artifact Allocation"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} {1} is not realized by any Configuration Item.
               </message>
               <target
                     class="AbstractPhysicalArtifact">
               </target>
               <description>
                  This rule checks that a Physical Artifact is realized by at least one Configuration Item.
               </description>
            </constraint>
         </constraints>
         <constraints
               categories="capella.category/design/completeness">
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.MDCHK_Interface_Implementation_1"
                  id="DCOM_06"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DCOM_06 - Interface implementation 1"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} (Interface) is not implemented by any Component or provided by any Component Port.
               </message>
               <description>
                  This rule checks that an Interface is implemented by at least one Component.
               </description>
               <target
                     class="Interface">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.MDCHK_Interface_Usage_2"
                  id="DCOM_07"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DCOM_07 - Interface used by one sub logical componentat least"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} (Interface) is not used by one of the sub Logical Component.
               </message>
               <description>
                  This rule checks that an interface is used by one of the sub Logical Component
               </description>
               <target
                     class="Interface">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.MDCHK_Interface_Implementation_2"
                  id="DCOM_08"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DCOM_08 - Interface implemented by one logical component"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} (Interface) is not implemented by one of the sub Logical Component.
               </message>
               <description>
                  This rule checks that an Interface is implemented by one of the sub Logical Component.
               </description>
               <target
                     class="Interface">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.MDCHK_Interface_Operations"
                  id="DCOM_09"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DCOM_09 - Interface operations number check"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} (Interface) doesn't contains any operation.
               </message>
               <description>
                  This rule checks that an Interface contains at least one operation.
               </description>
               <target
                     class="Interface">
               </target>
            </constraint>
         </constraints>
         <constraints
               categories="capella.category/design/coverage">
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.MDCHK_Interface_Usage_1"
                  id="DCOV_01"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DCOV_01 - Interface used one component at least"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} (Interface) is not used by any Component or required by any Component Port.
               </message>
               <description>
                  This rule checks that an Interface is used by at least one Component.
               </description>
               <target
                     class="Interface">
               </target>
            </constraint>
            <constraint class="org.polarsys.capella.core.data.cs.validation.physicalPort.PhysicalPortPhysicalLink" id="DCOV_11" isEnabledByDefault="true" lang="java" mode="Batch" name="DCOV_11 - Physical port Physical Link check" severity="WARNING" statusCode="1">
               <message>
                  {0} (Physical Port) is not used by any Physical Link.
               </message>
               <target class="PhysicalPort">
               </target>
               <description>
                  This rule generates a warning if there is no Physical Links using the target Physical Port.
               </description>
            </constraint>
         </constraints>
         <constraints
               categories="capella.category/transition/consistency/interfaces">
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.ME01G_ExchangeItemAllocation"
                  id="TC_I_03"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="TC_I_03 - Exchange item allocation check"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  The {1} (ExchangeItem) is defined into {2} level and realized into the {3} level. {0} Interface allocates {1} ExchangeItem instead of allocating realized ExchangeItem.
               </message>
               <target
                     class="ExchangeItemAllocation">
               </target>
               <description>
                  This rule checks that an Interface isn't linked to an ExchangeItem from a previous level whereas it is realized in the same level than the Interface.
A warning can be raised if you have performed a transition of the Interface before performing a transition of the allocated ExchangeItem.
You should perform another transition of the Interface from the lower level to use the realized ExchangeItem. 
Interface should be linked to the realized ExchangeItem.
               </description>
            </constraint>
         </constraints>
      </constraintProvider>
      
      
      <constraintProvider>
         <package
               namespaceUri="http://www.polarsys.org/capella/common/core/1.4.0">
         </package>
         <constraints
               categories="capella.category/design/completeness">
               
               <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.MDCHKComponentInterfaceFunctionPortExchangeItemAllocationConsistency"
                  id="DCOM_15"
                  isEnabledByDefault="false"
                  lang="Java"
                  mode="Batch"
                  name="DCOM_15 - Exchange item allocation consistency"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} 
               </message>
               <description>
               This rule is applied to a Component 
 1) Checks that all Exchange Items allocated by its Interfaces are allocated to one of Function Ports of its allocated Functions.
 2) Checks that all Exchange Items allocated by Function Ports of its allocated Functions are allocated to one of its Interfaces(used/implemented/provided/required).
               
				 
               </description>
               <target
                     class="ModelElement">
               </target>
            </constraint>
               
         
               <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.MDCHKInterfaceExchangeItemAllocationConsistency"
                  id="DCOM_16"
                  isEnabledByDefault="false"
                  lang="Java"
                  mode="Batch"
                  name="DCOM_16 - Interface Exchange item allocation consistency"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  All exchange items allocated by {0} of {1} shall be allocated to one of functions ports of its allocated functions 
               </message>
               <description>
               This rule is applied to an Interface and checks that all Exchange Items allocated by an Interface of a Component are allocated to one of Function Ports of its allocated Functions.
               </description>
               <target
                     class="ModelElement">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.MDCHKFunctionPortExchangeItemAllocationConsistency"
                  id="DCOM_17"
                  isEnabledByDefault="false"
                  lang="Java"
                  mode="Batch"
                  name="DCOM_17 - Function Port Exchange item allocation consistency"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  All exchange items allocated by {0} shall be allocated to one of Interfaces of {1} 
               </message>
               <description>

This rule is applied to a Function Port and checks that all Exchange Items allocated by a Function Port are allocated to one of Interfaces of its allocating Component

               </description>
               <target
                     class="ModelElement">
               </target>
            </constraint>
            
            </constraints>
            <constraints
               categories="capella.category/design/well-formedness/interfaces">
            <constraint
                  class="org.polarsys.capella.core.data.cs.validation.interface_.InterfaceAndExchangeItemsLocationConsistency"
                  id="DWF_I_13"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_I_13 - Interface and Exchange item location check"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  The element {0} is linked through {3} [{2}] to {1} which is defined outside its namespace
               </message>
               <description>
                  This rule checks if a component is linked to interfaces and exchange items which are defined in a unavailable location (for instance a component should not be linked to an inner interface of another component)
               </description>
               <target
                     class="ModelElement">
               </target>
            </constraint>
            
            
            
         </constraints>
      </constraintProvider>
   </extension>
</plugin>
