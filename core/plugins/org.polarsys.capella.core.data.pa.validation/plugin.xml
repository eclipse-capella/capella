<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.2"?>
<!--
  Copyright (c) 2006, 2019, 2020 THALES GLOBAL SERVICES.
  
  This program and the accompanying materials are made available under the
  terms of the Eclipse Public License 2.0 which is available at
  http://www.eclipse.org/legal/epl-2.0
  
  SPDX-License-Identifier: EPL-2.0
  
  Contributors:
       Thales - initial API and implementation
-->
<plugin>
   <extension point="org.eclipse.emf.validation.constraintProviders">
      <constraintProvider>
         <package namespaceUri="http://www.polarsys.org/capella/core/pa/1.4.0">
         </package>
         <constraints
               categories="capella.category/transition/justification/epbs">
            <constraint
                  class="org.polarsys.capella.core.data.pa.validation.pa.MDCHK_PhysticalArchitecture_PhysicalArchitectureRealization"
                  id="TJ_EPBS_01"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="TJ_EPBS_01 - Physical Architecture Realization"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  Realization consistency error for {0}.
               </message>
               <target
                     class="PhysicalArchitecture">
               </target>
               <description>
                  This rule checks the realization consistency between physical architecture and EPBS architecture.
               </description>
            </constraint>
         </constraints>
         <constraints
               categories="capella.category/design/well-formedness/components">
            <constraint
                  class="org.polarsys.capella.core.data.pa.validation.physicalComponent.MDCHK_Component_Deployment"
                  id="DWF_DC_04"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="DWF_DC_04 - Check multiple deployment"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  {0} must be deployed only once.
               </message>
               <target
                     class="PhysicalComponent">
               </target>
               <description>
                  This rule depends on the Preference option "Multiple deployment allowed". If this option is set to false, the rule checks that a Behavior Physical Component is not deployed on more than one Node Physical Component.
               </description>
            </constraint>
             <constraint
                   class="org.polarsys.capella.core.data.pa.validation.physicalComponent.PhysicalComponentFunctionAllocation"
                   id="DWF_DC_20"
                   isEnabledByDefault="true"
                   lang="Java"
                   mode="Batch"
                   name="DWF_DC_20 - Physical Component Function Allocation check"
                   severity="ERROR"
                   statusCode="1">
                <message>
                   {0}
                </message>
                <description>
                   This rule ensures that Physical Component of nature NODE does not allocate any Function.
                </description>
                <target
                      class="PhysicalComponent">
                </target>
             </constraint>
             <constraint
                   class="org.polarsys.capella.core.data.pa.validation.physicalComponent.DeploymentParentPCChecks"
                   id="DWF_DC_21"
                   isEnabledByDefault="true"
                   lang="Java"
                   mode="Batch"
                   name="DWF_DC_21 - PhysicalComponent check deployment/containment of Sub-PhysicalComponents"
                   severity="ERROR"
                   statusCode="1">
                <message>
                   {0}
                </message>
                <description>
                 This rule ensures that PC is correctly deploying/containing other child PC.
                 
Node Components (actor or not) can contain Node and deploy Node or Behavior.
Behavior Components (actor or not) can contain Behavior and deploy behavior.
NodePC=Physical Component of nature NODE
BehaviourPC=Physical Component of nature BEHAVIOUR
                </description>
                <target
                      class="PhysicalComponent">
                </target>
             </constraint>
             <constraint
                   class="org.polarsys.capella.core.data.pa.validation.physicalComponent.DeploymentChildPCChecks"
                   id="DWF_DC_22"
                   isEnabledByDefault="true"
                   lang="Java"
                   mode="Batch"
                   name="DWF_DC_22 - PhysicalComponent check deployment/containment in Parent-PhysicalComponent"
                   severity="ERROR"
                   statusCode="1">
                <message>
                   {0}
                </message>
                <description>
                   This rule ensures that PC is correctly deployed/contained in parent PC.
                   
NODE PC cannot be deployed/contained by a  BEHAVIOUR PC
BEHAVIOUR PC cannot be contained by a NODE PC
                </description>
                <target
                      class="PhysicalComponent">
                </target>
             </constraint>
             <constraint
                   class="org.polarsys.capella.core.data.pa.validation.physicalComponent.UnsetPhysicalComponent"
                   id="DWF_DC_34"
                   isEnabledByDefault="true"
                   lang="Java"
                   mode="Batch"
                   name="DWF_DC_34 - PhysicalComponent of nature UNSET"
                   severity="WARNING"
                   statusCode="1">
                <message>
                   {0} has an invalid nature UNSET.
                </message>
                <description>
                   This rule ensures that a Physical Component is not of nature UNSET, with the exceptions below, in which UNSET is allowed:
                   1. Only root Actors (inside structure) can be nature UNSET
                   2. The root Physical Component can be nature UNSET
                </description>
                <target
                      class="PhysicalComponent">
                </target>
             </constraint>
             <constraint
                   class="org.polarsys.capella.core.data.pa.validation.physicalComponent.IsUnsetPhysicalComponentCheck"
                   id="DWF_DC_39"
                   isEnabledByDefault="true"
                   lang="Java"
                   mode="Batch"
                   name="DWF_DC_39 - PhysicalSystem should be of nature UNSET"
                   severity="ERROR"
                   statusCode="1">
                <message>
                   {0} should be of nature UNSET.
                </message>
                <description>
                   This rule ensures that the PhysicalSystem Component is of nature UNSET.
                </description>
                <target
                      class="PhysicalComponent">
                </target>
             </constraint>
         </constraints>
         <constraints
               categories="capella.category/transition/consistency/components">
            <constraint
                  class="org.polarsys.capella.core.data.pa.validation.physicalComponent.PhysicalSystem_RealizedLogicalSystem"
                  id="TC_DC_13"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="TC_DC_13 - Root Physical Component Realization"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0}.
               </message>
               <target
                     class="PhysicalComponent">
               </target>
               <description>
                 This rule ensures that Root Physical Component always realizes a Root Logical Component.
               </description>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.pa.validation.physicalComponent.PhysicalComponent_RealizedLogicalComponents"
                  id="TC_DC_09"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="TC_DC_09 - Physical Component Realization"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0}
               </message>
               <target
                     class="PhysicalComponent">
               </target>
               <description>
                  This rule ensures that Physical Component always realizes a Logical Component.
               </description>
            </constraint>
         </constraints>
         <constraints
               categories="capella.category/transition/justification/physical_architecture">
            <constraint
                  class="org.polarsys.capella.core.data.pa.validation.physicalComponent.MDCHK_PhysicalComponent_InterfaceUseAndImpl_1"
                  id="TJ_PA_06"
                  isEnabledByDefault="true"
                  lang="java"
                  mode="Batch"
                  name="TJ_PA_06 - Physical component used and implemented interface check 1"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} should not implement / use / require / provide [{1}]Interface(s) of logical level which is/are not implemented / used / provided / required  by any of its realized Logical Components.
               </message>
               <description>
                  This rule ensures that a Physical Component implements / uses a logical interface which is used / implemented / provided / required by its realized Logical Components. 

This rule is only evaluated if the transition preference &quot;Transit Interfaces handled by Components from context/logical layers to physical architecture&quot; is disabled.
               </description>
               <target
                     class="PhysicalComponent">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.pa.validation.physicalComponent.MDCHK_PhysicalComponent_InterfaceUseAndImpl_2"
                  id="TJ_PA_07"
                  isEnabledByDefault="true"
                  lang="java"
                  mode="Batch"
                  name="TJ_PA_07 - Physical component used and implemented interface check 2"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0} is not supposed to implement / use / provide / require an interface defined elsewhere than the physical architecture.
               </message>
               <description>
                  This rule checks that a Physical Component implements / uses / provides / requires an interface of its own level. 

This rule is only evaluated if the transition preference&quot;Transit Interfaces handled by Components from context/logical layers to physical architecture&quot; is enabled.
               </description>
               <target
                     class="PhysicalComponent">
               </target>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.pa.validation.physicalComponent.PhysicalActor_RealizedLogicalActor"
                  id="TJ_PA_10"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="TJ_PA_10 - Physical Actor to Logical Actor Realization"
                  severity="WARNING"
                  statusCode="1">
               <message>
                  {0}
               </message>
               <target
                     class="PhysicalComponent">
               </target>
               <description>
                  This rule ensures that a Physical Actor realizes at least one Logical Actor.
               </description>
            </constraint>
            <constraint
                  class="org.polarsys.capella.core.data.pa.validation.pa.MDCHK_PhysicalArchitecture_PaToLaRealization"
                  id="TJ_PA_12"
                  isEnabledByDefault="true"
                  lang="Java"
                  mode="Batch"
                  name="TJ_PA_12 - Physical Architecture Realization"
                  severity="ERROR"
                  statusCode="1">
               <message>
                  {0}.
               </message>
               <description>
                  This rule ensures the realization consistency between Physical Architecture and Logical Architecture.
               </description>
               <target
                     class="PhysicalArchitecture">
               </target>
            </constraint>
         </constraints>
      </constraintProvider>
   </extension>
</plugin>
