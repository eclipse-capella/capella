<?xml version="1.0" encoding="ASCII"?>
<description:Group xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:description="http://www.eclipse.org/sirius/description/1.1.0" xmlns:description_1="http://www.eclipse.org/sirius/diagram/description/1.1.0" xmlns:description_2="http://www.eclipse.org/sirius/diagram/sequence/description/2.0.0" xmlns:description_3="http://www.eclipse.org/sirius/table/description/1.1.0" xmlns:filter="http://www.eclipse.org/sirius/diagram/description/filter/1.1.0" xmlns:style="http://www.eclipse.org/sirius/diagram/description/style/1.1.0" xmlns:tool="http://www.eclipse.org/sirius/diagram/description/tool/1.1.0" xmlns:tool_1="http://www.eclipse.org/sirius/description/tool/1.1.0" xmlns:tool_2="http://www.eclipse.org/sirius/diagram/sequence/description/tool/2.0.0" name="General" version="12.0.0.2017041100">
  <ownedViewpoints name="Common" label="%common" modelFileExtension="melodymodeller" icon="">
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraint%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20ModeState%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20ModeState%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']" name="Modes &amp; States" label="%common.mns" titleExpression="aql:'[M&amp;S] ' + self.name" domainClass="Region">
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaModeller.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/ContextArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/EPBSArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/OperationalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/PhysicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/SharedModel.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.internal.states.filter" label="%common.mns.hide.internal.states.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subContainerMappings[name='SM_InnerModeState_Container']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%common.mns.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
      </filters>
      <defaultLayer name="default" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']">
        <nodeMappings name="SM_ModeState" preconditionExpression="aql:(self.makeUnion(self->filter(capellacommon::FinalState), self->filter(capellacommon::Pseudostate)))->size() > 0" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="feature:involvedStates" domainClass="IState">
          <borderedNodeMappings name="ModeState_Activity" label="ModeState_Label" preconditionExpression="aql:(self.makeUnion(self->filter(capellacommon::Mode), self->filter(capellacommon::State)))->size() > 0 and (not self.doActivity->isEmpty())" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" semanticCandidatesExpression="aql:self" domainClass="IState">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:'do / ' + self.doActivity.name->sep(', ')" labelAlignment="LEFT" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Blank.gif">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </borderedNodeMappings>
          <borderedNodeMappings name="ModeState_Entry" preconditionExpression="aql:(self.makeUnion(self->filter(capellacommon::Mode), self->filter(capellacommon::State)))->size() > 0 and (not self.entry->isEmpty())" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" semanticCandidatesExpression="aql:self" domainClass="IState">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:'entry / ' + self.entry.name->sep(', ')" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Blank.gif">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </borderedNodeMappings>
          <borderedNodeMappings name="ModeState_Exit" preconditionExpression="aql:(self.makeUnion(self->filter(capellacommon::Mode), self->filter(capellacommon::State)))->size() > 0 and (not self.exit->isEmpty())" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" semanticCandidatesExpression="aql:self" domainClass="IState">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:'exit / ' + self.exit.name->sep(', ')" labelAlignment="RIGHT" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Blank.gif">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </borderedNodeMappings>
          <style xsi:type="style:BundledImageDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="5">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='blue']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='blue']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:(self.makeUnion(self->filter(capellacommon::ForkPseudoState), self->filter(capellacommon::JoinPseudoState)))->size() > 0 and self.isReferencedState(view.eContainer().target)">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" resizeKind="NSEW" width="1" height="7">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::ChoicePseudoState)->size() > 0 and self.isReferencedState(view.eContainer().target)">
            <style xsi:type="style:LozengeNodeDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ChoicePseudoState_Border_Gray']" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="1" resizeKind="NSEW" widthComputationExpression="5" heightComputationExpression="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ChoicePseudoState_Color']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::InitialPseudoState)->size() > 0 and self.isReferencedState(view.eContainer().target)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/initialState.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::FinalState)->size() > 0 and self.isReferencedState(view.eContainer().target)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/finalState.png.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::TerminatePseudoState)->size() > 0 and self.isReferencedState(view.eContainer().target)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/terminateState.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.makeUnion(self->filter(capellacommon::ForkPseudoState), self->filter(capellacommon::JoinPseudoState)))->size() > 0">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" resizeKind="NSEW" width="1" height="7">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::ChoicePseudoState)->size() > 0">
            <style xsi:type="style:LozengeNodeDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ChoicePseudoState_Border_Gray']" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="1" resizeKind="NSEW" widthComputationExpression="5" heightComputationExpression="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ChoicePseudoState_Color']">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::InitialPseudoState)->size() > 0">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/initialState.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::FinalState)->size() > 0">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/finalState.png.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::TerminatePseudoState)->size() > 0">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/terminateState.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::DeepHistoryPseudoState)->size() > 0">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Pseudostate_deepHistory.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::ShallowHistoryPseudoState)->size() > 0">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Pseudostate_shallowHistory.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::EntryPointPseudoState)->size() > 0">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" sizeComputationExpression="2" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Pseudostate_entryPoint.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::ExitPointPseudoState)->size() > 0">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" sizeComputationExpression="2" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Pseudostate_exitPoint.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="SM_Transition" label="" preconditionExpression="aql:self.mustDisplayTransition(sourceView,targetView)" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" semanticCandidatesExpression="feature:eAllContents" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subContainerMappings[name='SM_InnerModeState_Container'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@borderedNodeMappings[name='SM_EntryPoint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@borderedNodeMappings[name='SM_ExitPoint']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subContainerMappings[name='SM_InnerModeState_Container'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@borderedNodeMappings[name='SM_EntryPoint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@borderedNodeMappings[name='SM_ExitPoint']" targetFinderExpression="feature:target" sourceFinderExpression="feature:source" domainClass="StateTransition" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='Reconnect%20source%20transition'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='Reconnect%20target%20transition']">
          <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateTransition_Color']" centeredSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@borderedNodeMappings[name='SM_EntryPoint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@borderedNodeMappings[name='SM_ExitPoint']" centeredTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@borderedNodeMappings[name='SM_EntryPoint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@borderedNodeMappings[name='SM_ExitPoint']">
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getStateTransitionLabel(view)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="SM_ModeState_Container" detailDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='SM_CreateDiag_ModesAndStates'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='SM_CreateDiag_ModeStateMachine']" navigationDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='Modes%20%26%20States']" preconditionExpression="aql:(self.makeUnion(self->filter(capellacommon::Mode), self->filter(capellacommon::State)))->size() > 0 and self->filter(capellacommon::FinalState)->size() = 0" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="feature:involvedStates" domainClass="IState" reusedBorderedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']/@borderedNodeMappings[name='ModeState_Activity'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']/@borderedNodeMappings[name='ModeState_Entry'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']/@borderedNodeMappings[name='ModeState_Exit']" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20ModeState%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20ModeState%20From%20Project%20Explorer']">
          <borderedNodeMappings name="SM_EntryPoint" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="aql:self.getEntryPoints()" domainClass="EntryPointPseudoState" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20ModeState%20From%20Project%20Explorer']">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" labelAlignment="RIGHT" sizeComputationExpression="2" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Pseudostate_entryPoint.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </borderedNodeMappings>
          <borderedNodeMappings name="SM_ExitPoint" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="aql:self.getExitPoints()" domainClass="ExitPointPseudoState" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20ModeState%20From%20Project%20Explorer']">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" labelAlignment="RIGHT" sizeComputationExpression="2" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Pseudostate_exitPoint.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </borderedNodeMappings>
          <subNodeMappings name="SM_InnerModeState" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="aql:self.ownedRegions.involvedStates->select(involvedState | (self.makeUnion(involvedState->filter(capellacommon::FinalState), involvedState->filter(capellacommon::Pseudostate)))->size() > 0 and (self.makeUnion(involvedState->filter(capellacommon::EntryPointPseudoState), involvedState->filter(capellacommon::ExitPointPseudoState)))->size() = 0)" domainClass="IState" reusedBorderedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']/@borderedNodeMappings[name='ModeState_Activity']">
            <style xsi:type="style:BundledImageDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="5">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='blue']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='blue']"/>
            </style>
            <conditionnalStyles predicateExpression="aql:(self.makeUnion(self->filter(capellacommon::ForkPseudoState), self->filter(capellacommon::JoinPseudoState)))->size() > 0 and self.isReferencedState(view.eContainer().target)">
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" resizeKind="NSEW" width="1" height="7">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::ChoicePseudoState)->size() > 0 and self.isReferencedState(view.eContainer().target)">
              <style xsi:type="style:LozengeNodeDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ChoicePseudoState_Border_Gray']" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="1" resizeKind="NSEW" widthComputationExpression="5" heightComputationExpression="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ChoicePseudoState_Color']">
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::InitialPseudoState)->size() > 0 and self.isReferencedState(view.eContainer().target)">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/initialState.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::FinalState)->size() > 0 and self.isReferencedState(view.eContainer().target)">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/finalState.png.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::TerminatePseudoState)->size() > 0 and self.isReferencedState(view.eContainer().target)">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/terminateState.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:(self.makeUnion(self->filter(capellacommon::ForkPseudoState), self->filter(capellacommon::JoinPseudoState)))->size() > 0">
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" resizeKind="NSEW" width="1" height="7">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::ChoicePseudoState)->size() > 0">
              <style xsi:type="style:LozengeNodeDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ChoicePseudoState_Border_Gray']" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="1" resizeKind="NSEW" widthComputationExpression="5" heightComputationExpression="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ChoicePseudoState_Color']">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::InitialPseudoState)->size() > 0">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/initialState.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::FinalState)->size() > 0">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/finalState.png.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::TerminatePseudoState)->size() > 0">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/terminateState.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::DeepHistoryPseudoState)->size() > 0">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Pseudostate_deepHistory.svg">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::ShallowHistoryPseudoState)->size() > 0">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Pseudostate_shallowHistory.svg">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
          </subNodeMappings>
          <subContainerMappings name="SM_InnerModeState_Container" detailDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='SM_CreateDiag_ModesAndStates'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='SM_CreateDiag_ModeStateMachine']" navigationDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='Modes%20%26%20States']" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="aql:self.ownedRegions.involvedStates->select(involvedState | (self.makeUnion(involvedState->filter(capellacommon::Mode), involvedState->filter(capellacommon::State)))->size() > 0 and involvedState->filter(capellacommon::FinalState)->size() = 0)" domainClass="IState" reusedBorderedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']/@borderedNodeMappings[name='ModeState_Activity'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@borderedNodeMappings[name='SM_EntryPoint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@borderedNodeMappings[name='SM_ExitPoint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']/@borderedNodeMappings[name='ModeState_Entry'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']/@borderedNodeMappings[name='ModeState_Exit']" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20ModeState%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20ModeState%20From%20Project%20Explorer']" reusedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState']" reusedContainerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subContainerMappings[name='SM_InnerModeState_Container']">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Mode_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
            <conditionnalStyles predicateExpression="aql:view.eContainer() != null and (self->filter(capellacommon::Mode))->size() > 0 and self.isReferencedState(view.eContainer().target)">
              <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Mode_Gray']">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:(self->filter(capellacommon::Mode))->size() > 0">
              <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Mode_Gray']">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql: view.eContainer() != null and (self->filter(capellacommon::State))->size() > 0 and self.isReferencedState(view.eContainer().target)">
              <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_State_Gray']">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:(self->filter(capellacommon::State))->size() > 0">
              <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_State_Gray']">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              </style>
            </conditionnalStyles>
          </subContainerMappings>
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Mode_Gray']">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:view.eContainer() != null and (self->filter(capellacommon::Mode))->size() > 0 and self.isReferencedState(view.eContainer().target)">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Mode_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(capellacommon::Mode))->size() > 0">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Mode_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql: view.eContainer() != null and (self->filter(capellacommon::State))->size() > 0 and self.isReferencedState(view.eContainer().target)">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_State_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(capellacommon::State))->size() > 0">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_State_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <toolSections name="Modes &amp; States" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.1/@ownedTools[name='initialization.from.existing.diagram']">
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Mode" name="mode" label="%common.mns.mode" precondition="aql:self.canCreateMode(containerView)" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subContainerMappings[name='SM_InnerModeState_Container']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Mode.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Mode" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new State" name="state" label="%common.mns.state" precondition="aql:self.canCreateState(containerView)" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subContainerMappings[name='SM_InnerModeState_Container']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/State.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="State" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" name="state.mode" label="%common.mns.state.mode" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <filters precondition="feature:synchronized" elementsToListen="aql:self">
              <listeners domainClass="DDiagram" featureName="synchronized"/>
            </filters>
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleStates" computationExpression="aql:self.void2Null(elementView.getAllDisplayedStates())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleStateViews" computationExpression="aql:self.void2Null(elementView.getAllDisplayedStateViews())"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectStates" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(elementView.getAvailableStatesAndModesToInsertInStatemachineDiag())"/>
                  <parameters name="resultVariable" value="selectedStates"/>
                  <parameters name="wizardMessage" value="aql:'Select states and modes to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:visibleStates"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedStates = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="ShowHideStates" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.ShowHideStates">
                    <parameters name="view" value="aql:elementView"/>
                    <parameters name="selected states" value="aql:self.void2Null(selectedStates)"/>
                    <parameters name="visible states" value="aql:visibleStates"/>
                    <parameters name="visible state views" value="aql:visibleStateViews"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" name="transitions" label="%common.mns.transitions" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <filters precondition="feature:synchronized" elementsToListen="aql:self">
              <listeners domainClass="DDiagram" featureName="synchronized"/>
            </filters>
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleTransitions" computationExpression="aql:self.void2Null(elementView.getDisplayedTransitions())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleTransitionViews" computationExpression="aql:self.void2Null(elementView.getDisplayedTransitionViews())"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectTransition" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(elementView.getAvailableTransitionsToInsertInSM())"/>
                  <parameters name="resultVariable" value="selectedTransitions"/>
                  <parameters name="wizardMessage" value="aql:'Select transitions to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:visibleTransitions"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedTransitions = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="ShowHideTransitions" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.ShowHideTransitions">
                    <parameters name="view" value="aql:elementView"/>
                    <parameters name="selected transitions" value="aql:self.void2Null(selectedTransitions)"/>
                    <parameters name="visible transitions" value="aql:visibleTransitions"/>
                    <parameters name="visible transition views" value="aql:visibleTransitionViews"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Reuse Mode/State" name="reuse.mode.state" label="%common.mns.reuse.mode.state" precondition="aql:container.eContainer()->filter(capellacommon::StateMachine)->size() = 0" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subContainerMappings[name='SM_InnerModeState_Container']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Insert.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Select state mode" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:containerView"/>
                  <parameters name="scope" value="aql:self.getReferencableStates()"/>
                  <parameters name="resultVariable" value="selectedStates"/>
                  <parameters name="wizardMessage" value="aql:'Select Types to show in ' + container.name + '.'"/>
                  <parameters name="initialSelection" value="aql:container.getInitialSelectionSM"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedStates != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getRegionForInsertion(containerView)">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:selectedStates">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getRegionForInsertion(containerView)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:i"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:i"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.makeDiff(self.eContainerOrSelf(capellacore::ModellingBlock).eAllContents()->filter(modellingcore::IState), selectedStates)" iteratorName="j">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getRegionForInsertion(containerView)">
                        <subModelOperations xsi:type="tool_1:Unset" featureName="involvedStates" elementExpression="aql:j"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                          <subModelOperations xsi:type="tool_1:Unset" featureName="referencedStates" elementExpression="aql:j"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates an Initial Pseudo State" name="initial" label="%common.mns.initial" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/InitialPseudoState.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InitialPseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Join Pseudo State" name="join" label="%common.mns.join" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/JoinPseudoState.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="JoinPseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('Join ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Choice Pseudo State" name="choice" label="%common.mns.choice" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ChoicePseudoState.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ChoicePseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('Choice ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Fork Pseudo State" name="fork" label="%common.mns.fork" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ForkPseudoState.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ForkPseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('Fork ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Termintate Pseudo State" name="terminate" label="%common.mns.terminate" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/TerminatePseudoState.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="TerminatePseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('Terminate ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Final Pseudo State" name="final" label="%common.mns.final" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FinalState.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FinalState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('Final ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Entry Pseudo State" name="entry.point" label="%common.mns.entry.point" precondition="aql:self.canCreateEntryExitPoint(containerView)" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Pseudostate_entryPoint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="EntryPointPseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('EntryPoint ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Exit Pseudo State" name="exit.point" label="%common.mns.exit.point" precondition="aql:self.canCreateEntryExitPoint(containerView)" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Pseudostate_exitPoint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExitPointPseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('ExitPoint ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Deep History Pseudo State" name="deep.history" label="%common.mns.deep.history" precondition="aql:self.canCreateDeepHistory(containerView)" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Pseudostate_deepHistory.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="DeepHistoryPseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('DeepHistory ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Shallow History Pseudo State" name="shallow.history" label="%common.mns.shallow.history" precondition="aql:self.canCreateShallowHistory(containerView)" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Pseudostate_shallowHistory.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ShallowHistoryPseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('ShallowHistory ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Transition between the source and target States or Modes" name="transition" label="%common.mns.transition" precondition="aql:self.canCreateTransition(preSource,preTarget)" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@edgeMappings[name='SM_Transition']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/StateTransition.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getRegionForTransition(sourceView)">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="StateTransition" referenceName="ownedTransitions" variableName="transition">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="triggerDescription" valueExpression=""/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:source"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="aql:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="SM_CreateDiag_ModeStateMachine" label="Mode State Machine Diagram" precondition="aql:self.isInLib()" titleExpression="aql:'[MSM] ' + self.name" browseExpression="aql:self->filter(capellacommon::State).ownedRegions->first()" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.target">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:diagramName"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="SM_CreateDiag_ModesAndStates" label="Modes and States [DEPRECATED]" precondition="aql:self.isInLib()" titleExpression="aql:'[M&amp;S] ' + self.name" browseExpression="aql:self->filter(capellacommon::State).ownedRegions->first()" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.target">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:diagramName"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramNavigationDescription" name="Modes &amp; States" browseExpression="aql:self->filter(capellacommon::State).ownedRegions->first()" navigationNameExpression="" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="NamedElement DirectEdit" forceRefresh="true" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="Transition DirectEdit" forceRefresh="true" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="triggerDescription" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="Delete StateMode">
            <element name="element"/>
            <elementView name="view"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="deleteCapellaElement" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="Reconnect source transition" precondition="aql:self.canCreateTransition(target,element.source)" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="Reconnect target transition" precondition="aql:self.canCreateTransition(element.source,target)">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Constraint From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D ModeState From Project Explorer" precondition="aql:element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subContainerMappings[name='SM_InnerModeState_Container'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']/@borderedNodeMappings[name='ModeState_Activity'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@borderedNodeMappings[name='SM_EntryPoint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@borderedNodeMappings[name='SM_ExitPoint']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D ModeState from Diagram" precondition="aql:element.isValidDndSMModeState(oldContainer,newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subContainerMappings[name='SM_InnerModeState_Container'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndSMModeState(newContainerView)"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Common" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%common.mns.constraint" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%common.mns.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%common.mns.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraint%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20ModeState%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20ModeState%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']" name="Mode State Machine" label="%common.msm" titleExpression="aql:'[MSM] ' + self.name" domainClass="Region">
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaModeller.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/ContextArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/EPBSArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/OperationalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/PhysicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/SharedModel.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.internal.states.filter" label="%common.msm.hide.internal.states.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']" viewConditionExpression="aql:self.eContainer()->filter(diagram::DDiagram)->size() > 0"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.region.names.filter" label="%common.msm.hide.region.names.filter"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.triggerfe.source.filter" label="%common.msm.show.triggerfe.source.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Dummy']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%common.msm.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:self.isDiagramTitleBlock()"/>
      </filters>
      <defaultLayer name="default" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']">
        <nodeMappings name="MSM_ModeState" preconditionExpression="aql:((self.makeUnion(self->filter(capellacommon::FinalState), self->filter(capellacommon::Pseudostate)))->size() > 0) and (((self.makeUnion(self.eContainer().eContainer()->filter(capellacommon::State), self.eContainer().eContainer()->filter(capellacommon::Mode)))->size() = 0) or ((self.makeUnion(self->filter(capellacommon::EntryPointPseudoState), self->filter(capellacommon::ExitPointPseudoState)))->size() = 0))" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="feature:involvedStates" domainClass="IState">
          <style xsi:type="style:BundledImageDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="5">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='blue']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='blue']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:(self.makeUnion(self->filter(capellacommon::ForkPseudoState), self->filter(capellacommon::JoinPseudoState)))->size() > 0 and self.isReferencedState(view.eContainer().target)">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" resizeKind="NSEW" width="1" height="7">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::ChoicePseudoState)->size() > 0 and self.isReferencedState(view.eContainer().target)">
            <style xsi:type="style:LozengeNodeDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ChoicePseudoState_Border_Gray']" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="1" resizeKind="NSEW" widthComputationExpression="5" heightComputationExpression="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ChoicePseudoState_Color']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::InitialPseudoState)->size() > 0 and self.isReferencedState(view.eContainer().target)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/initialState.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::FinalState)->size() > 0 and self.isReferencedState(view.eContainer().target)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/finalState.png.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::TerminatePseudoState)->size() > 0 and self.isReferencedState(view.eContainer().target)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/terminateState.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.makeUnion(self->filter(capellacommon::ForkPseudoState), self->filter(capellacommon::JoinPseudoState)))->size() > 0">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" resizeKind="NSEW" width="1" height="7">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::ChoicePseudoState)->size() > 0">
            <style xsi:type="style:LozengeNodeDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ChoicePseudoState_Border_Gray']" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="1" resizeKind="NSEW" widthComputationExpression="5" heightComputationExpression="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ChoicePseudoState_Color']">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::InitialPseudoState)->size() > 0">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/initialState.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::FinalState)->size() > 0">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/finalState.png.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::TerminatePseudoState)->size() > 0">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="2" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/terminateState.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::DeepHistoryPseudoState)->size() > 0">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Pseudostate_deepHistory.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::ShallowHistoryPseudoState)->size() > 0">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Pseudostate_shallowHistory.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::EntryPointPseudoState)->size() > 0">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" sizeComputationExpression="2" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Pseudostate_entryPoint.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self->filter(capellacommon::ExitPointPseudoState)->size() > 0">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" sizeComputationExpression="2" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Pseudostate_exitPoint.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="MSM_Transition" label="" preconditionExpression="aql:self.mustDisplayTransition(sourceView,targetView)" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" semanticCandidatesExpression="feature:eAllContents" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@borderedNodeMappings[name='MSM_EntryPoint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@borderedNodeMappings[name='MSM_ExitPoint']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@borderedNodeMappings[name='MSM_EntryPoint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@borderedNodeMappings[name='MSM_ExitPoint']" targetFinderExpression="feature:target" sourceFinderExpression="feature:source" domainClass="StateTransition" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='Reconnect%20source%20transition'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='Reconnect%20target%20transition']">
          <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateTransition_Color']" centeredSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@borderedNodeMappings[name='MSM_EntryPoint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@borderedNodeMappings[name='MSM_ExitPoint']" centeredTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@borderedNodeMappings[name='MSM_EntryPoint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@borderedNodeMappings[name='MSM_ExitPoint']">
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getStateTransitionLabel(view)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="MSM_ModeState_Container" detailDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='SM_CreateDiag_ModeStateMachine']" navigationDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='Mode%20State%20Machine']" preconditionExpression="aql:(self.makeUnion(self->filter(capellacommon::Mode), self->filter(capellacommon::State)))->size() > 0 and self->filter(capellacommon::FinalState)->size() = 0" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="feature:involvedStates" domainClass="IState" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20ModeState%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Region%20from%20Diagram']" childrenPresentation="VerticalStack">
          <borderedNodeMappings name="MSM_EntryPoint" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="aql:self.getEntryPoints()" domainClass="EntryPointPseudoState" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20ModeState%20From%20Project%20Explorer']">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.getEntryExitPointLabel(diagram)" labelAlignment="RIGHT" sizeComputationExpression="2" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Pseudostate_entryPoint.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </borderedNodeMappings>
          <borderedNodeMappings name="MSM_ExitPoint" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="aql:self.getExitPoints()" domainClass="ExitPointPseudoState" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20ModeState%20From%20Project%20Explorer']">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.getEntryExitPointLabel(diagram)" labelAlignment="RIGHT" sizeComputationExpression="2" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Pseudostate_exitPoint.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </borderedNodeMappings>
          <subContainerMappings name="MSM_Activities" preconditionExpression="aql:not self.doActivity->isEmpty() or not self.entry->isEmpty() or not self.exit->isEmpty()" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" semanticCandidatesExpression="var:self" synchronizationLock="true" domainClass="IState" childrenPresentation="List">
            <subNodeMappings name="MSM_Entry" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete']" semanticCandidatesExpression="feature:entry" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="AbstractEvent">
              <style xsi:type="style:BundledImageDescription" showIcon="false" labelExpression="aql:' entry / ' + self.getActivityLabel()" labelAlignment="LEFT" labelPosition="node" resizeKind="NSEW">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </subNodeMappings>
            <subNodeMappings name="MSM_DoActivity" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete']" semanticCandidatesExpression="feature:doActivity" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="AbstractEvent">
              <style xsi:type="style:BundledImageDescription" showIcon="false" labelExpression="aql:' do / ' + self.getActivityLabel()" labelAlignment="LEFT" labelPosition="node" resizeKind="NSEW">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </subNodeMappings>
            <subNodeMappings name="MSM_Exit" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete']" semanticCandidatesExpression="feature:exit" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="AbstractEvent">
              <style xsi:type="style:BundledImageDescription" showIcon="false" labelExpression="aql:' exit / ' + self.getActivityLabel()" labelAlignment="LEFT" labelPosition="node" resizeKind="NSEW">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </subNodeMappings>
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_Mode_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_Mode_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
            <conditionnalStyles predicateExpression="aql:(container->filter(capellacommon::Mode))->size() > 0">
              <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_Mode_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_Mode_Gray_min']">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:(container->filter(capellacommon::State))->size() > 0">
              <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" hideLabelByDefault="true" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_State_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_State_Gray_min']">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
          </subContainerMappings>
          <subContainerMappings name="MSM_Region" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20StateMode']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="feature:ownedRegions" synchronizationLock="true" domainClass="Region" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20ModeState%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Region%20from%20Diagram']" reusedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState']" reusedContainerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.getRegionLabel(diagram)" labelAlignment="LEFT" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_Mode_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_Mode_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
            <conditionnalStyles predicateExpression="aql:(container->filter(capellacommon::Mode))->size() > 0">
              <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.getRegionLabel(diagram)" labelAlignment="LEFT" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_Mode_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_Mode_Gray']">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:(container->filter(capellacommon::State))->size() > 0">
              <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.getRegionLabel(diagram)" labelAlignment="LEFT" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_State_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_State_Gray']">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
          </subContainerMappings>
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_Mode_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_Mode_Gray']">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:view.eContainer() != null and (self->filter(capellacommon::Mode))->size() > 0 and self.isReferencedState(view.eContainer().target)">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_Mode_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_Mode_Gray_min']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(capellacommon::Mode))->size() > 0">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_Mode_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_Mode_Gray_min']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql: view.eContainer() != null and (self->filter(capellacommon::State))->size() > 0 and self.isReferencedState(view.eContainer().target)">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_State_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_State_Gray_min']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(capellacommon::State))->size() > 0">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_State_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_MSM_State_Gray_min']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <toolSections name="Modes &amp; States" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.1/@ownedTools[name='initialization.from.existing.diagram']">
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Mode" name="mode" label="%common.msm.mode" precondition="aql:self.canCreateMode(containerView)" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Mode.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Mode" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new State" name="state" label="%common.msm.state" precondition="aql:self.canCreateState(containerView)" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/State.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="State" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Region" name="region" label="%common.msm.region" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@subContainerMappings[name='MSM_Region']" extraMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@subContainerMappings[name='MSM_Region']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(capellacommon::Region)->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveRegionMSM(instance,null)">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(capellacommon::Region)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer()">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveRegionMSM(instance,container)"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" name="state.mode" label="%common.msm.state.mode" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <filters precondition="feature:synchronized" elementsToListen="aql:self">
              <listeners domainClass="DDiagram" featureName="synchronized"/>
            </filters>
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleStates" computationExpression="aql:self.void2Null(elementView.getAllDisplayedStates())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleStateViews" computationExpression="aql:self.void2Null(elementView.getAllDisplayedStateViews())"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectStates" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(elementView.getAvailableStatesAndModesToInsertInStatemachineDiag())"/>
                  <parameters name="resultVariable" value="selectedStates"/>
                  <parameters name="wizardMessage" value="aql:'Select states and modes to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:visibleStates"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedStates = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="ShowHideMSMStates" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.ShowHideMSMStates">
                    <parameters name="view" value="aql:elementView"/>
                    <parameters name="selected states" value="aql:self.void2Null(selectedStates)"/>
                    <parameters name="visible states" value="aql:visibleStates"/>
                    <parameters name="visible state views" value="aql:visibleStateViews"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" name="transitions" label="%common.msm.transitions" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <filters precondition="feature:synchronized" elementsToListen="aql:self">
              <listeners domainClass="DDiagram" featureName="synchronized"/>
            </filters>
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleTransitions" computationExpression="aql:self.void2Null(elementView.getDisplayedTransitions())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleTransitionViews" computationExpression="aql:self.void2Null(elementView.getDisplayedTransitionViews())"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectTransition" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(elementView.getAvailableTransitionsToInsertInSM())"/>
                  <parameters name="resultVariable" value="selectedTransitions"/>
                  <parameters name="wizardMessage" value="aql:'Select transitions to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:visibleTransitions"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedTransitions = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="ShowHideMSMTransitions" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.ShowHideMSMTransitions">
                    <parameters name="view" value="aql:elementView"/>
                    <parameters name="selected transitions" value="aql:self.void2Null(selectedTransitions)"/>
                    <parameters name="visible transitions" value="aql:visibleTransitions"/>
                    <parameters name="visible transition views" value="aql:visibleTransitionViews"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates an Initial Pseudo State" name="initial" label="%common.msm.initial" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/InitialPseudoState.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InitialPseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Join Pseudo State" name="join" label="%common.msm.join" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/JoinPseudoState.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="JoinPseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('Join ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Choice Pseudo State" name="choice" label="%common.msm.choice" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ChoicePseudoState.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ChoicePseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('Choice ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Fork Pseudo State" name="fork" label="%common.msm.fork" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ForkPseudoState.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ForkPseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('Fork ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Termintate Pseudo State" name="terminate" label="%common.msm.terminate" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/TerminatePseudoState.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="TerminatePseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('Terminate ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Final Pseudo State" name="final" label="%common.msm.final" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FinalState.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FinalState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('Final ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Entry Pseudo State" name="entry.point" label="%common.msm.entry.point" precondition="aql:self.canCreateEntryExitPoint(containerView)" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Pseudostate_entryPoint.gif">
            <filters precondition="aql:true"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="EntryPointPseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('EntryPoint ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Exit Pseudo State" name="exit.point" label="%common.msm.exit.point" precondition="aql:self.canCreateEntryExitPoint(containerView)" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Pseudostate_exitPoint.gif">
            <filters precondition="aql:true"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExitPointPseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('ExitPoint ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Deep History Pseudo State" name="deep.history" label="%common.msm.deep.history" precondition="aql:self.canCreateDeepHistory(containerView)" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Pseudostate_deepHistory.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="DeepHistoryPseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('DeepHistory ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a Shallow History Pseudo State" name="shallow.history" label="%common.msm.shallow.history" precondition="aql:self.canCreateShallowHistory(containerView)" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Pseudostate_shallowHistory.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(modellingcore::IState)->size() > 0 and self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ownedRegions->at(1)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ShallowHistoryPseudoState" referenceName="ownedStates">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.getUniqueName('ShallowHistory ')"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.eContainerOrSelf(capellacommon::Region)">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involvedStates" valueExpression="aql:instance"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(modellingcore::IState)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedStates" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Transition between the source and target States or Modes" name="transition" label="%common.msm.transition" precondition="aql:self.canCreateTransitionMSM(preSource,preTarget)" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@edgeMappings[name='MSM_Transition']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/StateTransition.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getRegionForTransitionMSM(sourceView)">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="StateTransition" referenceName="ownedTransitions" variableName="transition">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="triggerDescription" valueExpression=""/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacommon::Region)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:transition">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:source.eContainer()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacommon::Region)->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:transition">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:source"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(capellacommon::Region)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:transition">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="aql:target.eContainer()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(capellacommon::Region)->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:transition">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="SM_CreateDiag_ModeStateMachine" label="Mode State Machine Diagram" precondition="aql:self.isInLib()" titleExpression="aql:'[MSM] ' + self.name" browseExpression="aql:self->filter(capellacommon::State).ownedRegions->first()" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.target">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedRegions->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Region" referenceName="ownedRegions">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:diagramName"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramNavigationDescription" name="Mode State Machine" browseExpression="aql:self->filter(capellacommon::State).ownedRegions->first()" navigationNameExpression="" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="NamedElement DirectEdit" forceRefresh="true" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="Transition DirectEdit" forceRefresh="true" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="triggerDescription" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="Delete StateMode">
            <element name="element"/>
            <elementView name="view"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="deleteCapellaElement" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="no delete">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="NoDeleteElement" id="org.polarsys.capella.core.sirius.analysis.delete.NoDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="Reconnect source transition" precondition="aql:self.canCreateTransitionMSM(target,element.source)" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(capellacommon::Region)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:target.eContainer()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(capellacommon::Region)->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="Reconnect target transition" precondition="aql:self.canCreateTransitionMSM(element.source,target)">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(capellacommon::Region)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="aql:target.eContainer()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(capellacommon::Region)->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Constraint From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D ModeState From Project Explorer" precondition="aql:element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@borderedNodeMappings[name='MSM_EntryPoint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@borderedNodeMappings[name='MSM_ExitPoint']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D ModeState from Diagram" precondition="aql:element.isValidDndSMModeState(oldContainer,newViewContainer) and not (element.isReferencedState(oldContainer))" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndSMModeState(newContainerView)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Region from Diagram" precondition="aql:true" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@subContainerMappings[name='MSM_Region']">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndRegion(newContainerView)"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Common" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%common.msm.constraint" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%common.msm.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%common.msm.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <customization>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization" predicateExpression="aql:container.ownedRegions->first() != view.target">
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@subContainerMappings[name='MSM_Region']/@conditionnalStyles.0/@style //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@subContainerMappings[name='MSM_Region']/@conditionnalStyles.1/@style //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@subContainerMappings[name='MSM_Region']/@style" attributeName="borderLineStyle" value="dash"/>
          </vsmElementCustomizations>
        </customization>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Class%20Into%20DataPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='AbstractExchangeItem%20Into%20AbstractExchangeItemPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Class%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20DataType%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DataType%20Into%20DataPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='D%26D%20Interface%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='Interface%20Into%20InterfacePkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Enumeration%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Collection%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Collection%20Into%20DataPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DataPkg%20Into%20DataPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='InterfacePkg%20Into%20InterfacePkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20BooleanType%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20DataPkg%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='D%26D%20InterfacePkg%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='D%26D%20ExchangeItem%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20DataValue%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DataValue%20Into%20DataPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Unit%20from%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Unit%20Into%20DataPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraint%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']" name="Class Diagram Blank" label="%common.cdb" titleExpression="aql:'[CDB] ' + self.name" domainClass="DataPkg" defaultConcern="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@concerns/@ownedConcernDescriptions.0">
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaModeller.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/ContextArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/EPBSArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/OperationalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/PhysicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/SharedModel.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.properties.filter" label="%common.cdb.hide.properties.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_Property']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.operations.filter" label="%common.cdb.hide.operations.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_Operation'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.associations.filter" label="%common.cdb.hide.associations.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.generalizations.filter" label="%common.cdb.hide.generalizations.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Generalization']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.exchange.items.details.in.interfaces.filter" label="%common.cdb.hide.exchange.items.details.in.interfaces.filter">
        <filters xsi:type="filter:MappingFilter"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.association.labels.filter" label="%common.cdb.hide.association.labels.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Dummy']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.role.labels.filter" label="%common.cdb.hide.role.labels.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Dummy']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.role.names.filter" label="%common.cdb.hide.role.names.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Dummy']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.full.path.filter" label="%common.cdb.show.full.path.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Dummy']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" documentation="Hide Association if its ends are derived properties" name="hide.derived.properties.filter" label="%common.cdb.hide.derived.properties.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_Property']" semanticConditionExpression="aql:not (self.isPropertyDerived())"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.technical.interfaces.filter" label="%common.cdb.hide.technical.interfaces.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']" semanticConditionExpression="aql:self.structural"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.modifiers.filter" label="%common.cdb.show.modifiers.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Dummy']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%common.cdb.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:self.isDiagramTitleBlock()"/>
      </filters>
      <concerns>
        <ownedConcernDescriptions name="default" filters="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@filters[name='hide.association.labels.filter'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@filters[name='hide.technical.interfaces.filter']"/>
      </concerns>
      <defaultLayer name="Data Model">
        <nodeMappings name="DT_Contraint" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Constraint%20Content']" semanticCandidatesExpression="" createElements="false" domainClass="Constraint">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getConstraintLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_yellow']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="DT_DataValue" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" createElements="false" domainClass="DataValue">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_Border_Gray']" labelExpression="aql:self.getDatavalueLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Value_LightBrown']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="service:isAbstract()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_Border_Gray']" labelExpression="aql:self.getDatavalueLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Value_LightBrown']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings name="DT_Unit" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" createElements="false" domainClass="Unit">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_Border_Gray']" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unit_LightBrown']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="DT_PV" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" createElements="false" domainClass="AbstractPropertyValue">
          <style xsi:type="style:SquareDescription" labelExpression="service:computePVLabel" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
          </style>
        </nodeMappings>
        <edgeMappings name="DT_Generalization" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" semanticCandidatesExpression="service:diagram.getCDBGeneralizationSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Collection'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Collection'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem']" targetFinderExpression="feature:super" sourceFinderExpression="feature:eContainer" domainClass="Generalization" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='CB%20Reconnect%20Generalization%20Source'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='CB%20Reconnect%20Generalization%20Target']">
          <style targetArrow="InputClosedArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="DT_Association" preconditionExpression="aql:self.getAssociationProperties()->size() = 2 and not (self.hasNonPrimitiveEnds())" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="service:diagram.getCDBAssociationSemanticCandidates" semanticElements="aql:self.makeUnion(self, self.ownedMembers, self.navigableMembers)" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Collection']" targetFinderExpression="aql:self.getAssociationTarget().abstractType" sourceFinderExpression="aql:self.getAssociationSource().abstractType" domainClass="Association" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='CB%20Reconnect%20Association%20Source'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='CB%20Reconnect%20Association%20Target']">
          <style targetArrow="NoDecoration">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </beginLabelStyleDescription>
            <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
            <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </endLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::ASSOCIATION) and (not (self.navigableMembers->includes(self.getAssociationSource()))) and (self.navigableMembers->includes(self.getAssociationTarget()))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.navigableMembers->includes(self.getAssociationSource())) and (not (self.navigableMembers->includes(self.getAssociationTarget())))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.navigableMembers->size() = 2)">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="InputArrow">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::AGGREGATION) and (self.navigableMembers->size() = 0)">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" targetArrow="Diamond">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::AGGREGATION) and (not (self.navigableMembers->includes(self.getAssociationSource()))) and (self.navigableMembers->includes(self.getAssociationTarget()))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" targetArrow="InputArrowWithDiamond">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::AGGREGATION) and (self.navigableMembers->includes(self.getAssociationSource())) and (not (self.navigableMembers->includes(self.getAssociationTarget())))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="InputArrowWithDiamond" targetArrow="NoDecoration">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::AGGREGATION) and (self.navigableMembers->size() = 2)">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="InputArrow" targetArrow="InputArrowWithDiamond">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::COMPOSITION) and (self.navigableMembers->size() = 0)">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" targetArrow="Diamond">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::COMPOSITION) and (not (self.navigableMembers->includes(self.getAssociationSource()))) and (self.navigableMembers->includes(self.getAssociationTarget()))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" targetArrow="InputArrowWithFillDiamond">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::COMPOSITION) and (self.navigableMembers->includes(self.getAssociationSource())) and (not (self.navigableMembers->includes(self.getAssociationTarget())))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="InputArrowWithDiamond" targetArrow="FillDiamond">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::COMPOSITION) and (self.navigableMembers->size() = 2)">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="InputArrow" targetArrow="InputArrowWithFillDiamond">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::AGGREGATION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.navigableMembers->size() = 0)">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="Diamond" targetArrow="NoDecoration">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::AGGREGATION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::ASSOCIATION) and (not (self.navigableMembers->includes(self.getAssociationSource()))) and (self.navigableMembers->includes(self.getAssociationTarget()))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="Diamond">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::AGGREGATION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.navigableMembers->includes(self.getAssociationSource())) and (not (self.navigableMembers->includes(self.getAssociationTarget())))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="InputArrowWithDiamond" targetArrow="NoDecoration">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::AGGREGATION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.navigableMembers->size() = 2)">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="InputArrowWithDiamond">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::COMPOSITION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.navigableMembers->size() = 0)">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="FillDiamond" targetArrow="NoDecoration">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::COMPOSITION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::ASSOCIATION) and (not (self.navigableMembers->includes(self.getAssociationSource()))) and (self.navigableMembers->includes(self.getAssociationTarget()))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="FillDiamond">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::COMPOSITION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.navigableMembers->includes(self.getAssociationSource())) and (not (self.navigableMembers->includes(self.getAssociationTarget())))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="InputArrowWithFillDiamond" targetArrow="NoDecoration">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::COMPOSITION) and (self.getAssociationSource().aggregationKind = information::AggregationKind::ASSOCIATION) and (self.navigableMembers->size() = 2)">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="InputArrowWithFillDiamond">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::UNSET) and (self.getAssociationSource().aggregationKind != information::AggregationKind::UNSET) and (not (self.navigableMembers->includes(self.getAssociationSource()))) and (self.navigableMembers->includes(self.getAssociationTarget()))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::UNSET) and (self.getAssociationSource().aggregationKind != information::AggregationKind::UNSET) and (self.navigableMembers->includes(self.getAssociationSource())) and (not (self.navigableMembers->includes(self.getAssociationTarget())))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="InputArrow" targetArrow="NoDecoration">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::UNSET) and (self.getAssociationSource().aggregationKind != information::AggregationKind::UNSET) and (self.navigableMembers->size() = 2)">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="InputArrow">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind != information::AggregationKind::UNSET) and (self.getAssociationSource().aggregationKind = information::AggregationKind::UNSET) and (self.navigableMembers->includes(self.getAssociationSource())) and (not (self.navigableMembers->includes(self.getAssociationTarget())))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="InputArrow" targetArrow="NoDecoration">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind != information::AggregationKind::UNSET) and (self.getAssociationSource().aggregationKind = information::AggregationKind::UNSET) and (not (self.navigableMembers->includes(self.getAssociationSource()))) and (self.navigableMembers->includes(self.getAssociationTarget()))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind != information::AggregationKind::UNSET) and (self.getAssociationSource().aggregationKind = information::AggregationKind::UNSET) and (self.navigableMembers->size() = 2)">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="InputArrow">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::UNSET) and (self.getAssociationSource().aggregationKind = information::AggregationKind::UNSET) and (not (self.navigableMembers->includes(self.getAssociationSource()))) and (self.navigableMembers->includes(self.getAssociationTarget()))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::UNSET) and (self.getAssociationSource().aggregationKind = information::AggregationKind::UNSET) and (self.navigableMembers->includes(self.getAssociationSource())) and (not (self.navigableMembers->includes(self.getAssociationTarget())))">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="InputArrow" targetArrow="NoDecoration">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.getAssociationTarget().aggregationKind = information::AggregationKind::UNSET) and (self.getAssociationSource().aggregationKind = information::AggregationKind::UNSET) and (self.navigableMembers->size() = 2)">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Association_Color']" sourceArrow="InputArrow">
              <beginLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationBeginRoleLabel(self,self.getAssociationSource(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </beginLabelStyleDescription>
              <centerLabelStyleDescription labelExpression="aql:self.getAssociationCenterLabel(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
              <endLabelStyleDescription showIcon="false" labelExpression="aql:self.getAssociationEndRoleLabel(self,self.getAssociationTarget(),view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </endLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <edgeMappings name="DT_CollectionType" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" semanticCandidatesExpression="" semanticElements="aql:self" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Collection']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Collection'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']" targetFinderExpression="feature:type" sourceFinderExpression="" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='CB%20Reconnect%20Collection%20Type']">
          <style lineStyle="dash">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.multiplicityToString()">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="aql:self.aggregationKind = information::AggregationKind::AGGREGATION">
            <style lineStyle="dash" sourceArrow="Diamond">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.multiplicityToString()">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.aggregationKind = information::AggregationKind::COMPOSITION">
            <style lineStyle="dash" sourceArrow="FillDiamond">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.multiplicityToString()">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <edgeMappings name="DT_ContrainedElements" preconditionExpression="aql:self.isValidConstrainedElementsEdge(sourceView,targetView)" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Delete%20Constraint%20Elements']" semanticCandidatesExpression="feature:eAllContents" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" targetFinderExpression="aql:self.targeFinderExpressionForConstraint()" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='CB%20Reconnect%20Constraint%20Elements']">
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Collection']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='DT_EnumerationLiteral']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_Property']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_Operation']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='DT_BooleanLiteral']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']/@borderedNodeMappings[name='CCDI_Port']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']/@borderedNodeMappings[name='CCEI_Port']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@containerMappings[name='ID_Interface']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@nodeMappings[name='CCRI%20CapabilityRealization']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Breakdown']/@defaultLayer/@nodeMappings[name='OAB_OperationalActivity']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@containerMappings[name='OAIB%20Operational%20Activity']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subContainerMappings[name='OAB_subRoles']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']/@subNodeMappings[name='ORB_OAAllocation']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='Configuration%20Items%20Breakdown']/@defaultLayer/@nodeMappings[name='CIBD_ConfigurationItem']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='EPBS%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='CI%20container%20mapping']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='EPBS%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='CI%20container%20mapping']/@subNodeMappings[name='PhysicalComponentInCI%20mapping']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@nodeMappings[name='ActorNode3']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@nodeMappings[name='Capability3']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@nodeMappings[name='MissionNode3']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@nodeMappings[name='ActorNode']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@nodeMappings[name='CapNode']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@nodeMappings[name='MissionNode']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20System%20Actors']/@defaultLayer/@nodeMappings[name='SC_System']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@nodeMappings[name='ActorNode2']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@nodeMappings[name='CapNode2']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@nodeMappings[name='MissionNode2']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='ActorNode4']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='CapabilityNode4']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='MissionNode4']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='CA%20Dummy']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@borderedNodeMappings[name='CA%20Component%20Port']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@subNodeMappings[name='CA%20System%20Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@subNodeMappings[name='CA%20System%20Function']/@borderedNodeMappings[name='CA_OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@subNodeMappings[name='CA%20System%20Function']/@borderedNodeMappings[name='CA_InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@subNodeMappings[name='CA%20System%20Function']/@borderedNodeMappings[name='CA%20Flow%20Port%20on%20System%20Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@subNodeMappings[name='CA%20System%20Node']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20System']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='SDFB_Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='SDFB_Function']/@borderedNodeMappings[name='SDFB_InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='SDFB_Function']/@borderedNodeMappings[name='SDFB_OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='SDFB_Function']/@borderedNodeMappings[name='SDFB_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='SDFB_Node']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='SFB_SystemFunction']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@nodeMappings[name='CRI_Actors']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@nodeMappings[name='CRI_Capability']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@nodeMappings[name='CRI_CapabilityRealization']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@nodeMappings[name='CRI_CapabilityRealization_1']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@containerMappings[name='CRI_SystemComponent_top']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@containerMappings[name='CRI_SystemComponent_top']/@subNodeMappings[name='CRI_CapabilityRealization_int']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@containerMappings[name='CRI_SystemComponent_top']/@subContainerMappings[name='CRI_System_Component']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@containerMappings[name='CRI_SystemComponent_top']/@subContainerMappings[name='CRI_System_Component']/@subNodeMappings[name='CRI_CapabilityRealization_int_int']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='LAB_Dummy']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@borderedNodeMappings[name='LAB%20ComponentPort']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@subNodeMappings[name='LAB%20Logical%20Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@subNodeMappings[name='LAB%20Logical%20Function']/@borderedNodeMappings[name='LAB%20Flow%20Port%20on%20Logical%20Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@subNodeMappings[name='LAB%20Logical%20Function']/@borderedNodeMappings[name='LAB%20InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@subNodeMappings[name='LAB%20Logical%20Function']/@borderedNodeMappings[name='LAB%20OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Component%20Breakdown']/@defaultLayer/@nodeMappings[name='LCB_LogicalComponent']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='LDFB_Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='LDFB_Function']/@borderedNodeMappings[name='LDFB_InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='LDFB_Function']/@borderedNodeMappings[name='LDFB_OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='LDFB_Function']/@borderedNodeMappings[name='LDFB_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='LDFB_Node']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='LFB_LogicalFunction']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_ControlFunction']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_Dummy']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB%20InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB%20OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@nodeMappings[name='PCB_PhysicalComponent']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='PDFB_Node']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@nodeMappings[name='OEB_OperationalEntities']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@edgeMappings[name='SM_Transition']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_CollectionType']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@edgeMappings[name='DT_ExchangeItemElement']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataPkg']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_CommunicationLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_PinProvidedInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_PinRequiredInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='imp1']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='use1']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CA_Actor_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CA_imp2']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CA_use2']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_CommunicationLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_EIAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_FilteredLabel']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_PinProvidedInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_PinRequiredInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_CommunicationLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_Connection']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_EIAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_FilteredLabel']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_ImplementInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinProvidedInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinRequiredInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PortAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_UseInterface']"/>
          <targetMapping xsi:type="description_2:BasicMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20DF']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_CommunicationLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_Connection']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_FilteredLabel']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_FilteredLabel_DiagramBased']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_ImplementInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PinProvidedInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PinRequiredInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PortAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_UseInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Package%20Dependencies']/@defaultLayer/@edgeMappings[name='PD_PkgDependency']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_ActorRealizations']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_capaToCaparea']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Involvment']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Involvment_int']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Involvment_intint']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Involvment_inttotop']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_participation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_participation_by_realizations']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Refine']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Refine_intinttoint']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Refine_intinttointint']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Refine_inttoext']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Refine_to_internals']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB_ComponentExchangeByDelegation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB%20DataFlow%20between%20Function']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB%20DataFlow%20between%20Logical%20Components']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB%20DataFlow%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB%20PortAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB%20PortRealization%20FlowPort%20to%20ComponentPort']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Component%20Breakdown']/@defaultLayer/@edgeMappings[name='LCB_LogicalComponent_Part']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='LDFB_Exchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='LDFB_Exchange%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@edgeMappings[name='OAIB%20Interaction']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@edgeMappings[name='OAB_CommunicationMean']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@edgeMappings[name='OAB%20Interaction']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_CommunicationMeans']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_EntityOperationalCapabilityInvolvement']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@edgeMappings[name='ORB%20Interaction']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_ComponentExchangeByDelegation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_Exchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_FunctionExchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_FunctionExchange%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_InternPhysicalPathLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_PhysicalLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB%20PortAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB%20PortRealization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@edgeMappings[name='PCB_PhysicalComponent_Part']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='PDFB_Exchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='PDFB_Exchange%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@nodeMappings[name='PPD_Part']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@edgeMappings[name='PPD_PhysicalLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='AbsCapExtends3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='AbsCapInclude3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='ActCapInv3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='actorGeneralization1']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='CapExploitation3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='Generalization3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@edgeMappings[name='ActMissInv']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@edgeMappings[name='actorGeneralization4']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@edgeMappings[name='CapExploitation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20System%20Actors']/@defaultLayer/@edgeMappings[name='actorGeneralization5']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20System%20Actors']/@defaultLayer/@edgeMappings[name='SC_System_Actor']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@edgeMappings[name='ActMissInv2']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@edgeMappings[name='actorGeneralization3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@edgeMappings[name='CapExploitation2']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='AbsCapExtends4int']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='AbsCapInclude4int']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='ActCapInv4']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='ActMissInv3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='actorGeneralization2']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='CapExploitation4']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='Generalization4int']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='CA%20Data%20Flow%20Between%20Actors%20and%20System']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='CA%20DataFlow%20between%20Function']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='CA%20DataFlow%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='CA%20PortRealization%20FunctionPort%20to%20ComponentPort']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='SDFB_Exchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='SDFB_Exchange%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Actor%20Generalization']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@nodeMappings[name='CRB%20CapabilityRealization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Cap%20Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Cap%20Realization%20Extends']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Cap%20Realization%20Include']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Involvement']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_AbstractFunction']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subContainerMappings[name='SM_InnerModeState_Container']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']/@borderedNodeMappings[name='ModeState_Activity']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='SDFB_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='OAB_OperationalProcessEnd']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='PDFB_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='LDFB_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@nodeMappings[name='OAIB_OperationalProcessEnd']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='LAB_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='CA_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@containerMappings[name='DT_InterfacePkg']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalPathEnd']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@containerMappings[name='COC_OperationalEntities']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='COC_OperationalCapabilities']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@containerMappings[name='COC2_Entities']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_EntityCapabilityInvolvement']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_OC_Extends']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_OC_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_OC_Include']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@nodeMappings[name='COC2_OperationalCapabilities']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_OC_Extends']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_OC_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_OC_Include']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@nodeMappings[name='PPD_PhysicalPath']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_FunctionalChain']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@edgeMappings[name='MSM_Transition']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@nodeMappings[name='CCRI%20Component']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@edgeMappings[name='CCRI%20involvement']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@containerMappings[name='FC_FunctionalChainReference']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@containerMappings[name='FC_FunctionalChainReference']/@subContainerMappings[name='FC_FunctionalChainStacked']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@edgeMappings[name='OAB_FC_SequenceLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='SAB_FC_SequenceLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB_FC_SequenceLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_FC_SequenceLink']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink']"/>
          <style lineStyle="dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="DT_PVconnector" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']" targetFinderExpression="service:computeValuedElements">
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Actor%20Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Cap%20Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Cap%20Realization%20Extends']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Cap%20Realization%20Include']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@nodeMappings[name='CRB%20CapabilityRealization']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Involvement']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@edgeMappings[name='DT_ExchangeItemElement']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@containerMappings[name='DT_InterfacePkg']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='BooleanTypeContents']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='DT_BooleanLiteral']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_Operation']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_Property']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_SubDataValue']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Collection']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Collection']/@subNodeMappings[name='DT_SubDataValue']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_CollectionType']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataPkg']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']/@subNodeMappings[name='Contents']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Dummy']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='DT_EnumerationLiteral']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='EnumerationContents']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Generalization']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Unit']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@nodeMappings[name='CCRI%20CapabilityRealization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_CommunicationLink']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']/@subNodeMappings[name='CCDI_ExchangeItemElement']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_PinProvidedInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_PinRequiredInterface']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Attribute1']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='imp1']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']/@borderedNodeMappings[name='CCDI_Port']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='use1']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CA_Actor_Generalization']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']/@borderedNodeMappings[name='CCEI_Port']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CA_imp2']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CA_use2']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_CommunicationLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_EIAllocation']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']/@borderedNodeMappings[name='CCEI_ExchangeItem']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_FilteredLabel']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_CommunicationLink']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_Connection']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_EIAllocation']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_ExchangeItem']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_ImplementInterface']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PortAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_UseInterface']"/>
          <targetMapping xsi:type="description_2:BasicMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20DF']"/>
          <targetMapping xsi:type="description_2:CombinedFragmentMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentDF']"/>
          <targetMapping xsi:type="description_2:OperandMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentDF']/@subContainerMappings[name='OperandDF']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='ConstraintDuration%20DF']"/>
          <targetMapping xsi:type="description_2:CreationMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20DF']"/>
          <targetMapping xsi:type="description_2:DestructionMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20DF']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']/@borderedNodeMappings[name='hideSequenceLabelDF']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']"/>
          <targetMapping xsi:type="description_2:ExecutionMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']"/>
          <targetMapping xsi:type="description_2:StateMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']/@borderedNodeMappings[name='InteractionStateFunction']"/>
          <targetMapping xsi:type="description_2:InteractionUseMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUseDF']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='LostFoundEnd%20DF']"/>
          <targetMapping xsi:type="description_2:ObservationPointMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='ObservationPoint%20DF']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='postconditionMappingDF']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='preconditionMappingDF']"/>
          <targetMapping xsi:type="description_2:ReturnMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20DF']"/>
          <targetMapping xsi:type="description_2:BasicMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Timer%20message%20mapping%20DF']"/>
          <targetMapping xsi:type="description_2:BasicMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS']"/>
          <targetMapping xsi:type="description_2:CombinedFragmentMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentFS']"/>
          <targetMapping xsi:type="description_2:OperandMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentFS']/@subContainerMappings[name='OperandFS']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='ConstraintDuration%20FS']"/>
          <targetMapping xsi:type="description_2:CreationMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20FS']"/>
          <targetMapping xsi:type="description_2:DestructionMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20FS']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabel%20FS']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']"/>
          <targetMapping xsi:type="description_2:ExecutionMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']"/>
          <targetMapping xsi:type="description_2:StateMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']/@borderedNodeMappings[name='InteractionState%20Mapping%20FS']"/>
          <targetMapping xsi:type="description_2:InteractionUseMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUseFS']"/>
          <targetMapping xsi:type="description_2:ObservationPointMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='ObservationPoint%20FS']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='postconditionMappingFS']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='preconditionMappingFS']"/>
          <targetMapping xsi:type="description_2:ReturnMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20FS']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_AbstractFunction']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_FunctionalChain']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@containerMappings[name='ID_Interface']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@containerMappings[name='ID_Interface']/@subNodeMappings[name='ID_Attribute']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@containerMappings[name='ID_Interface']/@subNodeMappings[name='ID_Operation']"/>
          <targetMapping xsi:type="description_2:BasicMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping']"/>
          <targetMapping xsi:type="description_2:CombinedFragmentMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragment']"/>
          <targetMapping xsi:type="description_2:OperandMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragment']/@subContainerMappings[name='Operand']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='ConstraintDuration']"/>
          <targetMapping xsi:type="description_2:CreationMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping']"/>
          <targetMapping xsi:type="description_2:DestructionMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabel']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']"/>
          <targetMapping xsi:type="description_2:ExecutionMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']"/>
          <targetMapping xsi:type="description_2:StateMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']/@borderedNodeMappings[name='InteractionState%20Mapping']"/>
          <targetMapping xsi:type="description_2:InteractionUseMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUse']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='LostFoundEnd']"/>
          <targetMapping xsi:type="description_2:ObservationPointMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='ObservationPoint']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='postconditionMapping']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='preconditionMapping']"/>
          <targetMapping xsi:type="description_2:ReturnMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint']"/>
          <targetMapping xsi:type="description_2:BasicMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Timer%20message%20mapping']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_CommunicationLink']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_Connection']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']/@subNodeMappings[name='IDB_ExchangeItemElement']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_ImplementInterface']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']/@subNodeMappings[name='IDB_Attribute']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']/@subNodeMappings[name='IDB_Operation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PortAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_UseInterface']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@subContainerMappings[name='MSM_Activities']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@subContainerMappings[name='MSM_Activities']/@subNodeMappings[name='MSM_DoActivity']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@subContainerMappings[name='MSM_Activities']/@subNodeMappings[name='MSM_Entry']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@subContainerMappings[name='MSM_Activities']/@subNodeMappings[name='MSM_Exit']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@borderedNodeMappings[name='MSM_EntryPoint']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@borderedNodeMappings[name='MSM_ExitPoint']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']/@subContainerMappings[name='MSM_Region']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@edgeMappings[name='MSM_Transition']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']/@borderedNodeMappings[name='ModeState_Entry']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']/@borderedNodeMappings[name='ModeState_Exit']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']/@borderedNodeMappings[name='ModeState_Activity']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@borderedNodeMappings[name='SM_EntryPoint']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@borderedNodeMappings[name='SM_ExitPoint']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subContainerMappings[name='SM_InnerModeState_Container']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@edgeMappings[name='SM_Transition']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='Configuration%20Items%20Breakdown']/@defaultLayer/@nodeMappings[name='CIBD_ConfigurationItem']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='EPBS%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='CI%20container%20mapping']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='EPBS%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='CI%20container%20mapping']/@subNodeMappings[name='PhysicalComponentInCI%20mapping']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='EPBS%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='CI%20container%20mapping']/@subNodeMappings[name='PhysicalLinkInCI%20mapping']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='EPBS%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='CI%20container%20mapping']/@subNodeMappings[name='PhysicalPortInCI%20mapping']"/>
          <targetMapping xsi:type="description_2:BasicMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20AIS']"/>
          <targetMapping xsi:type="description_2:CombinedFragmentMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentAIS']"/>
          <targetMapping xsi:type="description_2:OperandMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentAIS']/@subContainerMappings[name='OperandAIS']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='ConstraintDuration%20AIS']"/>
          <targetMapping xsi:type="description_2:CreationMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20AIS']"/>
          <targetMapping xsi:type="description_2:DestructionMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20AIS']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabel%20AIS']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']"/>
          <targetMapping xsi:type="description_2:ExecutionMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']"/>
          <targetMapping xsi:type="description_2:StateMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']/@borderedNodeMappings[name='InteractionState%20Mapping%20AIS']"/>
          <targetMapping xsi:type="description_2:InteractionUseMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUse%20AIS']"/>
          <targetMapping xsi:type="description_2:ObservationPointMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='ObservationPoint%20AIS']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='postconditionMapping']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='preconditionMapping']"/>
          <targetMapping xsi:type="description_2:ReturnMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20AIS']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@containerMappings[name='COC2_Entities']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_EntityCapabilityInvolvement']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_OC_Extends']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_OC_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_OC_Include']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@nodeMappings[name='COC2_OperationalCapabilities']"/>
          <targetMapping xsi:type="description_2:BasicMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20OA']"/>
          <targetMapping xsi:type="description_2:CombinedFragmentMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentOA']"/>
          <targetMapping xsi:type="description_2:OperandMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentOA']/@subContainerMappings[name='OperandOA']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='ConstraintDurationOA']"/>
          <targetMapping xsi:type="description_2:CreationMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20OA']"/>
          <targetMapping xsi:type="description_2:DestructionMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20OA']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelOA']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']"/>
          <targetMapping xsi:type="description_2:ExecutionMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']"/>
          <targetMapping xsi:type="description_2:StateMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']/@borderedNodeMappings[name='InteractionState%20Mapping%20OA']"/>
          <targetMapping xsi:type="description_2:InteractionUseMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUse%20OA']"/>
          <targetMapping xsi:type="description_2:ObservationPointMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='ObservationPointOA']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='postconditionMapping']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='preconditionMapping']"/>
          <targetMapping xsi:type="description_2:ReturnMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20OA']"/>
          <targetMapping xsi:type="description_2:BasicMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Timer%20message%20mapping%20OA']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Breakdown']/@defaultLayer/@nodeMappings[name='OAB_OperationalActivity']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@edgeMappings[name='OAIB%20Interaction']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@containerMappings[name='OAIB%20Operational%20Activity']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@nodeMappings[name='OAIB_Dummy']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@nodeMappings[name='OAIB_OperationalProcessEnd']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@edgeMappings[name='OAB%20Interaction']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@edgeMappings[name='OAB_CommunicationMean']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='OAB_Dummy']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subContainerMappings[name='OAB_subRoles']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='OAB_OperationalProcessEnd']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_CommunicationMeans']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_EntityOperationalCapabilityInvolvement']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_OC_Extends']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_OC_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_OC_Include']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='COC_OperationalCapabilities']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@containerMappings[name='COC_OperationalEntities']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@edgeMappings[name='containedIn%20Mapping']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@nodeMappings[name='OEB_OperationalEntities']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@edgeMappings[name='ORB%20Interaction']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']/@subNodeMappings[name='ORB_OAAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_ActorRealizations']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@nodeMappings[name='CRI_Actors']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@nodeMappings[name='CRI_Capability']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@nodeMappings[name='CRI_CapabilityRealization']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@nodeMappings[name='CRI_CapabilityRealization_1']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_capaToCaparea']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Involvment']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Involvment_int']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Involvment_intint']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Involvment_inttotop']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_participation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_participation_by_realizations']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Refine']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Refine_intinttoint']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Refine_intinttointint']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Refine_inttoext']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Refine_to_internals']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@containerMappings[name='CRI_SystemComponent_top']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@containerMappings[name='CRI_SystemComponent_top']/@subNodeMappings[name='CRI_CapabilityRealization_int']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@containerMappings[name='CRI_SystemComponent_top']/@subContainerMappings[name='CRI_System_Component']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@containerMappings[name='CRI_SystemComponent_top']/@subContainerMappings[name='CRI_System_Component']/@subNodeMappings[name='CRI_CapabilityRealization_int_int']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@borderedNodeMappings[name='LAB_ComponentCategory_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@borderedNodeMappings[name='LAB%20ComponentPort']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@subNodeMappings[name='LAB%20Logical%20Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@subNodeMappings[name='LAB%20Logical%20Function']/@borderedNodeMappings[name='LAB%20Flow%20Port%20on%20Logical%20Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@subNodeMappings[name='LAB%20Logical%20Function']/@borderedNodeMappings[name='LAB%20InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@subNodeMappings[name='LAB%20Logical%20Function']/@borderedNodeMappings[name='LAB%20OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@borderedNodeMappings[name='LAB_PhysicalCategory_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@borderedNodeMappings[name='LAB_PhysicalPort']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB_ComponentCategory']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB%20DataFlow%20between%20Logical%20Components']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB_ComputedComponentExchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB_ComputedPhysicalLink']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='LAB_Dummy']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB%20DataFlow%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='LAB_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB%20DataFlow%20between%20Function']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB_InternLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB_InternPhysicalPathLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB_PhysicalCategory']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB_PhysicalLink']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='LAB_PhysicalPathEnd']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB%20PortRealization%20FlowPort%20to%20ComponentPort']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB%20PortAllocation']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Component%20Breakdown']/@defaultLayer/@nodeMappings[name='LCB_LogicalComponent']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Component%20Breakdown']/@defaultLayer/@edgeMappings[name='LCB_LogicalComponent_Part']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='LDFB_Dummy']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='LDFB_Exchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='LDFB_Exchange%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='LDFB_Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='LDFB_Function']/@borderedNodeMappings[name='LDFB_InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='LDFB_Function']/@borderedNodeMappings[name='LDFB_OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='LDFB_Function']/@borderedNodeMappings[name='LDFB_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='LDFB_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='LDFB_InternLink']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='LDFB_Node']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='LFB_LogicalFunction']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB%20PortAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB%20PortRealization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_ComponentCategory']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_Exchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_ComponentPortAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_ComputedComponentExchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_ComputedPhysicalLink']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_ControlFunction']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_Dummy']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_FunctionExchange%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_FunctionExchange']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_ComponentCategory_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_PhysicalCategory_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_PhysicalCategory']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB%20InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB%20OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_PhysicalLink']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalPathEnd']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@nodeMappings[name='PCB_PhysicalComponent']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@edgeMappings[name='PCB_PhysicalComponent_Part']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@edgeMappings[name='PCB_PhysicalComponent_subComponents']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='PDFB_Dummy']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='PDFB_Exchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='PDFB_Exchange%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='PDFB_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='PDFB_InternLink']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='PDFB_Node']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@nodeMappings[name='PPD_Part']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@edgeMappings[name='PPD_PhysicalLink']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@nodeMappings[name='PPD_PhysicalPath']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='AbsCapExtends3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='AbsCapInclude3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='ActCapInv3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='actorGeneralization1']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@nodeMappings[name='ActorNode3']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@nodeMappings[name='Capability3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='CapExploitation3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='Generalization3']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@nodeMappings[name='MissionNode3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@edgeMappings[name='ActMissInv']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@edgeMappings[name='actorGeneralization4']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@nodeMappings[name='ActorNode']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@edgeMappings[name='CapExploitation']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@nodeMappings[name='CapNode']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@nodeMappings[name='MissionNode']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20System%20Actors']/@defaultLayer/@edgeMappings[name='actorGeneralization5']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20System%20Actors']/@defaultLayer/@nodeMappings[name='SC_System']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20System%20Actors']/@defaultLayer/@edgeMappings[name='SC_System_Actor']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@edgeMappings[name='ActMissInv2']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@edgeMappings[name='actorGeneralization3']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@nodeMappings[name='ActorNode2']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@edgeMappings[name='CapExploitation2']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@nodeMappings[name='CapNode2']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@nodeMappings[name='MissionNode2']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='AbsCapExtends4int']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='AbsCapInclude4int']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='ActCapInv4']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='ActMissInv3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='actorGeneralization2']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='ActorNode4']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='CapabilityNode4']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='CapExploitation4']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='Generalization4int']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='MissionNode4']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='CA%20Dummy']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='CA_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='CA_InternLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='SAB_ComponentCategory']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='CA%20Data%20Flow%20Between%20Actors%20and%20System']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='CA%20DataFlow%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='CA%20DataFlow%20between%20Function']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='SAB_InternPhysicalPathLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='SAB_PhysicalCategory']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='SAB_PhysicalLink']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='SAB_PhysicalPathEnd']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='CA%20PortRealization%20FunctionPort%20to%20ComponentPort']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@borderedNodeMappings[name='CA%20Component%20Port']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@subNodeMappings[name='CA%20System%20Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@subNodeMappings[name='CA%20System%20Function']/@borderedNodeMappings[name='CA%20Flow%20Port%20on%20System%20Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@subNodeMappings[name='CA%20System%20Function']/@borderedNodeMappings[name='CA_InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@subNodeMappings[name='CA%20System%20Function']/@borderedNodeMappings[name='CA_OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@subNodeMappings[name='CA%20System%20Node']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@borderedNodeMappings[name='SAB_ComponentCategory_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@borderedNodeMappings[name='SAB_PhysicalCategory_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@borderedNodeMappings[name='SAB_PhysicalPort']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20System']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='SDFB_Dummy']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='SDFB_Exchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='SDFB_Exchange%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='SDFB_Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='SDFB_Function']/@borderedNodeMappings[name='SDFB_InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='SDFB_Function']/@borderedNodeMappings[name='SDFB_OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='SDFB_Function']/@borderedNodeMappings[name='SDFB_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='SDFB_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='SDFB_InternLink']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='SDFB_Node']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='SFB_SystemFunction']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@containerMappings[name='FC_FunctionalChainReference']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@containerMappings[name='FC_FunctionalChainReference']/@subContainerMappings[name='FC_FunctionalChainStacked']"/>
          <style lineStyle="dash" targetArrow="NoDecoration">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="DT_PVGconnector" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']" targetFinderExpression="service:PVinPVG">
          <style lineStyle="dash" sourceArrow="FillDiamond">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="DT_TitleBlockEdge" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" targetFinderExpression="service:self.targetFinderExpressionForTitleBlocks()">
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Collection']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='DT_EnumerationLiteral']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_Property']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_Operation']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='DT_BooleanLiteral']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']/@borderedNodeMappings[name='CCDI_Port']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']/@borderedNodeMappings[name='CCEI_Port']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@containerMappings[name='ID_Interface']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@nodeMappings[name='CCRI%20CapabilityRealization']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Breakdown']/@defaultLayer/@nodeMappings[name='OAB_OperationalActivity']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@containerMappings[name='OAIB%20Operational%20Activity']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subContainerMappings[name='OAB_subRoles']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']/@subNodeMappings[name='ORB_OAAllocation']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='Configuration%20Items%20Breakdown']/@defaultLayer/@nodeMappings[name='CIBD_ConfigurationItem']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='EPBS%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='CI%20container%20mapping']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='EPBS%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='CI%20container%20mapping']/@subNodeMappings[name='PhysicalComponentInCI%20mapping']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@nodeMappings[name='ActorNode3']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@nodeMappings[name='Capability3']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@nodeMappings[name='MissionNode3']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@nodeMappings[name='ActorNode']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@nodeMappings[name='CapNode']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@nodeMappings[name='MissionNode']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20System%20Actors']/@defaultLayer/@nodeMappings[name='SC_System']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@nodeMappings[name='ActorNode2']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@nodeMappings[name='CapNode2']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@nodeMappings[name='MissionNode2']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='ActorNode4']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='CapabilityNode4']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='MissionNode4']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='CA%20Dummy']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@borderedNodeMappings[name='CA%20Component%20Port']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@subNodeMappings[name='CA%20System%20Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@subNodeMappings[name='CA%20System%20Function']/@borderedNodeMappings[name='CA_OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@subNodeMappings[name='CA%20System%20Function']/@borderedNodeMappings[name='CA_InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@subNodeMappings[name='CA%20System%20Function']/@borderedNodeMappings[name='CA%20Flow%20Port%20on%20System%20Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20Actors']/@subNodeMappings[name='CA%20System%20Node']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='System%20System']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='SDFB_Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='SDFB_Function']/@borderedNodeMappings[name='SDFB_InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='SDFB_Function']/@borderedNodeMappings[name='SDFB_OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='SDFB_Function']/@borderedNodeMappings[name='SDFB_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='SDFB_Node']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='SFB_SystemFunction']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@nodeMappings[name='CRI_Actors']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@nodeMappings[name='CRI_Capability']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@nodeMappings[name='CRI_CapabilityRealization']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@nodeMappings[name='CRI_CapabilityRealization_1']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@containerMappings[name='CRI_SystemComponent_top']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@containerMappings[name='CRI_SystemComponent_top']/@subNodeMappings[name='CRI_CapabilityRealization_int']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@containerMappings[name='CRI_SystemComponent_top']/@subContainerMappings[name='CRI_System_Component']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@containerMappings[name='CRI_SystemComponent_top']/@subContainerMappings[name='CRI_System_Component']/@subNodeMappings[name='CRI_CapabilityRealization_int_int']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='LAB_Dummy']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@borderedNodeMappings[name='LAB%20ComponentPort']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@subNodeMappings[name='LAB%20Logical%20Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@subNodeMappings[name='LAB%20Logical%20Function']/@borderedNodeMappings[name='LAB%20Flow%20Port%20on%20Logical%20Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@subNodeMappings[name='LAB%20Logical%20Function']/@borderedNodeMappings[name='LAB%20InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='LAB%20Logical%20Component']/@subNodeMappings[name='LAB%20Logical%20Function']/@borderedNodeMappings[name='LAB%20OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Component%20Breakdown']/@defaultLayer/@nodeMappings[name='LCB_LogicalComponent']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='LDFB_Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='LDFB_Function']/@borderedNodeMappings[name='LDFB_InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='LDFB_Function']/@borderedNodeMappings[name='LDFB_OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='LDFB_Function']/@borderedNodeMappings[name='LDFB_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='LDFB_Node']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='LFB_LogicalFunction']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_ControlFunction']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_Dummy']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']/@borderedNodeMappings[name='PAB_Port']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB%20InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalFunction']/@borderedNodeMappings[name='PAB%20OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@nodeMappings[name='PCB_PhysicalComponent']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_InputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_OutputPin%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@containerMappings[name='PDFB_Function']/@borderedNodeMappings[name='PDFB_Pin']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='PDFB_Node']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']/@defaultLayer/@nodeMappings[name='PFB_PhysicalFunction']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@nodeMappings[name='OEB_OperationalEntities']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@edgeMappings[name='SM_Transition']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_CollectionType']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@edgeMappings[name='DT_ExchangeItemElement']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataPkg']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_CommunicationLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_PinProvidedInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_PinRequiredInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='imp1']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='use1']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CA_Actor_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CA_imp2']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CA_use2']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_CommunicationLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_EIAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_FilteredLabel']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_PinProvidedInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_PinRequiredInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_CommunicationLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_Connection']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_EIAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_FilteredLabel']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_ImplementInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinProvidedInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinRequiredInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PortAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_UseInterface']"/>
          <targetMapping xsi:type="description_2:BasicMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20DF']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_CommunicationLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_Connection']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_FilteredLabel']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_FilteredLabel_DiagramBased']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_ImplementInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PinProvidedInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PinRequiredInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PortAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_UseInterface']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Package%20Dependencies']/@defaultLayer/@edgeMappings[name='PD_PkgDependency']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_ActorRealizations']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_capaToCaparea']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Involvment']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Involvment_int']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Involvment_intint']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Involvment_inttotop']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_participation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_participation_by_realizations']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Refine']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Refine_intinttoint']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Refine_intinttointint']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Refine_inttoext']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']/@defaultLayer/@edgeMappings[name='CRI_Refine_to_internals']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB_ComponentExchangeByDelegation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB%20DataFlow%20between%20Function']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB%20DataFlow%20between%20Logical%20Components']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB%20DataFlow%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB%20PortAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB%20PortRealization%20FlowPort%20to%20ComponentPort']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Component%20Breakdown']/@defaultLayer/@edgeMappings[name='LCB_LogicalComponent_Part']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='LDFB_Exchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='LDFB_Exchange%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@edgeMappings[name='OAIB%20Interaction']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@edgeMappings[name='OAB_CommunicationMean']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@edgeMappings[name='OAB%20Interaction']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_CommunicationMeans']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_EntityOperationalCapabilityInvolvement']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@edgeMappings[name='ORB%20Interaction']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_ComponentExchangeByDelegation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_Exchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_FunctionExchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_FunctionExchange%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_InternPhysicalPathLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_PhysicalLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB%20PortAllocation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB%20PortRealization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@edgeMappings[name='PCB_PhysicalComponent_Part']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='PDFB_Exchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='PDFB_Exchange%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@nodeMappings[name='PPD_Part']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@edgeMappings[name='PPD_PhysicalLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='AbsCapExtends3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='AbsCapInclude3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='ActCapInv3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='actorGeneralization1']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='CapExploitation3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@edgeMappings[name='Generalization3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@edgeMappings[name='ActMissInv']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@edgeMappings[name='actorGeneralization4']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Mission']/@defaultLayer/@edgeMappings[name='CapExploitation']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20System%20Actors']/@defaultLayer/@edgeMappings[name='actorGeneralization5']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20System%20Actors']/@defaultLayer/@edgeMappings[name='SC_System_Actor']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@edgeMappings[name='ActMissInv2']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@edgeMappings[name='actorGeneralization3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']/@defaultLayer/@edgeMappings[name='CapExploitation2']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='AbsCapExtends4int']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='AbsCapInclude4int']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='ActCapInv4']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='ActMissInv3']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='actorGeneralization2']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='CapExploitation4']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='Generalization4int']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='CA%20Data%20Flow%20Between%20Actors%20and%20System']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='CA%20DataFlow%20between%20Function']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='CA%20DataFlow%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='CA%20PortRealization%20FunctionPort%20to%20ComponentPort']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='SDFB_Exchange']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@edgeMappings[name='SDFB_Exchange%20by%20Categorie']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Actor%20Generalization']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@nodeMappings[name='CRB%20CapabilityRealization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Cap%20Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Cap%20Realization%20Extends']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Cap%20Realization%20Include']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Involvement']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_AbstractFunction']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subNodeMappings[name='SM_InnerModeState']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@containerMappings[name='SM_ModeState_Container']/@subContainerMappings[name='SM_InnerModeState_Container']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']/@defaultLayer/@nodeMappings[name='SM_ModeState']/@borderedNodeMappings[name='ModeState_Activity']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='SDFB_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='OAB_OperationalProcessEnd']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='PDFB_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='LDFB_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@nodeMappings[name='OAIB_OperationalProcessEnd']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='LAB_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='CA_FunctionalChainEnd']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@containerMappings[name='DT_InterfacePkg']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_Deployment']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='PAB_PhysicalPathEnd']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@containerMappings[name='COC_OperationalEntities']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='COC_OperationalCapabilities']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@containerMappings[name='COC2_Entities']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_EntityCapabilityInvolvement']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_OC_Extends']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_OC_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_OC_Include']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@nodeMappings[name='COC2_OperationalCapabilities']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_OC_Extends']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_OC_Generalization']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_OC_Include']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Path%20Description']/@defaultLayer/@nodeMappings[name='PPD_PhysicalPath']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_FunctionalChain']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@containerMappings[name='MSM_ModeState_Container']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@nodeMappings[name='MSM_ModeState']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Mode%20State%20Machine']/@defaultLayer/@edgeMappings[name='MSM_Transition']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@nodeMappings[name='CCRI%20Component']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@edgeMappings[name='CCRI%20involvement']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@containerMappings[name='FC_FunctionalChainReference']"/>
          <targetMapping xsi:type="description_1:ContainerMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@containerMappings[name='FC_FunctionalChainReference']/@subContainerMappings[name='FC_FunctionalChainStacked']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@edgeMappings[name='OAB_FC_SequenceLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='SAB_FC_SequenceLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='LAB_FC_SequenceLink']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@edgeMappings[name='PAB_FC_SequenceLink']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
          <targetMapping xsi:type="description_1:NodeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
          <targetMapping xsi:type="description_1:EdgeMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink']"/>
          <style lineStyle="dash" targetArrow="NoDecoration" sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription labelSize="12">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="DT_Class" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="" createElements="false" domainClass="Class" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20DataValue%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DataValue%20Into%20Class']" childrenPresentation="List">
          <subNodeMappings name="DT_Property" preconditionExpression="aql:self.association = null" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="aql:self.ownedFeatures->select(ownedFeature | ownedFeature.isPrimitiveTypeForAttribute())" domainClass="Property">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.computeLabel() + self.modifiersSuffix(view)" labelAlignment="LEFT" sizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
            <conditionnalStyles predicateExpression="service:isAbstract()">
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.computeLabel() + self.modifiersSuffix(view)" labelAlignment="LEFT" sizeComputationExpression="1">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              </style>
            </conditionnalStyles>
          </subNodeMappings>
          <subNodeMappings name="DT_Operation" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="feature:ownedFeatures" semanticElements="aql:self.makeUnion(self, self.ownedParameters)" domainClass="Operation">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.computeLabel()" labelAlignment="LEFT" sizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
            <conditionnalStyles predicateExpression="service:isAbstract()">
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.computeLabel()" labelAlignment="LEFT" sizeComputationExpression="1">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              </style>
            </conditionnalStyles>
          </subNodeMappings>
          <subNodeMappings name="DT_SubDataValue" preconditionExpression="aql:self.eContainer().oclIsKindOf(information::Class)" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="feature:ownedDataValues" domainClass="DataValue">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getDatavalueLabel()" labelAlignment="LEFT" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
            <conditionnalStyles predicateExpression="service:isAbstract()">
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getDatavalueLabel()" labelAlignment="LEFT" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              </style>
            </conditionnalStyles>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Class_Border_Brown']" labelExpression="aql:self.getFullPathLableConsiderViewContentment(view)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Class_Brown']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.isAbstract() = true and self.isPrimitive() = false">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Class_Border_Brown']" labelExpression="aql:self.getFullPathLableConsiderViewContentment(view)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Class_Brown']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.isAbstract() = false and self.isPrimitive() = true">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="0" arcHeight="0" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_Border_Gray']" labelExpression="aql:self.getFullPathLableConsiderViewContentment(view)" backgroundStyle="Liquid" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.isAbstract() = true and self.isPrimitive() = true">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="0" arcHeight="0" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_Border_Gray']" labelExpression="aql:self.getFullPathLableConsiderViewContentment(view)" backgroundStyle="Liquid" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Value_LightBrown']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <containerMappings name="DT_Enumeration" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="" createElements="false" domainClass="Enumeration" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20DataValue%20From%20Project%20Explorer']" childrenPresentation="List">
          <subNodeMappings name="DT_EnumerationLiteral" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="feature:ownedLiterals" domainClass="EnumerationLiteral">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" labelAlignment="LEFT" sizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </subNodeMappings>
          <subNodeMappings name="EnumerationContents" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" semanticCandidatesExpression="aql:self.makeDiff(self.eContents()->select(eContent | eContent->filter(datavalue::DataValue)->size() > 0), self.ownedLiterals)" documentation="we do not take into consideration 'ownedLiterals' because they are created seperately" domainClass="DataValue">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getDatavalueLabel()" labelAlignment="LEFT" sizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
            <conditionnalStyles predicateExpression="service:isAbstract()">
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getDatavalueLabel()" labelAlignment="LEFT" sizeComputationExpression="1">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              </style>
            </conditionnalStyles>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_Border_Gray']" labelExpression="aql:self.getFullPathLableConsiderViewContentment(view)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="service:isAbstract()">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_Border_Gray']" labelExpression="aql:self.getFullPathLableConsiderViewContentment(view)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <containerMappings name="DT_Collection" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="" createElements="false" domainClass="Collection" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DataValue%20Into%20Class']" reusedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_Operation'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_SubDataValue']" childrenPresentation="List">
          <subNodeMappings name="DT_SubDataValue" preconditionExpression="aql:self.eContainer().oclIsKindOf(information::Collection)" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="aql:self.makeUnion(self.ownedDataValues, self.ownedMinCard, self.ownedMaxCard)" domainClass="DataValue">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getDatavalueLabel()" labelAlignment="LEFT" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
            <conditionnalStyles predicateExpression="service:isAbstract()">
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getDatavalueLabel()" labelAlignment="LEFT" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              </style>
            </conditionnalStyles>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Class_Border_Brown']" labelExpression="aql:self.getFullPathLableConsiderViewContentment(view)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Class_Brown']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.isAbstract() = true and self.isPrimitive() = false">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Class_Border_Brown']" labelExpression="aql:self.getFullPathLableConsiderViewContentment(view)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Class_Brown']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.isPrimitive() = true and self.isAbstract() = false">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_Border_Gray']" labelExpression="aql:self.getFullPathLableConsiderViewContentment(view)" backgroundStyle="Liquid" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.isPrimitive() = true and self.isAbstract() = true">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_Border_Gray']" labelExpression="aql:self.getFullPathLableConsiderViewContentment(view)" backgroundStyle="Liquid" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <containerMappings name="DT_BooleanType" preconditionExpression="aql:(self->filter(datatype::BooleanType))->size() > 0" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" createElements="false" domainClass="BooleanType" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20DataValue%20From%20Project%20Explorer']" childrenPresentation="List">
          <subNodeMappings name="DT_BooleanLiteral" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="feature:ownedLiterals" domainClass="LiteralBooleanValue">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getDatavalueLabel()" labelAlignment="LEFT" sizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
            <conditionnalStyles predicateExpression="service:isAbstract()">
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getDatavalueLabel()" labelAlignment="LEFT" sizeComputationExpression="1">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              </style>
            </conditionnalStyles>
          </subNodeMappings>
          <subNodeMappings name="BooleanTypeContents" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" semanticCandidatesExpression="aql:self.makeDiff(self.eContents()->select(eContent | eContent->filter(datavalue::DataValue)->size() > 0), self.ownedLiterals)" domainClass="DataValue">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getDatavalueLabel()" labelAlignment="LEFT" sizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
            <conditionnalStyles predicateExpression="service:isAbstract()">
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getDatavalueLabel()" labelAlignment="LEFT" sizeComputationExpression="1">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              </style>
            </conditionnalStyles>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_Border_Gray']" labelExpression="aql:self.getFullPathLableConsiderViewContentment(view)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="service:isAbstract()">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_Border_Gray']" labelExpression="aql:self.getFullPathLableConsiderViewContentment(view)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <containerMappings name="DT_DataPkg" detailDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Package%20Dependencies']/@defaultLayer/@toolSections.0/@ownedTools[name='Package%20Dependencies'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Class%20Diagram%20Blank']" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" createElements="false" domainClass="DataPkg" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Class%20Into%20DataPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20DataType%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Collection%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Enumeration%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Collection%20Into%20DataPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DataType%20Into%20DataPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DataPkg%20Into%20DataPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='D%26D%20ExchangeItem%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='AbstractExchangeItem%20Into%20AbstractExchangeItemPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20DataPkg%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20DataValue%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DataValue%20Into%20DataPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Unit%20from%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Unit%20Into%20DataPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Package%20Dependencies']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocate%20InterfacePkg%20from%20Model']" reusedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Unit']" reusedContainerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Collection'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']">
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getFullPathLableConsiderViewContentment(view)" backgroundStyle="GradientTopToBottom" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_InterfaceDataPackage_LightGray']">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </containerMappings>
        <containerMappings name="DT_DataType" preconditionExpression="aql:(self.makeUnion(self->filter(datatype::StringType), self->filter(datatype::NumericType), self->filter(datatype::PhysicalQuantity)))->size() > 0" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" createElements="false" domainClass="DataType" childrenPresentation="List">
          <subNodeMappings name="Contents" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="aql:self.eContents()->select(eContent | eContent->filter(datavalue::DataValue)->size() > 0)" domainClass="DataValue">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getDatavalueLabel()" labelAlignment="LEFT" sizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
            <conditionnalStyles predicateExpression="service:isAbstract()">
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getDatavalueLabel()" labelAlignment="LEFT" sizeComputationExpression="1">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              </style>
            </conditionnalStyles>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_Border_Gray']" labelExpression="aql:self.getFullPathLableConsiderViewContentment(view)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="service:isAbstract()">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_Border_Gray']" labelExpression="aql:self.getFullPathLableConsiderViewContentment(view)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Datatype_LightBrown']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <containerMappings name="DT_Dummy" semanticCandidatesExpression="ocl:Set {}" domainClass="EObject" childrenPresentation="List"/>
        <containerMappings name="DT_PVG" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" createElements="false" domainClass="PropertyValueGroup" childrenPresentation="List">
          <subNodeMappings name="DT_PVinPVG" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" semanticCandidatesExpression="feature:eContents" synchronizationLock="true" domainClass="AbstractPropertyValue">
            <style xsi:type="style:SquareDescription" labelExpression="service:computePVLabel" labelAlignment="LEFT" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </subNodeMappings>
          <subNodeMappings name="DT_PVGinPVG" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" semanticCandidatesExpression="feature:eContents" synchronizationLock="true" domainClass="PropertyValueGroup">
            <style xsi:type="style:SquareDescription" labelExpression="service:computePVLabel" labelAlignment="LEFT" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:computePVLabel" backgroundStyle="Liquid">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
          </style>
        </containerMappings>
        <containerMappings name="DT_TitleBlockContainer" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Delete%20Title%20Block']" semanticCandidatesExpression="aql:diagram.getTitleBlocksInDiagram()" createElements="false" domainClass="DAnnotation" childrenPresentation="VerticalStack">
          <subContainerMappings name="DT_TitleBlockLineContainer" semanticCandidatesExpression="feature:references" domainClass="DAnnotation" childrenPresentation="HorizontalStack">
            <subContainerMappings name="DT_TitleBlockColumnContainer" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Delete%20Title%20Block%20Cell']" semanticCandidatesExpression="feature:references" domainClass="DAnnotation" childrenPresentation="List">
              <subNodeMappings name="DT_TitleBlockCellNode" semanticCandidatesExpression="aql:diagram.getTitleBlockCellContent(self, containerView)" domainClass="EObject">
                <style xsi:type="style:SquareDescription" labelSize="7" labelAlignment="LEFT" labelPosition="node" resizeKind="NSEW">
                  <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
                </style>
                <conditionnalStyles predicateExpression="service:isAnnotation()">
                  <style xsi:type="style:SquareDescription" labelSize="7" showIcon="false" labelExpression="service:self.getTitleBockCellLabel()" labelAlignment="LEFT" labelPosition="node" resizeKind="NSEW">
                    <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
                  </style>
                </conditionnalStyles>
              </subNodeMappings>
              <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.getTitleBlockCellLabel()" widthComputationExpression="10" heightComputationExpression="5" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_TitleBlock_Gray']">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
                <labelBorderStyle href="environment:/viewpoint#//@labelBorderStyles/@labelBorderStyleDescriptions.2"/>
              </style>
            </subContainerMappings>
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelSize="1" showIcon="false" labelExpression="" hideLabelByDefault="true" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_TitleBlock_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </subContainerMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelSize="9" showIcon="false" labelExpression="" hideLabelByDefault="true" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_TitleBlock_Gray']">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </containerMappings>
        <toolSections name="Classes">
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Data Package." name="data.package" label="%common.cdb.data.package" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataPkg']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="DataPkg" referenceName="ownedDataPkgs">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Classifiers">
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Class." name="class" label="%common.cdb.class" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Class" referenceName="ownedClasses">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Union." name="union" label="%common.cdb.union" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Union" referenceName="ownedClasses">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Collection." name="collection" label="%common.cdb.collection" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Collection']">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Collection" referenceName="ownedCollections">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="DataType">
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Boolean Type." name="boolean.type" label="%common.cdb.boolean.type" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/BooleanType.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="BooleanType" referenceName="ownedDataTypes">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Boolean Literal." name="boolean.literal" label="%common.cdb.boolean.literal" precondition="aql:container.ownedLiterals->size() &lt; 2" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='DT_BooleanLiteral']">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="LiteralBooleanValue" referenceName="ownedLiterals">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Enumeration." name="enumeration" label="%common.cdb.enumeration" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Enumeration" referenceName="ownedDataTypes">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Enumeration Literal in the selected Enumeration." name="enumeration.literal" label="%common.cdb.enumeration.literal" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='DT_EnumerationLiteral']">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="EnumerationLiteral" referenceName="ownedLiterals">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new NumericType." name="numeric.type" label="%common.cdb.numeric.type" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/NumericType.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="NumericType" referenceName="ownedDataTypes">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new StringType." name="string.type" label="%common.cdb.string.type" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/StringType.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="StringType" referenceName="ownedDataTypes">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Physical Quantity." name="physical.quantity" label="%common.cdb.physical.quantity" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/PhysicalQuantity.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PhysicalQuantity" referenceName="ownedDataTypes">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Unit." name="unit" label="%common.cdb.unit" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Unit']">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Unit" referenceName="ownedUnits">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="DataValue" label="DataValue">
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Numeric Reference." name="numeric.reference" label="%common.cdb.numeric.reference" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_SubDataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']/@subNodeMappings[name='Contents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='BooleanTypeContents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='EnumerationContents']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/NumericReference.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="NumericReference" referenceName="ownedDataValues">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Literal Numeric Value." name="literal.numeric.value" label="%common.cdb.literal.numeric.value" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_SubDataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']/@subNodeMappings[name='Contents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='BooleanTypeContents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='EnumerationContents']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/LiteralNumericValue.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="LiteralNumericValue" referenceName="ownedDataValues">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Unary Expression." name="unary.expression" label="%common.cdb.unary.expression" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_SubDataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']/@subNodeMappings[name='Contents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='BooleanTypeContents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='EnumerationContents']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/UnaryExpression.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="UnaryExpression" referenceName="ownedDataValues">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Binary Expression." name="binary.expression" label="%common.cdb.binary.expression" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_SubDataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']/@subNodeMappings[name='Contents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='BooleanTypeContents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='EnumerationContents']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/BinaryExpression.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="BinaryExpression" referenceName="ownedDataValues">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Literal String Value." name="literal.string.value" label="%common.cdb.literal.string.value" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_SubDataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']/@subNodeMappings[name='Contents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='BooleanTypeContents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='EnumerationContents']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/LiteralStringValue.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="LiteralStringValue" referenceName="ownedDataValues">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new String Reference." name="string.reference" label="%common.cdb.string.reference" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_SubDataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']/@subNodeMappings[name='Contents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='BooleanTypeContents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='EnumerationContents']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/StringReference.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="StringReference" referenceName="ownedDataValues">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Boolean Reference." name="boolean.reference" label="%common.cdb.boolean.reference" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_SubDataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']/@subNodeMappings[name='Contents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='BooleanTypeContents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='EnumerationContents']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/BooleanReference.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="BooleanReference" referenceName="ownedDataValues">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Complex Value." name="complex.value" label="%common.cdb.complex.value" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_SubDataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']/@subNodeMappings[name='Contents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='BooleanTypeContents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='EnumerationContents']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ComplexValue.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComplexValue" referenceName="ownedDataValues">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Complex Value Reference." name="complex.value.reference" label="%common.cdb.complex.value.reference" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_SubDataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']/@subNodeMappings[name='Contents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='BooleanTypeContents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='EnumerationContents']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ComplexValueReference.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComplexValueReference" referenceName="ownedDataValues">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Enumeration Reference." name="enumeration.reference" label="%common.cdb.enumeration.reference" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_SubDataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']/@subNodeMappings[name='Contents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='BooleanTypeContents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='EnumerationContents']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/EnumerationReference.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="EnumerationReference" referenceName="ownedDataValues">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Collection Value." name="collection.value" label="%common.cdb.collection.value" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_SubDataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']/@subNodeMappings[name='Contents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='BooleanTypeContents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='EnumerationContents']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ComplexValueReference.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CollectionValue" referenceName="ownedDataValues">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Collection Value Reference." name="collection.value.reference" label="%common.cdb.collection.value.reference" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_SubDataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']/@subNodeMappings[name='Contents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']/@subNodeMappings[name='BooleanTypeContents'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']/@subNodeMappings[name='EnumerationContents']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ComplexValueReference.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CollectionValueReference" referenceName="ownedDataValues">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Property in the selected Class or Union. This tool opens a selection wizard to select the type of the Property." name="property" label="%common.cdb.property" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_Property']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container->filter(information::Union)->size() > 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="UnionProperty" referenceName="ownedFeatures"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container->filter(information::Union)->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="information.Property" referenceName="ownedFeatures"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select Type" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="aql:self.getPropertyTypes()"/>
                    <parameters name="multiple" value="false"/>
                    <parameters name="resultVariable" value="type"/>
                    <parameters name="wizardMessage" value="Select type of Property."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:type != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:type"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:type = 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:RemoveElement"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Operation in the selected Class." name="class.operation" label="%common.cdb.class.operation" precondition="aql:not (self.oclIsKindOf(cs::Interface))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_Operation']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Service.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Service" referenceName="ownedFeatures">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates a new Parameter for the selected Class Operation. This tool opens a selection wizard to select the Type of the Parameter." name="parameter" label="%common.cdb.parameter" precondition="aql:self.oclIsKindOf(information::Operation)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Parameter.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="information.Parameter" referenceName="ownedParameters"/>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select Type" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="aql:element"/>
                    <parameters name="scope" value="aql:self.getParameterTypes()"/>
                    <parameters name="multiple" value="false"/>
                    <parameters name="resultVariable" value="type"/>
                    <parameters name="wizardMessage" value="aql:'Select type of Parameter in ' + element.name + '.'"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:type != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:type"/>
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Edit parameter" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.EditCapellaPropertyWizard">
                      <parameters name="context" value="aql:instance"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="refreshElement" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.RefreshElement">
                      <parameters name="context" value="aql:elementView"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:type = 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.removeCapellaElement()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Relations">
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a new Association relationship between the Source and Target Classifiers (Class, Union, Collection). " name="association" label="%common.cdb.association" precondition="aql:((self.makeUnion(preSource, preTarget))->filter(information::Class)->select(x | x.isPrimitive())->size() = 0) and ((self.makeUnion(preSource, preTarget))->filter(information::Collection)->select(x | x.isPrimitive())->size() = 0) and not (preSource.oclIsKindOf(information::Collection))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassAssociation.gif">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceKind" computationExpression="ASSOCIATION"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="targetKind" computationExpression="ASSOCIATION"/>
              </sourceVariable>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getSourceClassPkg()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(information::AssociationPkg)->size() = 0">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:source"/>
                      <parameters name="variable" value="containerAssociation"/>
                      <parameters name="value" value="aql:source.eContainerOrSelf(information::AssociationPkg)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(information::AssociationPkg)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:source"/>
                      <parameters name="variable" value="containerAssociation"/>
                      <parameters name="value" value="aql:self"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerAssociation">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="information.Association" referenceName="ownedAssociations">
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.oclIsKindOf(information::Union)">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="UnionProperty" referenceName="ownedMembers" variableName="sourceProperty">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:target"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.convertToUpperFirst(target.name)"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="aggregationKind" valueExpression="aql:sourceKind"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (source.oclIsKindOf(information::Union))">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="information.Property" referenceName="ownedMembers" variableName="sourceProperty">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:target"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.convertToUpperFirst(target.name)"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="aggregationKind" valueExpression="aql:sourceKind"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="information.Property" referenceName="ownedMembers" variableName="targetProperty">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:source"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.convertToUpperFirst(source.name)"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="aggregationKind" valueExpression="aql:targetKind"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.eContainer().name + 'Association' + self.eContainer().ownedAssociations->size()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="navigableMembers" valueExpression="aql:sourceProperty"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceProperty">
                      <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:source" featureName="ownedFeatures"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a new Aggregation relationship between the Source and Target Classifiers (Class, Union, Collection).." name="aggregation" label="%common.cdb.aggregation" precondition="aql:((self.makeUnion(preSource, preTarget))->filter(information::Class)->select(x | x.isPrimitive())->size() = 0) and ((self.makeUnion(preSource, preTarget))->filter(information::Collection)->select(x | x.isPrimitive())->size() = 0) and not (preSource.oclIsKindOf(information::Collection))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassAggregation.gif">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceKind" computationExpression="AGGREGATION"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="targetKind" computationExpression="ASSOCIATION"/>
              </sourceVariable>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getCommonAncestor(target).eContainerOrSelf(information::AssociationPkg)">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(information::AssociationPkg)->size() = 0">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:source"/>
                      <parameters name="variable" value="containerAssociation"/>
                      <parameters name="value" value="aql:source.eContainerOrSelf(information::AssociationPkg)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(information::AssociationPkg)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:source"/>
                      <parameters name="variable" value="containerAssociation"/>
                      <parameters name="value" value="aql:self"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerAssociation">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="information.Association" referenceName="ownedAssociations">
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.oclIsKindOf(information::Union)">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="UnionProperty" referenceName="ownedMembers" variableName="sourceProperty">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:target"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.convertToUpperFirst(target.name)"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="aggregationKind" valueExpression="aql:sourceKind"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (source.oclIsKindOf(information::Union))">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="information.Property" referenceName="ownedMembers" variableName="sourceProperty">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:target"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.convertToUpperFirst(target.name)"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="aggregationKind" valueExpression="aql:sourceKind"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="information.Property" referenceName="ownedMembers" variableName="targetProperty">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:source"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.convertToUpperFirst(source.name)"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="aggregationKind" valueExpression="aql:targetKind"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.eContainer().name + 'Association' + self.eContainer().ownedAssociations->size()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="navigableMembers" valueExpression="aql:sourceProperty"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceProperty">
                      <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:source" featureName="ownedFeatures"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a new Composition relationship between the Source and Target Classifiers (Class, Union, Collection)." name="composition" label="%common.cdb.composition" precondition="aql:((self.makeUnion(preSource, preTarget))->filter(information::Class)->select(x | x.isPrimitive())->size() = 0) and ((self.makeUnion(preSource, preTarget))->filter(information::Collection)->select(x | x.isPrimitive())->size() = 0) and not (preSource.oclIsKindOf(information::Collection))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassComposition.gif">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceKind" computationExpression="COMPOSITION"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="targetKind" computationExpression="ASSOCIATION"/>
              </sourceVariable>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getCommonAncestor(target).eContainerOrSelf(information::AssociationPkg)">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(information::AssociationPkg)->size() = 0">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:source"/>
                      <parameters name="variable" value="containerAssociation"/>
                      <parameters name="value" value="aql:source.eContainerOrSelf(information::AssociationPkg)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(information::AssociationPkg)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:source"/>
                      <parameters name="variable" value="containerAssociation"/>
                      <parameters name="value" value="aql:self"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerAssociation">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="information.Association" referenceName="ownedAssociations">
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.oclIsKindOf(information::Union)">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="UnionProperty" referenceName="ownedMembers" variableName="sourceProperty">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:target"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.convertToUpperFirst(target.name)"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="aggregationKind" valueExpression="aql:sourceKind"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (source.oclIsKindOf(information::Union))">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="information.Property" referenceName="ownedMembers" variableName="sourceProperty">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:target"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.convertToUpperFirst(target.name)"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="aggregationKind" valueExpression="aql:sourceKind"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="information.Property" referenceName="ownedMembers" variableName="targetProperty">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:source"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.convertToUpperFirst(source.name)"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="aggregationKind" valueExpression="aql:targetKind"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.eContainer().name + 'Association' + self.eContainer().ownedAssociations->size()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="navigableMembers" valueExpression="aql:sourceProperty"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceProperty">
                      <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:source" featureName="ownedFeatures"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a new Generalization relationship between the Source and Target elements (Class, Union, Collection, Datatypes, etc.)." name="generalization" label="%common.cdb.generalization" precondition="aql:self.canReconnectGeneralization(preSource,preTarget)" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Generalization']">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="capellacore.Generalization" referenceName="ownedGeneralizations">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="super" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="sub" valueExpression="aql:source"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Sets the type of a Collection with an existing Type. " name="collection.type" label="%common.cdb.collection.type" precondition="aql:not (preSource.type = preTarget)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_CollectionType']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="type" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Data Packages. Removing a Data Package graphical object does not delete this Data Package from the model. This tool does not modify the semantic model. " name="data.packages" label="%common.cdb.data.packages" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.getDiagramContainer()"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectPackages" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:elementView.getAvailableDataPkgsToInsert()"/>
                  <parameters name="resultVariable" value="selectedPkgs"/>
                  <parameters name="wizardMessage" value="aql:'Select Packages to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(elementView.containers.target->filter(information::DataPkg))"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedPkgs = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.showHideDataPkgs(selectedPkgs)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:diagram.forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Types. Removing a Type graphical object does not delete this Type from the model. This tool does not modify the semantic model." name="types" label="%common.cdb.types" precondition="aql:elementView.target.oclIsKindOf(information::DataPkg)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.getDiagramContainer()"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectTypes" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.makeUnion(self.getAvailableClassesToInsert(), self.getAvailableCollectionsToInsert(), self.getAvailableDataTypesToInsert())"/>
                  <parameters name="resultVariable" value="selectedTypes"/>
                  <parameters name="wizardMessage" value="aql:'Select Types to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(elementView.containers.target->select(x | x->filter(information::Class)->size() > 0 or x->filter(information::Collection)->size() > 0 or x->filter(datatype::DataType)->size() > 0))"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedTypes = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.showHideTypes(selectedTypes)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:diagram.forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" documentation="Insert/Remove Features" name="S/H Features">
            <tools xsi:type="tool:NodeCreationDescription" documentation="Insert/Remove properties" name="properties" label="%common.cdb.properties" precondition="aql:not (containerView.getDiagramContainer().isSynchronized())" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_Property']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="aql:self.isSynchronized()" elementsToListen="aql:self">
                <listeners domainClass="DDiagram" featureName="synchronized"/>
              </filters>
              <variable name="container"/>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="displayedProperties" computationExpression="aql:containerView.getNodesAndNodeListElements().target->filter(information::Property)"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:containerView.getDiagramContainer()"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectProperties" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:containerView"/>
                    <parameters name="scope" value="aql:container.ownedFeatures->select(ownedFeature | ownedFeature.isPrimitiveTypeForAttribute())"/>
                    <parameters name="initialSelection" value="aql:displayedProperties"/>
                    <parameters name="resultVariable" value="selectedProperties"/>
                    <parameters name="wizardMessage" value="aql:'Select Properties to show in ' + container.name + '.'"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedProperties != 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideProperties(selectedProperties,diagram)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Insert/Remove operations" name="operations" label="%common.cdb.operations" precondition="aql:not (containerView.getDiagramContainer().isSynchronized())" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_Operation'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="aql:self.isSynchronized()" elementsToListen="aql:self">
                <listeners domainClass="DDiagram" featureName="synchronized"/>
              </filters>
              <variable name="container"/>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="displayedOperations" computationExpression="aql:containerView.getNodesAndNodeListElements().target->select(x | x.oclIsKindOf(information::Operation) or x.oclIsKindOf(cs::ExchangeItemAllocation))"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:containerView.getDiagramContainer()"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectOperations" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:containerView"/>
                    <parameters name="scope" value="aql:container.ownedFeatures->filter(information::Operation)"/>
                    <parameters name="initialSelection" value="aql:displayedOperations"/>
                    <parameters name="resultVariable" value="selectedOperations"/>
                    <parameters name="wizardMessage" value="aql:'Select Operations to show in ' + container.name + '.'"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedOperations != 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideOperations(selectedOperations,diagram)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Data Values" name="data.values" label="%common.cdb.data.values" precondition="aql:not (containerView.getDiagramContainer().isSynchronized() and (containerView.oclIsKindOf(diagram::DNodeList) or containerView.oclIsKindOf(diagram::DNodeListElement)))" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.getParentDiagram()"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectPackages" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:elementView.getAvailableDataValuesToInsert()"/>
                  <parameters name="resultVariable" value="selectedValues"/>
                  <parameters name="wizardMessage" value="aql:'Select Values to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(elementView.getInitialSelectionOfShowHideDataValues())"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedValues = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.showHideDataValues(selectedValues,diagram)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:diagram.forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Relationships" name="relationships" label="%common.cdb.relationships" precondition="aql:self.oclIsKindOf(information::Class) or self.oclIsKindOf(information::Collection) or self.oclIsKindOf(communication::Signal) or self.oclIsKindOf(communication::Exception) or self.oclIsKindOf(cs::Interface) or self.oclIsKindOf(datatype::DataType)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectRelationships" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeUnion(self.getAvailableAssociationToInsert(), self.getAvailableGeneralizationToInsert()))"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(self.makeUnion(self.getExistingAssociationFromDiagram(), self.getExistingGeneralizationFromDiagram()))"/>
                  <parameters name="resultVariable" value="selectedRelationships"/>
                  <parameters name="wizardMessage" value="aql:'Select Relationships to show in ' + element.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedRelationships != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.showHideRelationshipInClassDiagramBlank(elementView,selectedRelationships)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Constraints"/>
          <ownedTools xsi:type="tool:DirectEditLabel" name="name" forceRefresh="true" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="Delete_DataType">
            <element name="element"/>
            <elementView name="view"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="deleteCapellaElement" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="Delete Collection Type">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="type" elementExpression="aql:elementView.targetNode.target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D DataType From Project Explorer" precondition="aql:element.oclIsKindOf(datatype::DataType) and (not (element.oclIsKindOf(datatype::Enumeration))) and (not (element.oclIsKindOf(datatype::BooleanType))) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D BooleanType From Project Explorer" precondition="aql:element.oclIsKindOf(datatype::BooleanType) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataPkg']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Class From Project Explorer" precondition="aql:element.oclIsKindOf(information::Class) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataPkg']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Collection From Project Explorer" precondition="aql:element.oclIsKindOf(information::Collection) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Collection']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Enumeration From Project Explorer" precondition="aql:element.oclIsKindOf(datatype::Enumeration) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Constraint From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D DataPkg From Project Explorer" precondition="aql:element.oclIsKindOf(information::DataPkg) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataPkg']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Unit from Project Explorer" precondition="aql:element.oclIsKindOf(information::Unit) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Unit']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Class Into DataPkg" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndCDClassOrCollectionFromDiagram(newContainerView,oldSemanticContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Collection Into DataPkg" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Collection']">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndCDClassOrCollectionFromDiagram(newContainerView,oldSemanticContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="DataType Into DataPkg" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType']">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:newContainerView.target" featureName="ownedDataTypes"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="DataPkg Into DataPkg" precondition="aql:newViewContainer.target.oclIsKindOf(information::DataPkg)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataPkg']">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndCDDataPkgFromDiagram(newContainerView,oldSemanticContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="DataValue Into Class" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']/@subNodeMappings[name='DT_SubDataValue']">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:newContainer" featureName="ownedDataValues"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CB Reconnect Association Source" precondition="aql:((self.makeUnion(source, target))->filter(information::Class)->select(x | x.isPrimitive())->size() = 0) and ((self.makeUnion(source, target))->filter(information::Class)->size() = 2)" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.reconnectAssociation(source,target,element.getAssociationSource())"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CB Reconnect Association Target" precondition="aql:((self.makeUnion(source, target))->filter(information::Class)->select(x | x.isPrimitive())->size() = 0) and ((self.makeUnion(source, target))->filter(information::Collection)->select(x | x.isPrimitive())->size() = 0)">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.reconnectAssociation(source,target,element.getAssociationTarget())"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CB Reconnect Collection Type" precondition="aql:not (self.type = target)">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="type" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CB Reconnect Generalization Source" precondition="aql:self.canReconnectGeneralization(target,element.super)" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:targetView.target" featureName="ownedGeneralizations"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="sub" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CB Reconnect Generalization Target" precondition="aql:self.canReconnectGeneralization(element.sub,target)">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="super" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D DataValue From Project Explorer" precondition="aql:element.oclIsKindOf(datavalue::DataValue) and not (element.oclIsKindOf(datavalue::EnumerationLiteral) or element.oclIsKindOf(datavalue::LiteralBooleanValue)) and element.canBeDropped(newViewContainer)" forceRefresh="true" inverseSelectionOrder="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="DataValue Into DataPkg" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_DataValue']">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:newSemanticContainer" featureName="ownedDataValues"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Unit Into DataPkg" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Unit']">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:newContainerView.target" featureName="ownedUnits"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Class Diagram Blank" precondition="aql:self.isInLib()" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Constraint." name="constraint" label="%common.cdb.constraint" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%common.cdb.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%common.cdb.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" documentation="This Reconnect is reused in diffrent diagrams" name="CB Reconnect Constraint Elements" precondition="aql:not (self.constrainedElements->includes(target)) and not (target.oclIsKindOf(capellacore::Constraint))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:edgeView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                <subModelOperations xsi:type="tool_1:Unset" featureName="constrainedElements" elementExpression="aql:source"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" documentation="This delete is reused in diffrent diagrams" name="Delete Constraint Elements">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="constrainedElements" elementExpression="aql:elementView.targetNode.target"/>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:elementView.targetNode.target->filter(cs::Part)->size() = 1">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:elementView.targetNode.target.deployingLinks->size() > 0">
                    <subModelOperations xsi:type="tool_1:Unset" featureName="constrainedElements" elementExpression="aql:elementView.targetNode.target.deployingLinks"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" documentation="This editis reused in diffrent diagrams" name="Constraint Content" forceRefresh="true" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="PV">
            <tools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects on the diagrams corresponding to existing Property Value Groups applied to one model element. Removing a Property Value Group graphical object from the diagram does not delete the Property Value Group from the model. This tool does not modify the semantic model." name="applied.property.value.groups" label="%common.cdb.applied.property.value.groups" precondition="aql:elementView.isValidInsertAppliedPV()" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <element name="element">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="scope" computationExpression="aql:element.computeAppliedPV()->filter(capellacore::PropertyValueGroup)"/>
              </element>
              <elementView name="elementView">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.getDiagramContainer()"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="ownedNodeContainer" computationExpression="aql:diagram.eAllContents()->filter(diagram::DNodeList)"/>
              </elementView>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectappliedPVG" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="var:element"/>
                    <parameters name="scope" value="var:scope"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="aql:'Select PVG applied to \'' + element.name + '\' to show in \'' + diagram.name + '\''"/>
                    <parameters name="initialSelection" value="aql:self.getIntersection(ownedNodeContainer->select(v | v.visible).target, scope)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection == 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                      <subModelOperations xsi:type="tool_1:For" expression="aql:self.makeDiff(self.getIntersection(ownedNodeContainer->select(v | v.visible).target, scope), selection)">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:ownedNodeContainer->select(v | v.target == i)->first()">
                          <subModelOperations xsi:type="tool_1:DeleteView"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:For" expression="var:selection">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:ownedNodeContainer->select(v | v.target == i)->size() > 0">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:ownedNodeContainer->select(v | v.target == i)->show()"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:ownedNodeContainer->select(v | v.target == i)->size() == 0">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:i">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']" containerViewExpression="var:diagram"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects on the diagrams corresponding to existing Property Values applied to one model element. Removing a Property Value graphical object from the diagram does not delete the Property Value from the model. This tool does not modify the semantic model." name="applied.property.values" label="%common.cdb.applied.property.values" precondition="aql:elementView.isValidInsertAppliedPV()" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <element name="element">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="scope" computationExpression="aql:element.computeAppliedPV()->filter(capellacore::AbstractPropertyValue)"/>
              </element>
              <elementView name="elementView">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.getDiagramContainer()"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="ownedNodeContainer" computationExpression="aql:diagram.eAllContents()->filter(diagram::DNode)"/>
              </elementView>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectappliedPV" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="var:element"/>
                    <parameters name="scope" value="var:scope"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="aql:'Select PV applied to \'' + element.name + '\' to show in \'' + diagram.name + '\''"/>
                    <parameters name="initialSelection" value="aql:self.getIntersection(ownedNodeContainer->select(v | v.visible).target, scope)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection == 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                      <subModelOperations xsi:type="tool_1:For" expression="aql:self.makeDiff(self.getIntersection(ownedNodeContainer->select(v | v.visible).target, scope), selection)">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:ownedNodeContainer->select(v | v.target == i)->first()">
                          <subModelOperations xsi:type="tool_1:DeleteView"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:For" expression="var:selection">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:ownedNodeContainer->select(v | v.target == i)->size() > 0">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:ownedNodeContainer->select(v | v.target == i)->show()"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:ownedNodeContainer->select(v | v.target == i)->size() == 0">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:i">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']" containerViewExpression="var:diagram"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D PV From Project Explorer" precondition="aql:self.oclIsKindOf(capellacore::AbstractPropertyValue) or self.oclIsKindOf(capellacore::PropertyValueGroup)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:PopupMenu" name="select.menu" label="%common.cdb.select.menu">
            <menuItemDescription xsi:type="tool_1:OperationAction" name="select.elements.of.same.type" label="%common.cdb.select.elements.of.same.type" precondition="aql:not views->first().oclIsKindOf(diagram::DDiagram)" elementsToSelect="aql:diagram.getViewsRepresentingSameEType(views)">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="select.resembling.elements" label="%common.cdb.select.resembling.elements" precondition="aql:not views->first().oclIsKindOf(diagram::DDiagram)" elementsToSelect="aql:diagram.getViewsWithSameMapping(views)">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="select.owned.ports" label="%common.cdb.select.owned.ports" precondition="aql:not views->select(w | w.oclIsKindOf(diagram::AbstractDNode) and not w.actualMapping.getAllBorderedNodeMappings()->isEmpty())->isEmpty()" elementsToSelect="aql:diagram.getAllOwnedPorts(views)">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="select.owned.elements" label="%common.cdb.select.owned.elements" precondition="aql:not views->filter(diagram::DNodeContainer)->isEmpty()" elementsToSelect="aql:diagram.getAllOwnedElements(views)">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="select.related.connections" label="%common.cdb.select.related.connections" precondition="aql:not views->select(w | w.oclIsKindOf(diagram::AbstractDNode))->isEmpty()" elementsToSelect="aql:diagram.getAllEdges(views)">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self"/>
              </initialOperation>
            </menuItemDescription>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" documentation="Delete the content properies of an Element Title Block cell." name="Delete Title Block Cell" precondition="aql:not (self.isDiagramTitleBlock())" forceRefresh="true">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.clearCellContent()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" documentation="Delete a Diagram Title Block or an Element Title Block." name="Delete Title Block" precondition="service:self.isTitleBlockContainer()">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="deleteCapellaElement" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:containerView">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.deleteTitleBlock(element)"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates a graphical object corresponding to a Diagram Title Block which will display information related to the current diagram. The displayed data is configurable via the Capella Preferences page. The Diagram Title Block does not have a corresponding semantic object." name="diagram.title.block" label="%common.cdb.diagram.title.block" precondition="service:containerView.isValidCreateDiagramTitleBlock()" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/TitleBlock_16.gif">
            <element name="container"/>
            <elementView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:containerView">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not self.deactivateDiagramTitleBlockFilter()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.hasADiagramTitleBlock()">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectTitleBlocks" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                      <parameters name="context" value="aql:containerView"/>
                      <parameters name="scope" value="aql:containerView.getDiagramTitleBlocks()"/>
                      <parameters name="resultVariable" value="selectedTitleBlocks"/>
                      <parameters name="wizardMessage" value="aql:'Diagram Title Block already exists but is hidden. Select to unhide it.'"/>
                      <parameters name="initialSelection" value="aql:self.void2Null(containerView.getVisibleDiagramTitleBlocks())"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedTitleBlocks = 'WIZARD_CANCELED')">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideDiagramTitleBlocks(selectedTitleBlocks,diagram)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not self.hasADiagramTitleBlock()">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createDiagramTitleBlock()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="ElementTitleBlock">
            <tools xsi:type="tool_1:ToolDescription" documentation="Creates a graphical object corresponding to an Element Title Block which will display information related to the current element to which the Element Title Block is applied. The Element Title Block does not have a corresponding semantic object." name="element.title.block" label="%common.cdb.element.title.block" precondition="service:containerView.isValidCreateElementTitleBlock()" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/TitleBlock_16.gif">
              <element name="container"/>
              <elementView name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:containerView">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not self.deactivateElementTitleBlockFilter()">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.hasAElementTitleBlock()">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectTitleBlocks" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                        <parameters name="context" value="aql:containerView"/>
                        <parameters name="scope" value="aql:self.getAvailableToInsertElementTitleBlocks(diagram)"/>
                        <parameters name="resultVariable" value="selectedTitleBlocks"/>
                        <parameters name="wizardMessage" value="aql:'Element Title Block already exists but is hidden. Select to unhide it.'"/>
                        <parameters name="initialSelection" value="aql:self.void2Null(containerView.getVisibleElementTitleBlocks())"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedTitleBlocks = 'WIZARD_CANCELED')">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideElementTitleBlocks(selectedTitleBlocks,diagram)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not self.hasAElementTitleBlock()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createElementTitleBlock(diagram)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ToolDescription" documentation="Creates a new line that will be inserted under the line of the currently selected cell of the Element Title Block." name="element.title.block.line" label="%common.cdb.element.title.block.line" precondition="service:containerView.isValidInsertLineOrColumn()" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/TitleBlockLine_16.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.insertTitleBlockLine(diagram)"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ToolDescription" documentation="Creates a new column that will be inserted to the right of the column of the currently selected cell of the Element Title Block." name="element.title.block.column" label="%common.cdb.element.title.block.column" precondition="service:containerView.isValidInsertLineOrColumn()" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/TitleBlockColumn_16.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.insertTitleBlockColumn(diagram)"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ToolDescription" documentation="Removes the line that contains the currently selected cell of the Element Title Block." name="remove.element.title.block.line" label="%common.cdb.remove.element.title.block.line" precondition="service:containerView.isValidRemoveLineOfElementTitleBlock()" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/TitleBlockLineRemove_16.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.removeLineOfTitleBlock(diagram)"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ToolDescription" documentation="Removes the column that contains the currently selected cell of the Element Title Block." name="remove.element.title.block.column" label="%common.cdb.remove.element.title.block.column" precondition="service:containerView.isValidRemoveColumnOfElementTitleBlock()" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/TitleBlockColumnRemove_16.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:container">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.removeColumnOfTitleBlock(diagram)"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Show/Hide TitleBlocks">
            <tools xsi:type="tool_1:ToolDescription" documentation="Inserts or removes graphical objects on the diagrams corresponding to an existing Diagram Title Block. Removing a Diagram Title Block graphical object from the diagram does not delete the Diagram Title Block from the model." name="diagram.title.blocks" label="%common.cdb.diagram.title.blocks" precondition="aql:not (containerView.getDiagramContainer().isSynchronized() and (containerView.oclIsKindOf(diagram::DNodeList) or containerView.oclIsKindOf(diagram::DNodeListElement)))" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <element name="element"/>
              <elementView name="elementView">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.getParentDiagram()"/>
              </elementView>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectTitleBlocks" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:elementView"/>
                    <parameters name="scope" value="aql:elementView.getDiagramTitleBlocks()"/>
                    <parameters name="resultVariable" value="selectedTitleBlocks"/>
                    <parameters name="wizardMessage" value="aql:'Select Values to show in ' + element.name + '.'"/>
                    <parameters name="initialSelection" value="aql:self.void2Null(elementView.getVisibleDiagramTitleBlocks())"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedTitleBlocks = 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.showHideDiagramTitleBlocks(selectedTitleBlocks,diagram)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ToolDescription" documentation="Inserts or removes graphical objects on the diagrams corresponding to an existing Element Title Block applied to an element. Removing an Element Title Block graphical object from the diagram does not delete the Element Title Block from the model." name="element.title.blocks" label="%common.cdb.element.title.blocks" precondition="aql:not (containerView.getDiagramContainer().isSynchronized() and (containerView.oclIsKindOf(diagram::DNodeList) or containerView.oclIsKindOf(diagram::DNodeListElement)))" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <element name="element"/>
              <elementView name="elementView">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.getParentDiagram()"/>
              </elementView>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectTitleBlocks" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:elementView"/>
                    <parameters name="scope" value="aql:elementView.getAvailableToInsertElementTitleBlocks(diagram)"/>
                    <parameters name="resultVariable" value="selectedTitleBlocks"/>
                    <parameters name="wizardMessage" value="aql:'Select Values to show in ' + element.name + '.'"/>
                    <parameters name="initialSelection" value="aql:self.void2Null(elementView.getVisibleElementTitleBlocks())"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedTitleBlocks = 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.showHideElementTitleBlocks(selectedTitleBlocks,diagram)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
        </toolSections>
        <customization>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization" predicateExpression="aql:self.getAssociationSource().isAbstract()">
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.0/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.1/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.2/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.3/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.4/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.5/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.6/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.7/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.8/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.9/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.10/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.11/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.12/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.13/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.14/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.15/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.16/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.17/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.27/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.26/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.25/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.24/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.23/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.22/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.21/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.20/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.19/@style/@beginLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.18/@style/@beginLabelStyleDescription" attributeName="labelFormat" value="italic"/>
          </vsmElementCustomizations>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization" predicateExpression="aql:self.getAssociationTarget().isAbstract()">
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.27/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.26/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.25/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.24/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.23/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.22/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.21/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.20/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.19/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.18/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.17/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.16/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.15/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.14/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.13/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.12/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.11/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.10/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.9/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.8/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.7/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.6/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.5/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.4/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.3/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.2/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.1/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@conditionnalStyles.0/@style/@endLabelStyleDescription //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_Association']/@style/@endLabelStyleDescription" attributeName="labelFormat" value="italic"/>
          </vsmElementCustomizations>
        </customization>
      </defaultLayer>
      <additionalLayers name="Communication Model" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']" activeByDefault="true">
        <nodeMappings name="DT_ExchangeItem" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="" createElements="false" domainClass="ExchangeItem">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ExchangeItem_Pinkkish']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.isAbstract()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ExchangeItem_Pinkkish']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="DT_ExchangeItemElement" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='literal%20name']" semanticCandidatesExpression="service:diagram.getCDBExchangeItemElementSemanticCandidates" semanticElements="aql:self.makeUnion(self, self.abstractType, self.ownedMinCard, self.ownedMaxCard)" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Enumeration'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataType'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_BooleanType'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Collection']" targetFinderExpression="feature:abstractType" sourceFinderExpression="feature:eContainer" domainClass="ExchangeItemElement" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='ExchangeItemElement%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='ExchangeItemElement%20source']">
          <style lineStyle="dash">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.computeLabelWithoutType() + self.modifiersSuffix(view)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="aql:self.composite">
            <style lineStyle="dash" sourceArrow="FillDiamond">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.computeLabelWithoutType() + self.modifiersSuffix(view)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <containerMappings name="DT_InterfacePkg" detailDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Package%20Dependencies']/@defaultLayer/@toolSections.0/@ownedTools[name='Package%20Dependencies']" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" createElements="false" domainClass="InterfacePkg" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='D%26D%20Interface%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='D%26D%20InterfacePkg%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='Interface%20Into%20InterfacePkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='AbstractExchangeItem%20Into%20AbstractExchangeItemPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='InterfacePkg%20Into%20InterfacePkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.0/@ownedTools[name='D%26D%20ExchangeItem%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Package%20Dependencies']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocate%20InterfacePkg%20from%20Model']" reusedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem']" reusedContainerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@containerMappings[name='DT_InterfacePkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']">
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_InterfaceDataPackage_LightGray']">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </containerMappings>
        <toolSections name="Communication">
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Interface Package." name="interface.package" label="%common.cdb.interface.package" precondition="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(epbs::EPBSArchitecture)->size() = 0" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@containerMappings[name='DT_InterfacePkg']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassPkg.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(capellacore::ModellingArchitecture).eContents()->filter(cs::InterfacePkg)->first()">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkgs">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkgs">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Interface." name="interface" label="%common.cdb.interface" precondition="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(epbs::EPBSArchitecture)->size() = 0" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container->filter(cs::InterfacePkg)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Interface" referenceName="ownedInterfaces">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container->filter(cs::InterfacePkg)->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(capellacore::ModellingArchitecture).eContents()->filter(cs::InterfacePkg)->first()">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Interface" referenceName="ownedInterfaces">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Exchange Items">
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Exchange Item with a Communication Mechanism set to EVENT." name="event" label="%common.cdb.event" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemEvent.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="EVENT"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="EVENT"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.getDiagramContainer().isSynchronized())">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:allocation">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Exchange Item with a Communication Mechanism set to OPERATION." name="operation" label="%common.cdb.operation" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemOperation.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="OPERATION"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="OPERATION"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.getDiagramContainer().isSynchronized())">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:allocation">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Exchange Item with a Communication Mechanism set to FLOW." name="flow" label="%common.cdb.flow" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemFlow.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="FLOW"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="FLOW"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.getDiagramContainer().isSynchronized())">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:allocation">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Exchange Item with a Communication Mechanism set to SHARED_DATA." name="data" label="%common.cdb.data" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemData.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="SHARED_DATA"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="SHARED_DATA"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.getDiagramContainer().isSynchronized())">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:allocation">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Create a new Exchange Item with an UNSET Communication Mechanism." name="undefined.exchange.item" label="%common.cdb.undefined.exchange.item" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItem.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="UNSET"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="UNSET"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.getDiagramContainer().isSynchronized())">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:allocation">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a new Exchange Item Element belonging to the Source Exchange Item and typed by the Target Type." name="exchange.item.element" label="%common.cdb.exchange.item.element" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@edgeMappings[name='DT_ExchangeItemElement']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemElement" referenceName="ownedElements">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Manage Exchange Item Allocations" name="manage.exchange.item.allocations" label="%common.cdb.manage.exchange.item.allocations" precondition="aql:elementView.target.oclIsKindOf(cs::Interface)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Manage.gif">
            <element name="element">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="exchangeItems" computationExpression="feature:exchangeItems"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="exchangeItemAllocations" computationExpression="feature:ownedExchangeItemAllocations"/>
            </element>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectAllocations" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:element.getIBReuseExchangeItems()"/>
                  <parameters name="resultVariable" value="selection"/>
                  <parameters name="wizardMessage" value="Select Exchange Items to allocate."/>
                  <parameters name="initialSelection" value="aql:self.void2Null(exchangeItems)"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selection != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selection)">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (exchangeItems->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:i"/>
                          <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (elementView.getDiagramContainer().isSynchronized())">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:allocation">
                              <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:elementView"/>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(exchangeItems)">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemAllocations->select(exchangeItemAllocation | exchangeItemAllocation.allocatedItem = i)->first()">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.removeCapellaElement()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Interface Packages" name="interface.packages" label="%common.cdb.interface.packages" precondition="aql:elementView.oclIsKindOf(diagram::DDiagram) or elementView.target.oclIsKindOf(cs::InterfacePkg)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.getDiagramContainer()"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectPackages" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:elementView.getAvailableInterfacePkgsToInsert()"/>
                  <parameters name="resultVariable" value="selectedPkgs"/>
                  <parameters name="wizardMessage" value="Select Packages to show."/>
                  <parameters name="initialSelection" value="aql:self.void2Null(elementView.containers.target->filter(cs::InterfacePkg))"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedPkgs = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.showHideInterfacePkgs(selectedPkgs)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:diagram.forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Interfaces" name="interfaces" label="%common.cdb.interfaces" precondition="aql:elementView.oclIsKindOf(diagram::DDiagram) or elementView.target.oclIsKindOf(cs::InterfacePkg)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.getDiagramContainer()"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectInterfaces" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.getAvailableInterfacesToInsert()"/>
                  <parameters name="resultVariable" value="selectedInterfaces"/>
                  <parameters name="wizardMessage" value="Select Interfaces to show."/>
                  <parameters name="initialSelection" value="aql:self.void2Null(elementView.containers.target->filter(cs::Interface))"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedInterfaces = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.showHideCDBInterfaces(selectedInterfaces)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:diagram.forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Exchange Items" name="exchange.items" label="%common.cdb.exchange.items" precondition="aql:elementView.oclIsKindOf(diagram::DDiagram) or elementView.target.oclIsKindOf(capellacore::AbstractExchangeItemPkg)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.getDiagramContainer()"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectExchangeItems" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.getAvailableExchangeItemsToInsert()"/>
                  <parameters name="resultVariable" value="selectedExchangeItems"/>
                  <parameters name="wizardMessage" value="Select Exchange Items to show."/>
                  <parameters name="initialSelection" value="aql:elementView.getNodesAndNodeListElements().target->filter(information::ExchangeItem)"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedExchangeItems = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.showHideCDBExchangeItems(selectedExchangeItems)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:diagram.forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Exchange Item Element Links" name="exchange.item.element.links" label="%common.cdb.exchange.item.element.links" precondition="aql:self.oclIsKindOf(information::ExchangeItem)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <filters precondition="aql:self.isSynchronized()" elementsToListen="aql:self">
              <listeners domainClass="DDiagram" featureName="synchronized"/>
            </filters>
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectRelationships" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.getAvailableExchangeItemElementToInsert())"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(self.getExistingExchangeItemElementFromDiagram())"/>
                  <parameters name="resultVariable" value="selectedRelationships"/>
                  <parameters name="wizardMessage" value="Select Relationships to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedRelationships != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.showHideRelationshipInClassDiagramBlank(elementView,selectedRelationships)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="Delete_DataRepresentation">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="abstractType" elementExpression="aql:elementView.targetNode.target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Interface From Project Explorer" precondition="aql:element.oclIsKindOf(cs::Interface) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D ExchangeItem From Project Explorer" precondition="aql:element.oclIsKindOf(information::ExchangeItem) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D InterfacePkg From Project Explorer" precondition="aql:element.oclIsKindOf(cs::InterfacePkg) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@containerMappings[name='DT_InterfacePkg']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Interface Into InterfacePkg" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:newContainerView.target->filter(cs::InterfacePkg)->size() > 0">
                  <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:newContainerView.target" featureName="ownedInterfaces"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="AbstractExchangeItem Into AbstractExchangeItemPkg" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem']">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(newContainerView.target->filter(capellacore::AbstractExchangeItemPkg)->size() > 0) and (newContainerView->filter(diagram::DSemanticDiagram)->size() = 0)">
                  <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:newContainerView.target" featureName="ownedExchangeItems"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="DT_DataRepresentationReconnect">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:edgeView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="abstractType" elementExpression="aql:source"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="InterfacePkg Into InterfacePkg" precondition="aql:newViewContainer.target.oclIsKindOf(cs::InterfacePkg)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@containerMappings[name='DT_InterfacePkg']">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:newContainerView.target" featureName="ownedInterfacePkgs"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="ExchangeItemElement target">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="ExchangeItemElement source" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedElements"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="literal name" forceRefresh="true" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Accelerators">
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Initializes the current diagram according to an existing diagram defined in the previous architecture. It adds realizing elements for each element from the source diagram and preserves layout between diagrams. This tool does not modify the semantic model." name="initialization.from.existing.diagram" label="%common.cdb.initialization.from.existing.diagram" precondition="aql:elementView.isValidInitializeDiagramFromExistingDiagram()" iconPath="/org.eclipse.sirius.ui/icons/full/obj16/DAnalysis.gif">
            <filters precondition="aql:self.isFilterInitializeDiagramFromExistingDiagram()" elementsToListen="aql:self">
              <listeners domainClass="DDiagram" featureName="ownedDiagramElements"/>
            </filters>
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select sourceDiagram" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:diagram"/>
                  <parameters name="scope" value="aql:diagram.getScopeInitializeDiagramFromExistingDiagram()"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="sourceDiagram"/>
                  <parameters name="wizardMessage" value="Select existing diagram for initialization."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:sourceDiagram != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:diagram.initializeDiagramFromExistingDiagram(sourceDiagram)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </additionalLayers>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" name="Capella Architecture" label="%common.ca" domainClass="SystemEngineering" preconditionExpression="false">
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/ContextArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/EPBSArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaModeller.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/OperationalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/PhysicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/SharedModel.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <defaultLayer name="default">
        <toolSections name="Architectures">
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="operational.analysis" label="%common.ca.operational.analysis" precondition="aql:self.getRootContainer().eAllContents()->filter(oa::OperationalAnalysis)->size() = 0" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/OperationalAnalysis.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ancestors()->filter(capellamodeller::SystemEngineering)->first()">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="OperationalAnalysis" referenceName="ownedArchitectures">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="system.analysis" label="%common.ca.system.analysis" precondition="aql:self.getRootContainer().eAllContents()->filter(oa::OperationalAnalysis)->size() = 1 and self.getRootContainer().eAllContents()->filter(ctx::SystemAnalysis)->size() = 0" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/SystemAnalysis.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ancestors()->filter(capellamodeller::SystemEngineering)->first()">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SystemAnalysis" referenceName="ownedArchitectures">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="logical.architecture" label="%common.ca.logical.architecture" precondition="aql:self.getRootContainer().eAllContents()->filter(ctx::SystemAnalysis)->size() = 1 and self.getRootContainer().eAllContents()->filter(la::LogicalArchitecture)->size() = 0" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/LogicalArchitecture.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ancestors()->filter(capellamodeller::SystemEngineering)->first()">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="LogicalArchitecture" referenceName="ownedArchitectures">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="physical.architecture" label="%common.ca.physical.architecture" precondition="aql:self.getRootContainer().eAllContents()->filter(la::LogicalArchitecture)->size() = 1 and self.getRootContainer().eAllContents()->filter(pa::PhysicalArchitecture)->size() = 0" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/PhysicalArchitecture.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ancestors()->filter(capellamodeller::SystemEngineering)->first()">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PhysicalArchitecture" referenceName="ownedArchitectures">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="epbs.architecture" label="%common.ca.epbs.architecture" precondition="aql:self.getRootContainer().eAllContents()->filter(pa::PhysicalArchitecture)->size() = 1 and self.getRootContainer().eAllContents()->filter(epbs::EPBSArchitecture)->size() = 0" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/EPBSArchitecture.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ancestors()->filter(capellamodeller::SystemEngineering)->first()">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="EPBSArchitecture" referenceName="ownedArchitectures">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="no delete">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="NoDeleteElement" id="org.polarsys.capella.core.sirius.analysis.delete.NoDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Requirements" precondition="aql:self.isInLib()" browseExpression="aql:self" tableDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Operational Activities - Requirements" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="System Functions - Requirements" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Functions%20-%20Requirements']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Logical Functions - Requirements" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Functions%20-%20Requirements']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Logical Components - Requirements" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Components%20-%20Requirements']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Physical Functions - Requirements" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Requirements']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Physical Components - Requirements" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Requirements']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Configuration Items - Requirements" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='Configuration%20Items%20-%20Requirements']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="EPBS Requirement Refinements" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='EPBS%20Requirement%20Refinements']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Logical Architecture Requirement Refinements" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Requirement%20Refinements']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="System Functions - Operational Activities" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Functions%20-%20Operational%20Activities']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Logical Functions - System Functions" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Functions%20-%20System%20Functions']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Logical Components - Logical Functions" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Components%20-%20Logical%20Functions']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Physical Functions - Logical Functions" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Functions%20-%20Logical%20Functions']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Physical Components - Logical Components" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Logical%20Components']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Physical Components - Physical Functions" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Components%20-%20Physical%20Functions']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Configuration Items - Physical Artifacts" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='Configuration%20Items%20-%20Physical%20Artifacts']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Logical Data Flow Blank" label="" precondition="aql:self.eContainerOrSelf(la::LogicalArchitecture)->size() != 0 and self.isInLib()" titleExpression="aql:'[LDFB] ' + self.name">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Logical Function Breakdown" precondition="aql:self.isInLib()" titleExpression="aql:'[LFBD] ' + self.name">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Function%20Breakdown']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Logical Interface - Context Interface" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="tableName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Interface%20-%20Context%20Interface']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Logical Actor - Context Actor" precondition="aql:self.isInLib()">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="tableName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Actor%20-%20Context%20Actor']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Physical Data Flow Blank" precondition="aql:self.eContainerOrSelf(pa::PhysicalArchitecture)->size() != 0 and self.isInLib()" titleExpression="aql:'[PDFB] ' + self.name">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Data%20Flow%20Blank']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Physical Function Breakdown" precondition="aql:self.isInLib()" titleExpression="aql:'[PFBD] ' + self.name">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Function%20Breakdown']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Physical Interface - Logical Interface">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="tableName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Interface%20-%20Logical%20Interface']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Physical Actor - Logical Actor">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="tableName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Actor%20-%20Logical%20Actor']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="System Data Flow Blank" precondition="aql:self.isInLib()" titleExpression="aql:'[SDFB] ' + self.name">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="System Function Breakdown" precondition="aql:self.isInLib()" titleExpression="aql:'[SFBD] ' + self.name">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Function%20Breakdown']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Mission Capability Blank" precondition="aql:self.isInLib()" titleExpression="aql:'[MCB] ' + self.name">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Capabilities%20Blank']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Mission Blank" precondition="aql:self.isInLib()" titleExpression="aql:'[MB] ' + self.name">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Missions%20Blank']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Operational Activity Breakdown" precondition="aql:self.isInLib()" titleExpression="aql:'[OABD] ' + self.name">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Breakdown']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Operational Entity Breakdown" precondition="aql:self.isInLib()" titleExpression="aql:'[OEBD] ' + self.name">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Operational Activity Interaction Blank" precondition="aql:self.isInLib()" titleExpression="aql:'[OAIB] ' + self.name">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Operational Entity Blank" label="Operational Architecture Blank" precondition="aql:self.isInLib()" titleExpression="aql:'[OAB] ' + self.name">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Operational Role Blank" precondition="aql:self.isInLib()" titleExpression="aql:'[ORB] ' + self.name">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Modes &amp;&amp; States" label="Modes and states" precondition="aql:self.isInLib()" titleExpression="aql:'[M&amp;S] ' + self.name" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20%26%20States']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Class Diagram Blank" precondition="aql:self.isInLib()" titleExpression="aql:'[CDB] ' + self.name" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" documentation="toto&#xD;&#xA;" name="Component Interfaces Scenario" label="Interface Scenario" precondition="aql:self.isInLib()" titleExpression="aql:self.name.addScenarioPrefix('[IS]')" browseExpression="aql:self.ownedScenarios->last()" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Scenario" referenceName="ownedScenarios">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:diagramName"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramNavigationDescription" name="Existing Component Interfaces Scenario" label="Existing Interface Scenario" navigationNameExpression="" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Component Exchanges Scenario" label="Exchange Scenario" precondition="aql:self.isInLib()" titleExpression="aql:self.name.addScenarioPrefix('[ES]')" browseExpression="aql:self.ownedScenarios->last()" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Scenario" referenceName="ownedScenarios">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:diagramName"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramNavigationDescription" name="Existing Component Exchanges Scenario" label="Existing Exchange Scenario" navigationNameExpression="" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="System Actor - Operational Actor">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="tableName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Actor%20-%20Operational%20Actor']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Interfaces - Capabilities">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="tableName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Interfaces%20-%20Capabilities']"/>
          </ownedTools>
          <ownedTools xsi:type="description_3:TableCreationDescription" name="Interfaces - Capabilities and Scenarios">
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="tableName"/>
            <tableDescription xsi:type="description_3:CrossTableDescription" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Interfaces%20-%20Capabilities%20and%20Scenarios']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" documentation="toto&#xD;&#xA;" name="Functional Scenario" precondition="aql:self.isInLib()" titleExpression="aql:self.name.addScenarioPrefix('[FS]')" browseExpression="aql:self.ownedScenarios->last()" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']">
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Scenario" referenceName="ownedScenarios">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:diagramName"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramNavigationDescription" name="Existing Functional Scenario" navigationNameExpression="" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='InterfaceDrop%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraint%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']" name="Contextual Component Detailed Interfaces" label="%common.cdi" titleExpression="aql:'[CDI] ' + self.name" domainClass="capellacore::Namespace" preconditionExpression="aql:self.getComponentType()->select(x | x->filter(ctx::SystemComponent)->size() > 0 or x->filter(la::LogicalComponent)->size() > 0 or x->filter(pa::PhysicalComponent)->size() > 0)->size() > 0" defaultConcern="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@concerns/@ownedConcernDescriptions.0">
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/ContextArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/EPBSArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaModeller.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/OperationalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/PhysicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/SharedModel.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.interface.contents.filter" label="%common.cdi.hide.interface.contents.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Attribute1']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.interfaces.filter" label="%common.cdi.hide.interfaces.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.exchange.items.details.in.interfaces.filter" label="%common.cdi.hide.exchange.items.details.in.interfaces.filter">
        <filters xsi:type="filter:MappingFilter"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.exchange.item.elements.filter" label="%common.cdi.hide.exchange.item.elements.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']/@subNodeMappings[name='CCDI_ExchangeItemElement']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.exchange.items.filter" label="%common.cdi.hide.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_CommunicationLink'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.component.ports.filter" label="%common.cdi.hide.component.ports.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']/@borderedNodeMappings[name='CCDI_Port']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.use.links.filter" label="%common.cdi.hide.use.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='use1']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.implmentation.links.filter" label="%common.cdi.hide.implmentation.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='imp1']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.provide.links.filter" label="%common.cdi.hide.provide.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_PinProvidedInterface']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.require.links.filter" label="%common.cdi.hide.require.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_PinRequiredInterface']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.communication.links.filter" label="%common.cdi.hide.communication.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_CommunicationLink']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.generalization.links.filter" label="%common.cdi.hide.generalization.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_Generalization']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.technical.interfaces.filter" label="%common.cdi.hide.technical.interfaces.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']" semanticConditionExpression="aql:self.structural"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.modifiers.filter" label="%common.cdi.show.modifiers.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Dummy']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%common.cdi.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:self.isDiagramTitleBlock()"/>
      </filters>
      <concerns>
        <ownedConcernDescriptions name="default" filters="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@filters[name='hide.technical.interfaces.filter']"/>
      </concerns>
      <defaultLayer name="default layer System Interface 1" label="default" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='constraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='constraint.element'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='constraints'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Delete%20Constraint%20Elements'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Constraint%20Content'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='CB%20Reconnect%20Constraint%20Elements']">
        <edgeMappings name="use1" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBInterfaceUseSemanticCandidates" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']" targetFinderExpression="feature:usedInterface" sourceFinderExpression="feature:interfaceUser" domainClass="InterfaceUse" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='used-pinrequired%20source'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='uses%20target']">
          <style lineStyle="dash_dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="imp1" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBInterfaceImplementationSemanticCandidates" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']" targetFinderExpression="feature:implementedInterface" sourceFinderExpression="feature:interfaceImplementor" domainClass="InterfaceImplementation" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='implements%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='implements-pinprovided%20source']">
          <style lineStyle="dash" targetArrow="InputClosedArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCDI_PinRequiredInterface" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CCDI_RequiredInterface']" semanticCandidatesExpression="feature:eAllContents" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']/@borderedNodeMappings[name='CCDI_Port']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']" targetFinderExpression="feature:requiredInterfaces" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='PinRequiredInterface%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='used-pinrequired%20source']" pathExpression="">
          <style lineStyle="dash_dot" endsCentering="Source">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCDI_PinProvidedInterface" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CCDI_ProvidedInterface']" semanticCandidatesExpression="feature:eAllContents" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']/@borderedNodeMappings[name='CCDI_Port']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']" targetFinderExpression="feature:providedInterfaces" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='PinProvidedInterface%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='implements-pinprovided%20source']">
          <style lineStyle="dash" targetArrow="InputClosedArrow" endsCentering="Source">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCDI_Generalization" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBGeneralizationSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']" targetFinderExpression="feature:super" sourceFinderExpression="feature:eContainer" domainClass="Generalization" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CB%20Reconnect%20Generalization%20Target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CB%20Reconnect%20Generalization%20Source']">
          <style targetArrow="InputClosedArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCDI_CommunicationLink" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBCommunicationLinkSemanticCandidates" semanticElements="aql:self.makeUnion(self, self.exchangeItem)" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']" targetFinderExpression="feature:exchangeItem" sourceFinderExpression="feature:eContainer" domainClass="CommunicationLink" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CommunicationLink%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CommunicationLink%20source']">
          <style lineStyle="dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription labelExpression="aql:self.getCommunicationLinkLabel()">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="FullInterface1" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="" createElements="false" domainClass="Interface" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Model']" reusedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@nodeMappings[name='DT_ExchangeItem']" reusedContainerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']" childrenPresentation="List">
          <subNodeMappings name="DT_Attribute1" preconditionExpression="aql:self.association = null" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" semanticCandidatesExpression="feature:ownedFeatures" domainClass="Property">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.multiplicityToString() + ' ' + self.maxCard.value + ' feature:name' + if (self.type != null) then ' : ' + self.type.name endif" labelAlignment="LEFT" sizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </subNodeMappings>
          <subNodeMappings name="DT_Operation1" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20DirectEdit']" semanticCandidatesExpression="feature:ownedExchangeItemAllocations" semanticElements="aql:self.makeUnion(self, self.allocatedItem, self.allocatedItem.ownedElements)" domainClass="CapellaElement" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Diagram']">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getOperationLabel(view)" labelAlignment="LEFT" sizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Pink']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.abstract = true">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="GradientTopToBottom" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Pink']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <containerMappings name="System 1" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="aql:self.eContainerOrSelf(cs::Component)" domainClass="Component" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='ComponentPort%20from%20Model']" reusedContainerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']">
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Component%20Breakdown']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20System%20Actors']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20System%20Actors']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='System%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='Configuration%20Items%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Configuration%20Items%20BreakDown']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='EPBS%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='EPBS%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Component%20Breakdown']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Detailed%20Interfaces']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20External%20Interfaces']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Internal%20Interfaces']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Interfaces%20Diagram%20Blank']"/>
          <detailDescriptions xsi:type="description_3:TableCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Delegations']/@ownedRepresentationCreationDescriptions[name='Interface%20delegations']"/>
          <borderedNodeMappings name="CCDI_Port" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="aql:self.ownedFeatures->filter(fa::ComponentPort)" domainClass="ComponentPort">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPortSmall.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
            <conditionnalStyles predicateExpression="aql:self.requiredInterfaces->size() > 0 and self.providedInterfaces->size() > 0 and self.kind = fa::ComponentPortKind::STANDARD">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPort_providedrequired.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.requiredInterfaces->size() > 0 and self.providedInterfaces->size() = 0 and self.kind = fa::ComponentPortKind::STANDARD">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPort_required.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.requiredInterfaces->size() = 0 and self.providedInterfaces->size() > 0 and self.kind = fa::ComponentPortKind::STANDARD">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPort_provided.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isInStrictFlowPort()">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/InFlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isOutStrictFlowPort()">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/OutFlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isInoutStrictFlowPort()">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
          </borderedNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'System') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'Entity') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'Entity') and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'Entity') and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(cs::Component)->select(c | c.isActor())->size() > 0) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(cs::Component)->select(c | c.isActor())->size() > 0) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(cs::Component)->select(c | c.isActor())->size() > 0) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(epbs::ConfigurationItem)->size() > 0) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(epbs::ConfigurationItem)->size() > 0) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(epbs::ConfigurationItem)->size() > 0) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']"/>
          </conditionnalStyles>
        </containerMappings>
        <containerMappings name="CCDI_ExchangeItem" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" createElements="false" domainClass="ExchangeItem" childrenPresentation="List">
          <subNodeMappings name="CCDI_ExchangeItemElement" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="feature:ownedElements" semanticElements="aql:self.makeUnion(self, self.ownedMinCard, self.ownedMaxCard)" domainClass="ExchangeItemElement">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.computeLabel() + self.modifiersSuffix(view)" labelAlignment="LEFT">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Pink']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
          <conditionnalStyles predicateExpression="service:isAbstract()">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Pink']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <toolSections name="Detailed Interfaces">
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates an Interface" name="interface" label="%common.cdi.interface" precondition="aql:containerView.isValidCreationCCDIInterface()" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Interface.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.createCCDIInterface()"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Ports">
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind FLOW and a direction IN" name="in.flow.port" label="%common.cdi.in.flow.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']/@borderedNodeMappings[name='CCDI_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FlowPortIn.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="FLOW"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="orientation" valueExpression="IN"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind FLOW and a direction OUT" name="out.flow.port" label="%common.cdi.out.flow.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']/@borderedNodeMappings[name='CCDI_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FlowPortOut.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="FLOW"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="orientation" valueExpression="OUT"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind FLOW and a direction INOUT" name="in.out.flow.port" label="%common.cdi.in.out.flow.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']/@borderedNodeMappings[name='CCDI_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FlowPort.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="FLOW"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="orientation" valueExpression="INOUT"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind STANDARD and a direction UNSET" name="standard.port" label="%common.cdi.standard.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']/@borderedNodeMappings[name='CCDI_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/StandardPort.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="STANDARD"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Implements/Uses">
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates an Implementation relationship from a Component to an Interface" name="implements" label="%common.cdi.implements" precondition="aql:not (preSource.implementedInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='imp1']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Implement.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceImplementation" referenceName="ownedInterfaceImplementations">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates an Use relationship from a Component to an Interface" name="uses" label="%common.cdi.uses" precondition="aql:not (preSource.usedInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='use1']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Use.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceUse" referenceName="ownedInterfaceUses">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:target"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Provides/Requires">
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Require relationship from a Component Port to an Interface" name="requires" label="%common.cdi.requires" precondition="aql:not (preSource.ancestors()->includes(preTarget)) and not (preTarget.ancestors()->includes(preSource)) and not (preSource.oclIsKindOf(fa::ComponentPort) and preSource.requiredInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_PinRequiredInterface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Require.gif" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceRequiresCreation" computationExpression="aql:not (source.oclIsKindOf(information::Port))"/>
              </sourceVariable>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures" variableName="source">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="STANDARD"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']/@borderedNodeMappings[name='CCDI_Port']" containerViewExpression="aql:sourceView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:self.makeUnion(source.requiredInterfaces, target)"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:sourceRequiresCreation">
                      <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_PinRequiredInterface']" containerViewExpression="aql:sourceView.getDiagramContainer()" sourceExpression="aql:source" targetExpression="aql:target"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceView.refreshElement()"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Provide relationship from a Component Port to an Interface" name="provides" label="%common.cdi.provides" precondition="aql:not (preSource.ancestors()->includes(preTarget)) and not (preTarget.ancestors()->includes(preSource)) and not (preSource.oclIsKindOf(fa::ComponentPort) and preSource.providedInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_PinProvidedInterface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Provide.gif" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceRequiresCreation" computationExpression="aql:not (source.oclIsKindOf(information::Port))"/>
              </sourceVariable>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures" variableName="source">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="STANDARD"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']/@borderedNodeMappings[name='CCDI_Port']" containerViewExpression="aql:sourceView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:self.makeUnion(source.providedInterfaces, target)"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:sourceRequiresCreation">
                      <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_PinProvidedInterface']" containerViewExpression="aql:sourceView.getDiagramContainer()" sourceExpression="aql:source" targetExpression="aql:target"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceView.refreshElement()"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Generalization relationship (inheritance) between two Components or between two Interfaces" name="generalization" label="%common.cdi.generalization" precondition="aql:self.canReconnectGeneralization(preSource,preTarget)" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_Generalization']" connectionStartPrecondition="aql:self.preGeneralization(preSource)">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="capellacore.Generalization" referenceName="ownedGeneralizations">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="super" valueExpression="aql:target"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="sub" valueExpression="aql:source"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Exchange Items">
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to EVENT" name="event" label="%common.cdi.event" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemEvent.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="EVENT"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="EVENT"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to OPERATION" name="operation" label="%common.cdi.operation" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemOperation.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="OPERATION"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="OPERATION"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to FLOW" name="flow" label="%common.cdi.flow" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemFlow.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()">
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="FLOW"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="FLOW"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to SHARED DATA" name="data" label="%common.cdi.data" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemData.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()">
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="SHARED_DATA"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="SHARED_DATA"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to UNSET" name="undefined.exchange.item" label="%common.cdi.undefined.exchange.item" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItem.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()">
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="UNSET"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="UNSET"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Create a new Exchange Item Element in the selected Exchange Item. This tool opens a selection wizard to select the type of the Exchange Item Element." name="exchange.item.element" label="%common.cdi.exchange.item.element" precondition="aql:self.oclIsKindOf(cs::ExchangeItemAllocation) or self.oclIsKindOf(information::ExchangeItem)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Parameter.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(cs::ExchangeItemAllocation)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:element"/>
                    <parameters name="variable" value="newContainer"/>
                    <parameters name="value" value="feature:allocatedItem"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(information::ExchangeItem)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:element"/>
                    <parameters name="variable" value="newContainer"/>
                    <parameters name="value" value="aql:self"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:newContainer">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemElement" referenceName="ownedElements"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select Type" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                      <parameters name="context" value="aql:element"/>
                      <parameters name="scope" value="aql:self.getExchangeItemElementTypes()"/>
                      <parameters name="multiple" value="false"/>
                      <parameters name="resultVariable" value="type"/>
                      <parameters name="wizardMessage" value="Select type of ExchangeItemElement."/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:type != 'WIZARD_CANCELED'">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:type"/>
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Edit parameter" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.EditCapellaPropertyWizard">
                        <parameters name="context" value="aql:instance"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element.oclIsKindOf(information::ExchangeItem)">
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']/@subNodeMappings[name='CCDI_ExchangeItemElement']" containerViewExpression="aql:elementView"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="refreshElement" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.RefreshElement">
                        <parameters name="context" value="aql:elementView"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:type = 'WIZARD_CANCELED'">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Transmit/Acquire">
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Communication Link (Send/Produce/Call/Write) from a Component to an Exchange Item" name="transmit" label="%common.cdi.transmit" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_CommunicationLink']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CommunicationLink.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::OPERATION">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="CALL"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::EVENT">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="SEND"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::FLOW">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="PRODUCE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::SHARED_DATA">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="WRITE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::UNSET">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="TRANSMIT"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Communication Link (Receive/Consume/Execute/Access) from a Component to an Exchange Item" name="acquire" label="%common.cdi.acquire" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_CommunicationLink']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CommunicationLink.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::OPERATION">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="EXECUTE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::EVENT">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="RECEIVE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::FLOW">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="CONSUME"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::SHARED_DATA">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ACCESS"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::UNSET">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ACQUIRE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates an allocation relationship from an Interface to an Exchange Item. An Exchange Item can be allocated to several Interfaces." name="manage.exchange.item.allocations" label="%common.cdi.manage.exchange.item.allocations" precondition="aql:elementView.target.oclIsKindOf(cs::Interface)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Manage.gif">
            <element name="element">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="exchangeItems" computationExpression="feature:exchangeItems"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="exchangeItemAllocations" computationExpression="feature:ownedExchangeItemAllocations"/>
            </element>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectAllocations" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:element.getIBReuseExchangeItems()"/>
                  <parameters name="resultVariable" value="selection"/>
                  <parameters name="wizardMessage" value="aql:'Select Exchange Items to allocate to ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(exchangeItems)"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selection != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selection)">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (exchangeItems->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:i"/>
                          <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (elementView.getDiagramContainer().isSynchronized())">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:allocation">
                              <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:elementView"/>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(exchangeItems)">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemAllocations->select(exchangeItemAllocation | exchangeItemAllocation.allocatedItem = i)->first()">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.removeCapellaElement()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="ShowHide InterfaceRelated">
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Insert/Remove Interfaces. Removing an Interface graphical object from a diagram does not delete the Interface from the model. This tool does not modify the semantic model." name="interfaces" label="%common.cdi.interfaces" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <variable name="container"/>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="ownedNodes" computationExpression="aql:containerView.getOwnedAbstractNodes()"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleTargets" computationExpression="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.visible).target)"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="scope" computationExpression="aql:containerView.target.getCCEIInsertInterface()"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="message" computationExpression="aql:'Select Interfaces to show in ' + container.name + '.'"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="context" computationExpression="aql:containerView.target"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="false">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                      <parameters name="context" value="aql:context"/>
                      <parameters name="scope" value="aql:scope"/>
                      <parameters name="resultVariable" value="selection"/>
                      <parameters name="wizardMessage" value="aql:message"/>
                      <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection = 'WIZARD_CANCELED')">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                        <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(self.makeDiff(self.getIntersection(visibleTargets,scope), selection))">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:ownedNodes->select(ownedNode | ownedNode.target = i).hide()"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selection)">
                          <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                            <parameters name="context" value="aql:container"/>
                            <parameters name="variable" value="targetView"/>
                            <parameters name="value" value="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = i))"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView != null">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:targetView.show()"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView = null">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:i">
                              <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']" containerViewExpression="aql:containerView"/>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="true">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                      <parameters name="context" value="aql:context"/>
                      <parameters name="scope" value="aql:scope"/>
                      <parameters name="resultVariable" value="selection"/>
                      <parameters name="wizardMessage" value="aql:message"/>
                      <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selection != 'WIZARD_CANCELED')">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideInterfaces(selection,scope,diagram)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Insert/Remove Exchange Items Allocations. Removing an Exchange Item Allocation graphical object from a diagram does not delete the Exchange Item Allocation from the model. This tool does not modify the semantic model. An Exchange Item allocation is a reference relationship from an Interface to an Exchange Item." name="exchange.item.allocations" label="%common.cdi.exchange.item.allocations" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="feature:synchronized" elementsToListen="aql:self">
                <listeners domainClass="DDiagram" featureName="synchronized"/>
              </filters>
              <variable name="container"/>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="displayedOperations" computationExpression="aql:self.void2Null(self.getOwnedNodeListElements().target->filter(cs::ExchangeItemAllocation))"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:containerView.getDiagramContainer()"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectOperations" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="aql:container.ownedExchangeItemAllocations"/>
                    <parameters name="initialSelection" value="aql:displayedOperations"/>
                    <parameters name="resultVariable" value="selectedOperations"/>
                    <parameters name="wizardMessage" value="aql:'Select ExchangeItem allocations to show in ' + container.name + '.'"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedOperations != 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideOperations(selectedOperations,diagram)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" documentation="Insert/Remove " name="ShowHide ExchangeItemRelated">
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Insert/Remove Exchange Items. Removing an Exchange Item graphical object from a diagram does not delete the Exchange Item from the model. This tool does not modify the semantic model." name="exchange.items" label="%common.cdi.exchange.items" precondition="aql:containerView.oclIsKindOf(diagram::DDiagram) and not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <variable name="container"/>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="displayedOperations" computationExpression="aql:containerView.getDiagramContainer().getAllAbstractNodes().target->filter(information::ExchangeItem)"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:containerView.getDiagramContainer()"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.target">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectOperations" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="aql:self.getIBShowHideExchangeItems()"/>
                    <parameters name="initialSelection" value="aql:displayedOperations"/>
                    <parameters name="resultVariable" value="selectedOperations"/>
                    <parameters name="wizardMessage" value="aql:'Select ExchangeItems to show in ' + container.name + '.'"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedOperations != 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideExchangeItems(selectedOperations,diagram)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Insert/Remove Exchange Items Elements. Removing an Exchange Item Element graphical object from a diagram does not delete the Exchange Item Element from the model. This tool does not modify the semantic model." name="exchange.item.elements" label="%common.cdi.exchange.item.elements" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem']/@subNodeMappings[name='CCDI_ExchangeItemElement']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="feature:synchronized" elementsToListen="aql:self">
                <listeners domainClass="DDiagram" featureName="synchronized"/>
              </filters>
              <variable name="container"/>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="displayedOperations" computationExpression="aql:self.void2Null(containerView.getOwnedNodeListElements().target->filter(information::ExchangeItemElement))"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:containerView.getDiagramContainer()"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectOperations" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="aql:container.ownedElements"/>
                    <parameters name="initialSelection" value="aql:displayedOperations"/>
                    <parameters name="resultVariable" value="selectedOperations"/>
                    <parameters name="wizardMessage" value="aql:'Select ExchangeItemElement to show in ' + container.name + '.'"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedOperations != 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideOperations(selectedOperations,diagram)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Contextual Component Detailed Interfaces" precondition="aql:self.isInLib() and self.getComponentType()->select(x | x->filter(la::LogicalComponent)->size() > 0 or x->filter(pa::PhysicalComponent)->size() > 0 or x->filter(epbs::ConfigurationItem)->size() > 0)->size() > 0" titleExpression="aql:'[CDI] ' + self.name" browseExpression="aql:self.getComponentType()" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="delete capella elements">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="deleteCapellaElement" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="CCDI_ProvidedInterface" precondition="true">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="providedInterfaces" elementExpression="aql:elementView.targetNode.target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="CCDI_RequiredInterface" precondition="true">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="requiredInterfaces" elementExpression="aql:elementView.targetNode.target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="NamedElement DirectEdit" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="Allocation DirectEdit" inputLabelExpression="aql:self.allocatedItem.name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.allocatedItem">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="implements target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and not (self.eContainer().implementedInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceUse)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceImplementation)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="uses target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and not (self.eContainer().usedInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceUse)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceImplementation)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="PinRequiredInterface target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and not (self.requiredInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:edgeView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="requiredInterfaces" elementExpression="aql:source"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="PinProvidedInterface target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and not (self.providedInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:edgeView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="providedInterfaces" elementExpression="aql:source"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="implements-pinprovided source" precondition="aql:source.linkReconnectSource(source,target)" forceRefresh="true" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceImplementation" referenceName="ownedInterfaceImplementations">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:edgeView.targetNode.target"/>
                        <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='imp1']" containerViewExpression="aql:edgeView.getDiagramContainer()" sourceExpression="aql:target" targetExpression="aql:edgeView.targetNode.target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_PinProvidedInterface']" containerViewExpression="aql:edgeView.getDiagramContainer()" sourceExpression="aql:target" targetExpression="aql:edgeView.targetNode.target"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(fa::ComponentPort)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:Unset" featureName="providedInterfaces" elementExpression="aql:edgeView.targetNode.target"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceImplementation" referenceName="ownedInterfaceImplementations">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:edgeView.targetNode.target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="used-pinrequired source" precondition="aql:source.linkReconnectSource(source,target)" forceRefresh="true" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceUse" referenceName="ownedInterfaceUses">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:edgeView.targetNode.target"/>
                        <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='use1']" containerViewExpression="aql:edgeView.getDiagramContainer()" sourceExpression="aql:target" targetExpression="aql:edgeView.targetNode.target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@edgeMappings[name='CCDI_PinRequiredInterface']" containerViewExpression="aql:edgeView.getDiagramContainer()" sourceExpression="aql:target" targetExpression="aql:edgeView.targetNode.target"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(fa::ComponentPort)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:Unset" featureName="requiredInterfaces" elementExpression="aql:edgeView.targetNode.target"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceUse" referenceName="ownedInterfaceUses">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:edgeView.targetNode.target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CB Reconnect Generalization Target" precondition="aql:self.canReconnectGeneralization(element.sub,target)">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="super" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CB Reconnect Generalization Source" precondition="aql:self.canReconnectGeneralization(target,element.super)" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="sub" valueExpression="aql:target"/>
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedGeneralizations"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CommunicationLink target" precondition="aql:target.oclIsKindOf(information::ExchangeItem) and not (element.eContainer().ownedCommunicationLinks->select(ownedCommunicationLink | ownedCommunicationLink.kind = element.kind and ownedCommunicationLink.exchangeItem = target)->size() > 0)">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeItem" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CommunicationLink source" precondition="aql:source.oclIsKindOf(communication::CommunicationLinkExchanger) and target.ownedCommunicationLinks->select(ownedCommunicationLink | ownedCommunicationLink.kind = element.kind and ownedCommunicationLink.exchangeItem = element.exchangeItem)->size() = 0" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedCommunicationLinks"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="ComponentPort from Model" precondition="aql:element.isValidIDDndComponentPortFromModel(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='System%201']/@borderedNodeMappings[name='CCDI_Port']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDComponentPortFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Allocation ExchangeItem from Model" precondition="aql:element.isValidIDDndAllocationExchangeItemFromModel(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDAllocationExchangeItemFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Allocation ExchangeItem from Diagram" precondition="aql:element.isValidIDDndAllocationExchangeItemFromDiagram(newViewContainer,oldContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='CCDI_ExchangeItem'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDAllocationExchangeItemFromDiagram(newViewContainer,oldContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="InterfaceDrop from Model" precondition="aql:element.isValidIDDndInterfaceFromModel(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDInterfaceFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Constraint From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Relationships" name="relationships" label="%common.cdi.relationships" precondition="aql:not (elementView.oclIsKindOf(diagram::DDiagram)) and (self.oclIsKindOf(cs::Component) or self.oclIsKindOf(fa::ComponentPort) or self.oclIsKindOf(cs::Interface))" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" label="setVariable $scope" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                  <parameters name="context" value="var:elementView"/>
                  <parameters name="variable" value="scope"/>
                  <parameters name="value" value="service:getIDInsertRemoveRelationshipsScope"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" label="setVariable $initialSelection" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                  <parameters name="context" value="var:elementView"/>
                  <parameters name="variable" value="initialSelection"/>
                  <parameters name="value" value="service:getIDInsertRemoveRelationshipsInitialSelection(scope)"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectInterfaces" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizardIDB">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="var:scope"/>
                  <parameters name="initialSelection" value="var:initialSelection"/>
                  <parameters name="resultVariable" value="selectedInterfaces"/>
                  <parameters name="wizardMessage" value="aql:'Select elements to show in ' + element.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedInterfaces != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.insertRemoveIDRelationships(scope,initialSelection,selectedInterfaces)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Common" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%common.cdi.constraint" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%common.cdi.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%common.cdi.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='InterfaceDrop%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraint%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']" name="Contextual Component External Interfaces" label="%common.cei" titleExpression="aql:'[CEI] ' + self.name" domainClass="capellacore::Namespace" preconditionExpression="aql:self.getComponentType()->select(x | x->filter(ctx::SystemComponent)->size() > 0 or x->filter(la::LogicalComponent)->size() > 0 or x->filter(pa::PhysicalComponent)->size() > 0)->size() > 0" defaultConcern="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@concerns/@ownedConcernDescriptions.0">
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/ContextArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/EPBSArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaModeller.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/OperationalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/PhysicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/SharedModel.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.interfaces.filter" label="%common.cei.hide.interfaces.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.exchange.item.allocation.filter" label="%common.cei.hide.exchange.item.allocation.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_EIAllocation']" viewConditionExpression="aql:self.hasExchangeItemAllocationLink()"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.exchange.items.filter" label="%common.cei.hide.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_CommunicationLink'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.component.ports.filter" label="%common.cei.hide.component.ports.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']/@borderedNodeMappings[name='CCEI_Port']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.use.links.filter" label="%common.cei.hide.use.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CA_use2']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.implmentation.links.filter" label="%common.cei.hide.implmentation.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CA_imp2']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.provide.links.filter" label="%common.cei.hide.provide.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_PinProvidedInterface']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.require.links.filter" label="%common.cei.hide.require.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_PinRequiredInterface']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.communication.links.filter" label="%common.cei.hide.communication.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_CommunicationLink']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.generalization.links.filter" label="%common.cei.hide.generalization.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_Generalization']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.simplified.component.interactions.filter" label="%common.cei.hide.simplified.component.interactions.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_FilteredLabel']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.technical.interfaces.filter" label="%common.cei.hide.technical.interfaces.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']" semanticConditionExpression="aql:self.structural"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%common.cei.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:self.isDiagramTitleBlock()"/>
      </filters>
      <concerns>
        <ownedConcernDescriptions name="default" filters="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@filters[name='hide.simplified.component.interactions.filter'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@filters[name='hide.technical.interfaces.filter']"/>
      </concerns>
      <defaultLayer name="default" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']">
        <nodeMappings name="CA_Interface" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="" createElements="false" domainClass="Interface" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Model']">
          <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="4" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Interface.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.isAbstract() = true and self.structural = true">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="4" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Interface.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.isAbstract() = true and self.structural = false">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="4" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Interface.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.isAbstract() = false and self.structural = true">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="4" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Interface.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.isAbstract() = false and self.structural = false">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="4" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Interface.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings name="CCEI_ExchangeItem" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" createElements="false" domainClass="ExchangeItem">
          <borderedNodeMappings name="CCEI_ExchangeItem" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" createElements="false" domainClass="ExchangeItem">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ExchangeItem_Pinkkish']">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
            <conditionnalStyles predicateExpression="service:isAbstract()">
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ExchangeItem_Pinkkish']">
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
          </borderedNodeMappings>
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ExchangeItem_Pinkkish']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="service:isAbstract()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ExchangeItem_Pinkkish']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="CA_use2" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBInterfaceUseSemanticCandidates" semanticElements="" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']" targetFinderExpression="feature:usedInterface" sourceFinderExpression="feature:interfaceUser" domainClass="InterfaceUse" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='uses%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='used-pinrequired%20source']">
          <style lineStyle="dash_dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CA_imp2" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBInterfaceImplementationSemanticCandidates" semanticElements="" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']" targetFinderExpression="feature:implementedInterface" sourceFinderExpression="feature:interfaceImplementor" domainClass="InterfaceImplementation" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='implements-pinprovided%20source'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='implements%20target']">
          <style lineStyle="dash" targetArrow="InputClosedArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CA_Actor_Generalization" preconditionExpression="false" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" createElements="false" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" targetFinderExpression="feature:super" sourceFinderExpression="feature:eContainer" domainClass="Generalization" useDomainElement="true">
          <style targetArrow="InputClosedArrow" routingStyle="tree">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCEI_PinRequiredInterface" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CCEI_RequiredInterface']" semanticCandidatesExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture).eAllContents(information::Port)" semanticElements="" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']/@borderedNodeMappings[name='CCEI_Port']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']" targetFinderExpression="feature:requiredInterfaces" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='PinRequiredInterface%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='used-pinrequired%20source']" pathExpression="">
          <style lineStyle="dash_dot" endsCentering="Source">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCEI_PinProvidedInterface" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CCEI_ProvidedInterface']" semanticCandidatesExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture).eAllContents(information::Port)" semanticElements="" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']/@borderedNodeMappings[name='CCEI_Port']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']" targetFinderExpression="feature:providedInterfaces" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='PinProvidedInterface%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='implements-pinprovided%20source']">
          <style lineStyle="dash" targetArrow="InputClosedArrow" endsCentering="Source">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCEI_Generalization" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBGeneralizationSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']" targetFinderExpression="feature:super" sourceFinderExpression="feature:eContainer" domainClass="Generalization" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CB%20Reconnect%20Generalization%20Target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CB%20Reconnect%20Generalization%20Source']">
          <style targetArrow="InputClosedArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCEI_CommunicationLink" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBCommunicationLinkSemanticCandidates" semanticElements="aql:self.makeUnion(self, self.exchangeItem)" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']" targetFinderExpression="feature:exchangeItem" sourceFinderExpression="feature:eContainer" domainClass="CommunicationLink" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CommunicationLink%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CommunicationLink%20source']">
          <style lineStyle="dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription labelExpression="aql:self.getCommunicationLinkLabel()">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCEI_EIAllocation" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBExchangeItemAllocationSemanticCandidates" semanticElements="" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']" targetFinderExpression="feature:allocatedItem" sourceFinderExpression="feature:eContainer" domainClass="ExchangeItemAllocation" useDomainElement="true">
          <style lineStyle="dash_dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCEI_FilteredLabel" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20Common']" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" targetFinderExpression="aql:self.getOppositeCompsOfUseAndSendingCommLink()">
          <style lineStyle="dash" sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getInterfaceExchangeItemLabel(view.sourceNode,view.targetNode)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="CA_Component" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="" createElements="false" semanticElements="" domainClass="Component" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='ComponentPort%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='ComponentPort%20from%20Diagram']">
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Component%20Breakdown']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20System%20Actors']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20System%20Actors']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='System%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='Configuration%20Items%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Configuration%20Items%20BreakDown']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='EPBS%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='EPBS%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Component%20Breakdown']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Detailed%20Interfaces']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20External%20Interfaces']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Internal%20Interfaces']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Interfaces%20Diagram%20Blank']"/>
          <detailDescriptions xsi:type="description_3:TableCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Delegations']/@ownedRepresentationCreationDescriptions[name='Interface%20delegations']"/>
          <borderedNodeMappings name="CCEI_Port" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="aql:self.ownedFeatures->filter(fa::ComponentPort)" domainClass="ComponentPort">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPortSmall.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
            <conditionnalStyles predicateExpression="aql:self.requiredInterfaces->size() > 0 and self.providedInterfaces->size() > 0 and self.kind = fa::ComponentPortKind::STANDARD">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPort_providedrequired.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.requiredInterfaces->size() > 0 and self.providedInterfaces->size() = 0 and self.kind = fa::ComponentPortKind::STANDARD">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPort_required.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.requiredInterfaces->size() = 0 and self.providedInterfaces->size() > 0 and self.kind = fa::ComponentPortKind::STANDARD">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPort_provided.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.kind = fa::ComponentPortKind::FLOW and self.orientation = fa::OrientationPortKind::IN">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/InFlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.kind = fa::ComponentPortKind::FLOW and self.orientation = fa::OrientationPortKind::OUT">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/OutFlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.kind = fa::ComponentPortKind::FLOW and self.orientation = fa::OrientationPortKind::INOUT">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
          </borderedNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'System') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'Entity') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'Entity') and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'Entity') and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(cs::Component)->select(c | c.isActor())->size() > 0) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(cs::Component)->select(c | c.isActor())->size() > 0) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(cs::Component)->select(c | c.isActor())->size() > 0) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(epbs::ConfigurationItem)->size() > 0) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(epbs::ConfigurationItem)->size() > 0) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(epbs::ConfigurationItem)->size() > 0) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <toolSections name="External Interfaces">
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Logical / Physical Component (and creates a Part in the selected Container Component)" name="component" label="%common.cei.component" precondition="aql:containerView.getIBTarget(false).isValidCreationABComponent()" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/System.gif">
            <filters precondition="aql:self.target.eContainerOrSelf(ctx::SystemAnalysis)->size() != 0"/>
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="target" computationExpression="aql:containerView.getIBTarget(false)"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target.createComponent()">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                  <parameters name="context" value="aql:self"/>
                  <parameters name="scope" value="aql:self"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.setIBCreationNature(target)"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new System Actor / Logical Actor / Physical Actor (and creates a Part in the Context element of the current level)" name="actor" label="%common.cei.actor" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Actor.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget(true).createActor()">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                  <parameters name="context" value="aql:self"/>
                  <parameters name="scope" value="aql:self"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Ports">
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind FLOW and a direction IN" name="in.flow.port" label="%common.cei.in.flow.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']/@borderedNodeMappings[name='CCEI_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FlowPortIn.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="FLOW"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="orientation" valueExpression="IN"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind FLOW and a direction OUT" name="out.flow.port" label="%common.cei.out.flow.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']/@borderedNodeMappings[name='CCEI_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FlowPortOut.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="FLOW"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="orientation" valueExpression="OUT"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind FLOW and a direction INOUT" name="in.out.flow.port" label="%common.cei.in.out.flow.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']/@borderedNodeMappings[name='CCEI_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FlowPort.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="FLOW"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="orientation" valueExpression="INOUT"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind STANDARD and a direction UNSET" name="standard.port" label="%common.cei.standard.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']/@borderedNodeMappings[name='CCEI_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/StandardPort.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="STANDARD"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates an Interface" name="interface" label="%common.cei.interface" precondition="aql:not (not (containerView.oclIsKindOf(diagram::DDiagram)) and container.oclIsKindOf(cs::Component) and container.isActor()) and not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Interface.gif">
            <variable name="container">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="target" computationExpression="aql:container.getParentContainer()"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="feature:ownedInterfacePkg">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Interface" referenceName="ownedInterfaces">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Implements/Uses">
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates an Implementation relationship from a Component to an Interface" name="implements" label="%common.cei.implements" precondition="aql:not (preSource.implementedInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CA_imp2']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Implement.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceImplementation" referenceName="ownedInterfaceImplementations">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:target"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates an Use relationship from a Component to an Interface" name="uses" label="%common.cei.uses" precondition="aql:not (preSource.usedInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CA_use2']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Use.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceUse" referenceName="ownedInterfaceUses">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:target"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Provides/Requires">
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Provide relationship from a Component Port to an Interface" name="provides" label="%common.cei.provides" precondition="aql:not (preSource.ancestors()->includes(preTarget)) and not (preTarget.ancestors()->includes(preSource)) and not (preSource.oclIsKindOf(fa::ComponentPort) and preSource.providedInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_PinProvidedInterface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Provide.gif" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceRequiresCreation" computationExpression="aql:not (source.oclIsKindOf(information::Port))"/>
              </sourceVariable>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures" variableName="source">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="STANDARD"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']/@borderedNodeMappings[name='CCEI_Port']" containerViewExpression="aql:sourceView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:self.makeUnion(source.providedInterfaces, target)"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:sourceRequiresCreation">
                      <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_PinProvidedInterface']" containerViewExpression="aql:sourceView.getDiagramContainer()" sourceExpression="aql:source" targetExpression="aql:target"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceView.refreshElement()"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Require relationship from a Component Port to an Interface" name="requires" label="%common.cei.requires" precondition="aql:not (preSource.ancestors()->includes(preTarget)) and not (preTarget.ancestors()->includes(preSource)) and not (preSource.oclIsKindOf(fa::ComponentPort) and preSource.requiredInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_PinRequiredInterface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Require.gif" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceRequiresCreation" computationExpression="aql:not (source.oclIsKindOf(information::Port))"/>
              </sourceVariable>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures" variableName="source">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="STANDARD"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']/@borderedNodeMappings[name='CCEI_Port']" containerViewExpression="aql:sourceView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:self.makeUnion(source.requiredInterfaces, target)"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:sourceRequiresCreation">
                      <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_PinRequiredInterface']" containerViewExpression="aql:sourceView.getDiagramContainer()" sourceExpression="aql:source" targetExpression="aql:target"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceView.refreshElement()"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Generalization relationship (inheritance) between two Components or between two Interfaces" name="generalization" label="%common.cei.generalization" precondition="aql:self.canReconnectGeneralization(preSource,preTarget)" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_Generalization']" connectionStartPrecondition="aql:self.preGeneralization(preSource)">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="capellacore.Generalization" referenceName="ownedGeneralizations">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="super" valueExpression="aql:target"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="sub" valueExpression="aql:source"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Exchange Items">
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to EVENT" name="event" label="%common.cei.event" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemEvent.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="EVENT"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="EVENT"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to OPERATION" name="operation" label="%common.cei.operation" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemOperation.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="OPERATION"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="OPERATION"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to FLOW" name="flow" label="%common.cei.flow" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemFlow.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="FLOW"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="FLOW"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to SHARED DATA" name="data" label="%common.cei.data" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemData.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="SHARED_DATA"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="SHARED_DATA"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to UNSET" name="undefined.exchange.item" label="%common.cei.undefined.exchange.item" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItem.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="UNSET"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="UNSET"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates an allocation relationship from an Interface to an Exchange Item. An Exchange Item can be allocated to several Interfaces." name="exchange.item.allocation" label="%common.cei.exchange.item.allocation" precondition="aql:preSource.oclIsKindOf(cs::Interface) and preTarget.oclIsKindOf(information::ExchangeItem) and not (preSource.exchangeItems->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_EIAllocation']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Implement.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Transmit/Acquire">
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Communication Link (Send/Produce/Call/Write) from a Component to an Exchange Item" name="transmit" label="%common.cei.transmit" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_CommunicationLink']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CommunicationLink.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::OPERATION">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="CALL"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::EVENT">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="SEND"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::FLOW">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="PRODUCE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::SHARED_DATA">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="WRITE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::UNSET">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="TRANSMIT"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Communication Link (Receive/Consume/Execute/Access) from a Component to an Exchange Item" name="acquire" label="%common.cei.acquire" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_CommunicationLink']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CommunicationLink.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::OPERATION">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="EXECUTE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::EVENT">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="RECEIVE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::FLOW">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="CONSUME"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::SHARED_DATA">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ACCESS"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::UNSET">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ACQUIRE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Insert/Remove Logical / Physical Component. Create or delete graphical objects representing existing Components. Removing a Component graphical object from a diagram does not delete the Component from the model. This tool does not modify the semantic model." name="components" label="%common.cei.components" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="ownedNodes" computationExpression="aql:self.void2Null(containerView.getOwnedContainers())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleTargets" computationExpression="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.visible).target)"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="scope" computationExpression="aql:containerView.target.getCCEIShowHideComponent()->select(c | not c.isActor())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="message" computationExpression="Select Components to show."/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="context" computationExpression="aql:containerView.target"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:context"/>
                  <parameters name="scope" value="aql:scope"/>
                  <parameters name="resultVariable" value="selection"/>
                  <parameters name="wizardMessage" value="aql:message"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(self.makeDiff(self.getIntersection(visibleTargets,scope), selection))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:ownedNodes->select(ownedNode | ownedNode.target = i).hide()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selection)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="targetView"/>
                        <parameters name="value" value="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = i))"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:targetView.show()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:i">
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" containerViewExpression="aql:containerView"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Insert/Remove Sytem / Logical / Physical Actors. Create or delete graphical objects representing existing Actors. Removing a Component graphical object from a diagram does not delete the Actor from the model. This tool does not modify the semantic model." name="actors" label="%common.cei.actors" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="ownedNodes" computationExpression="aql:self.void2Null(containerView.getOwnedContainers())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleTargets" computationExpression="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.visible).target)"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="scope" computationExpression="aql:containerView.target.getCCEIShowHideActors()->select(c | c.isActor())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="message" computationExpression="Select Interfaces to show."/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="context" computationExpression="aql:containerView.target"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="false">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:context"/>
                    <parameters name="scope" value="aql:scope"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="aql:message"/>
                    <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection = 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(self.makeDiff(self.getIntersection(visibleTargets,scope), selection))">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:ownedNodes->select(ownedNode | ownedNode.target = i).hide()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selection)">
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="targetView"/>
                          <parameters name="value" value="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = i))"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView != null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:targetView.show()"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView = null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:i">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" containerViewExpression="aql:containerView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="true">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:context"/>
                    <parameters name="scope" value="aql:scope"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="aql:message"/>
                    <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selection != 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideActors(selection,diagram)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Insert/Remove Interfaces. Removing an Interface graphical object from a diagram does not delete the Interface from the model. This tool does not modify the semantic model." name="interfaces" label="%common.cei.interfaces" precondition="aql:containerView.oclIsKindOf(diagram::DDiagram)" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="ownedNodes" computationExpression="aql:self.void2Null(containerView.getAllNodes())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleTargets" computationExpression="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.visible).target)"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="scope" computationExpression="aql:containerView.target.getCCEIInsertInterface()"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="message" computationExpression="Select Interfaces to show."/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="context" computationExpression="aql:containerView.target"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="false">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:context"/>
                    <parameters name="scope" value="aql:scope"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="aql:message"/>
                    <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection = 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(self.makeDiff(self.getIntersection(visibleTargets,scope), selection))">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:ownedNodes->select(ownedNode | ownedNode.target = i).hide()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selection)">
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="targetView"/>
                          <parameters name="value" value="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = i))"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView != null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:targetView.show()"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView = null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:i">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']" containerViewExpression="aql:containerView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="true">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:context"/>
                    <parameters name="scope" value="aql:scope"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="aql:message"/>
                    <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selection != 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideInterfaces(selection,scope,diagram)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Insert/Remove Exchange Items. Removing an Exchange Item graphical object from a diagram does not delete the Exchange Item from the model. This tool does not modify the semantic model." name="exchange.items" label="%common.cei.exchange.items" precondition="aql:containerView.oclIsKindOf(diagram::DDiagram) and not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="displayedOperations" computationExpression="aql:containerView.getDiagramContainer().getAllAbstractNodes().target->filter(information::ExchangeItem)"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:containerView.getDiagramContainer()"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.target">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectOperations" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.getIBShowHideExchangeItems()"/>
                  <parameters name="initialSelection" value="aql:displayedOperations"/>
                  <parameters name="resultVariable" value="selectedOperations"/>
                  <parameters name="wizardMessage" value="Select ExchangeItems to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedOperations != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideExchangeItems(selectedOperations,diagram)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Contextual Component External Interfaces" precondition="aql:self.isInLib() and self.getComponentType()->select(x | x->filter(la::LogicalComponent)->size() > 0 or x->filter(pa::PhysicalComponent)->size() > 0 or x->filter(epbs::ConfigurationItem)->size() > 0)->size() > 0" titleExpression="aql:'[CEI] ' + self.name" browseExpression="aql:self.getComponentType()" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="delete capella elements">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="deleteCapellaElement" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="CCEI_ProvidedInterface" precondition="true">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="providedInterfaces" elementExpression="aql:elementView.targetNode.target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="CCEI_RequiredInterface" precondition="true">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="requiredInterfaces" elementExpression="aql:elementView.targetNode.target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="NamedElement DirectEdit" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="implements target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and not (self.eContainer().implementedInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceUse)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceImplementation)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="uses target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and not (self.eContainer().usedInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceUse)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceImplementation)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="PinRequiredInterface target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and not (self.requiredInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:edgeView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="requiredInterfaces" elementExpression="aql:source"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="PinProvidedInterface target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and not (self.providedInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:edgeView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="providedInterfaces" elementExpression="aql:source"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="implements-pinprovided source" precondition="aql:source.linkReconnectSource(source,target)" forceRefresh="true" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedInterfaceImplementations"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_PinProvidedInterface']" containerViewExpression="aql:edgeView.getDiagramContainer()" sourceExpression="aql:target" targetExpression="aql:edgeView.targetNode.target"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(fa::ComponentPort)->size() > 0">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceImplementation" referenceName="ownedInterfaceImplementations">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:edgeView.targetNode.target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                      <subModelOperations xsi:type="tool_1:Unset" featureName="providedInterfaces" elementExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="used-pinrequired source" precondition="aql:source.linkReconnectSource(source,target)" forceRefresh="true" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceUse" referenceName="ownedInterfaceUses">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:edgeView.targetNode.target"/>
                        <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CA_use2']" containerViewExpression="aql:edgeView.getDiagramContainer()" sourceExpression="aql:target" targetExpression="aql:edgeView.targetNode.target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@edgeMappings[name='CCEI_PinRequiredInterface']" containerViewExpression="aql:edgeView.getDiagramContainer()" sourceExpression="aql:target" targetExpression="aql:edgeView.targetNode.target"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(fa::ComponentPort)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:Unset" featureName="requiredInterfaces" elementExpression="aql:edgeView.targetNode.target"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceUse" referenceName="ownedInterfaceUses">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:edgeView.targetNode.target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CB Reconnect Generalization Target" precondition="aql:self.canReconnectGeneralization(element.sub,target)">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="super" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CB Reconnect Generalization Source" precondition="aql:self.canReconnectGeneralization(target,element.super)" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="sub" valueExpression="aql:target"/>
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedGeneralizations"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CommunicationLink target" precondition="aql:target.oclIsKindOf(information::ExchangeItem) and not (element.eContainer().ownedCommunicationLinks->select(ownedCommunicationLink | ownedCommunicationLink.kind = element.kind and ownedCommunicationLink.exchangeItem = target)->size() > 0)">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeItem" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CommunicationLink source" precondition="aql:source.oclIsKindOf(communication::CommunicationLinkExchanger) and target.ownedCommunicationLinks->select(ownedCommunicationLink | ownedCommunicationLink.kind = element.kind and ownedCommunicationLink.exchangeItem = element.exchangeItem)->size() = 0" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedCommunicationLinks"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="ComponentPort from Model" precondition="aql:element.isValidIDDndComponentPortFromModel(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']/@borderedNodeMappings[name='CCEI_Port']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDComponentPortFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="ComponentPort from Diagram" precondition="aql:element.isValidIDDndComponentPortFromDiagram(newViewContainer,oldContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']/@borderedNodeMappings[name='CCEI_Port']">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDComponentPortFromDiagram(newViewContainer,oldContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Component from Model" precondition="aql:element.isValidIDDndComponentFromModel(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@containerMappings[name='CA_Component']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDComponentFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Allocation ExchangeItem from Model" precondition="aql:element.isValidIDDndAllocationExchangeItemFromModel(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CCEI_ExchangeItem']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDAllocationExchangeItemFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="InterfaceDrop from Model" precondition="aql:element.isValidIDDndInterfaceFromModel(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@nodeMappings[name='CA_Interface']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDInterfaceFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Constraint From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Relationships" name="relationships" label="%common.cei.relationships" precondition="aql:not (elementView.oclIsKindOf(diagram::DDiagram)) and (self.oclIsKindOf(cs::Component) or self.oclIsKindOf(fa::ComponentPort) or self.oclIsKindOf(cs::Interface))" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" label="setVariable $scope" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                  <parameters name="context" value="var:elementView"/>
                  <parameters name="variable" value="scope"/>
                  <parameters name="value" value="service:getIDInsertRemoveRelationshipsScope"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" label="setVariable $initialSelection" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                  <parameters name="context" value="var:elementView"/>
                  <parameters name="variable" value="initialSelection"/>
                  <parameters name="value" value="service:getIDInsertRemoveRelationshipsInitialSelection(scope)"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectInterfaces" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizardIDB">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="var:scope"/>
                  <parameters name="initialSelection" value="var:initialSelection"/>
                  <parameters name="resultVariable" value="selectedInterfaces"/>
                  <parameters name="wizardMessage" value="aql:'Select elements to show in ' + element.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedInterfaces != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.insertRemoveIDRelationships(scope,initialSelection,selectedInterfaces)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Common" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%common.cei.constraint" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%common.cei.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%common.cei.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='InterfaceDrop%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='InterfaceDrop%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraint%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']" name="Contextual Component Internal Interfaces" label="%common.cii" titleExpression="aql:'[CII] ' + self.name" domainClass="capellacore::Namespace" preconditionExpression="aql:self.getComponentType()->select(x | x->filter(la::LogicalComponent)->size() > 0 or x->filter(pa::PhysicalComponent)->size() > 0)->size() > 0" defaultConcern="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@concerns/@ownedConcernDescriptions.0">
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.interfaces.filter" label="%common.cii.hide.interfaces.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.sub-links.with.interfaces.filter" label="%common.cii.hide.sub-links.with.interfaces.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinProvidedInterface']" viewConditionExpression="aql:self.isASubProvidedLink()"/>
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinRequiredInterface']" viewConditionExpression="aql:self.isASubRequiredLink()"/>
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_ImplementInterface']" viewConditionExpression="aql:self.isASubImplementedLink()"/>
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_UseInterface']" viewConditionExpression="aql:self.isASubUsedLink()"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.super-links.with.interfaces.filter" label="%common.cii.hide.super-links.with.interfaces.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinProvidedInterface']" viewConditionExpression="aql:self.isASuperProvidedLink()"/>
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinRequiredInterface']" viewConditionExpression="aql:self.isASuperRequiredLink()"/>
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_ImplementInterface']" viewConditionExpression="aql:self.isASuperImplementedLink()"/>
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_UseInterface']" viewConditionExpression="aql:self.isASuperUsedLink()"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.exchange.items.filter" label="%common.cii.hide.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_CommunicationLink'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_ExchangeItem']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.exchange.item.allocation.filter" label="%common.cii.hide.exchange.item.allocation.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_EIAllocation']" viewConditionExpression="aql:self.hasExchangeItemAllocationLink()"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.component.ports.filter" label="%common.cii.hide.component.ports.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.use.links.filter" label="%common.cii.hide.use.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_UseInterface']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.implmentation.links.filter" label="%common.cii.hide.implmentation.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_ImplementInterface']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.provide.links.filter" label="%common.cii.hide.provide.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinProvidedInterface']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.require.links.filter" label="%common.cii.hide.require.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinRequiredInterface']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.communication.links.filter" label="%common.cii.hide.communication.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_CommunicationLink']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.generalization.links.filter" label="%common.cii.hide.generalization.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_Generalization']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.port.delegations.filter" label="%common.cii.hide.port.delegations.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_Connection']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.simplified.component.interactions.filter" label="%common.cii.hide.simplified.component.interactions.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_FilteredLabel']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.technical.interfaces.filter" label="%common.cii.hide.technical.interfaces.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']" semanticConditionExpression="aql:self.structural"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.delegated.communication.links.filter" label="%common.cii.hide.delegated.communication.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_CommunicationLink']" viewConditionExpression="aql:self.doesCommunicationLinkEdgeIsNotRepresentedInComponentChildren()"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.delegated.use.implementation.require.provide.links.filter" label="%common.cii.hide.delegated.use.implementation.require.provide.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_UseInterface'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_ImplementInterface'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinProvidedInterface'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinRequiredInterface']" viewConditionExpression="aql:self.doesUseOrImplementOrRequireOrProvideLinkEdgeIsNotRepresentedInComponentChildren()"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%common.cii.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:self.isDiagramTitleBlock()"/>
      </filters>
      <concerns>
        <ownedConcernDescriptions name="default" filters="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@filters[name='hide.simplified.component.interactions.filter'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@filters[name='hide.technical.interfaces.filter']"/>
      </concerns>
      <defaultLayer name="default" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']">
        <nodeMappings name="CCII_Interface" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="" createElements="false" domainClass="Interface" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='InterfaceDrop%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='InterfaceDrop%20from%20Diagram']">
          <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="4" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Interface.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.isAbstract() = true and self.structural = true">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="4" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Interface.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.isAbstract() = true and self.structural = false">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="4" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Interface.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.isAbstract() = false and self.structural = true">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="4" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Interface.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.isAbstract() = false and self.structural = false">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="4" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Interface.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings name="CCII_ExchangeItem" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" createElements="false" domainClass="ExchangeItem">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ExchangeItem_Pinkkish']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="service:isAbstract()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ExchangeItem_Pinkkish']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="CCII_UseInterface" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBInterfaceUseSemanticCandidates" semanticElements="" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']" targetFinderExpression="feature:usedInterface" sourceFinderExpression="feature:interfaceUser" domainClass="InterfaceUse" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='used-pinrequired%20source'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='uses%20target']">
          <style lineStyle="dash_dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCII_ImplementInterface" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBInterfaceImplementationSemanticCandidates" semanticElements="" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']" targetFinderExpression="feature:implementedInterface" sourceFinderExpression="feature:interfaceImplementor" domainClass="InterfaceImplementation" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='implements%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='implements-pinprovided%20source']">
          <style lineStyle="dash" targetArrow="InputClosedArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCII_PinRequiredInterface" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CCDI_RequiredInterface']" semanticCandidatesExpression="aql:self" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']" targetFinderExpression="feature:requiredInterfaces" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='used-pinrequired%20source'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='PinRequiredInterface%20target']" pathExpression="">
          <style lineStyle="dash_dot" endsCentering="Source">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCII_PinProvidedInterface" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CCDI_ProvidedInterface']" semanticCandidatesExpression="aql:self" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']" targetFinderExpression="feature:providedInterfaces" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='implements-pinprovided%20source'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='PinProvidedInterface%20target']">
          <style lineStyle="dash" targetArrow="InputClosedArrow" endsCentering="Source">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCII_PortAllocation" preconditionExpression="false" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" createElements="false" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']" targetFinderExpression="feature:allocatedPort" sourceFinderExpression="feature:allocatedPort" domainClass="PortAllocation" useDomainElement="true">
          <style targetArrow="NoDecoration" endsCentering="Both">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCII_Generalization" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBGeneralizationSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_ExchangeItem']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_ExchangeItem']" targetFinderExpression="feature:super" sourceFinderExpression="feature:eContainer" domainClass="Generalization" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CB%20Reconnect%20Generalization%20Target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CB%20Reconnect%20Generalization%20Source']">
          <style targetArrow="InputClosedArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCII_CommunicationLink" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBCommunicationLinkSemanticCandidates" semanticElements="aql:self.makeUnion(self, self.exchangeItem)" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_ExchangeItem']" targetFinderExpression="feature:exchangeItem" sourceFinderExpression="feature:eContainer" domainClass="CommunicationLink" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CommunicationLink%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='CommunicationLink%20source']">
          <style lineStyle="dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription labelExpression="aql:self.getCommunicationLinkLabel()">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCII_EIAllocation" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBExchangeItemAllocationSemanticCandidates" semanticElements="" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_ExchangeItem']" targetFinderExpression="feature:allocatedItem" sourceFinderExpression="feature:eContainer" domainClass="ExchangeItemAllocation" useDomainElement="true">
          <style lineStyle="dash_dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCII_Connection" preconditionExpression="aql:self.kind = fa::ComponentExchangeKind::DELEGATION" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="service:diagram.getIBComponentExchangeSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']" targetFinderExpression="aql:self.getComponentExchangeTarget()" sourceFinderExpression="aql:self.getComponentExchangeSource()" domainClass="ComponentExchange" useDomainElement="true">
          <style targetArrow="NoDecoration" endsCentering="Both">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CCII_FilteredLabel" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20Common']" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']" targetFinderExpression="aql:self.getOppositeCompsOfUseAndSendingCommLink()">
          <style lineStyle="dash" sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getInterfaceExchangeItemLabel(view.sourceNode,view.targetNode)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="CCII_Component" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="" createElements="false" semanticElements="" domainClass="Component" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='ComponentPort%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='ComponentPort%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='InterfaceDrop%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='InterfaceDrop%20from%20Diagram']" reusedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_ExchangeItem']" reusedContainerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']">
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Component%20Breakdown']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='Configuration%20Items%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Configuration%20Items%20BreakDown']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='EPBS%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='EPBS%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Component%20Breakdown']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Detailed%20Interfaces']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20External%20Interfaces']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Internal%20Interfaces']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Interfaces%20Diagram%20Blank']"/>
          <borderedNodeMappings name="CCII_Port" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="aql:self.ownedFeatures->filter(fa::ComponentPort)" domainClass="ComponentPort">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPortSmall.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
            <conditionnalStyles predicateExpression="aql:self.requiredInterfaces->size() > 0 and self.providedInterfaces->size() > 0 and self.kind = fa::ComponentPortKind::STANDARD">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPort_providedrequired.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.requiredInterfaces->size() > 0 and self.providedInterfaces->size() = 0 and self.kind = fa::ComponentPortKind::STANDARD">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPort_required.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.requiredInterfaces->size() = 0 and self.providedInterfaces->size() > 0 and self.kind = fa::ComponentPortKind::STANDARD">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPort_provided.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isInStrictFlowPort()">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/InFlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isOutStrictFlowPort()">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/OutFlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isInoutStrictFlowPort()">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
          </borderedNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'System') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'Entity') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'Entity') and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'Entity') and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(cs::Component)->select(c | c.isActor())->size() > 0) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(cs::Component)->select(c | c.isActor())->size() > 0) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(cs::Component)->select(c | c.isActor())->size() > 0) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(epbs::ConfigurationItem)->size() > 0) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(epbs::ConfigurationItem)->size() > 0) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(epbs::ConfigurationItem)->size() > 0) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <toolSections name="Internal Interfaces">
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Logical / Physical Component (and creates a Part in the selected Container Component)" name="component" label="%common.cii.component" precondition="aql:containerView.getIBTarget(false).isValidCreationABComponent()" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/System.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="target" computationExpression="aql:containerView.getIBTarget(false)"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target.createComponent()">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                  <parameters name="context" value="aql:self"/>
                  <parameters name="scope" value="aql:self"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.setIBCreationNature(target)"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Logical / Physical Actor (and creates a Part in the selected Container Component)" name="actor" label="%common.cii.actor" precondition="aql:containerView.getIBTarget(true).isValidCreationABActor()" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Actor.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="target" computationExpression="aql:containerView.getIBTarget(true)"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target.createActor()">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                  <parameters name="context" value="aql:self"/>
                  <parameters name="scope" value="aql:self"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Ports">
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind FLOW and a direction IN" name="in.flow.port" label="%common.cii.in.flow.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FlowPortIn.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="FLOW"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="orientation" valueExpression="IN"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind FLOW and a direction OUT" name="out.flow.port" label="%common.cii.out.flow.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FlowPortOut.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="FLOW"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="orientation" valueExpression="OUT"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind FLOW and a direction INOUT" name="in.out.flow.port" label="%common.cii.in.out.flow.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FlowPort.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="FLOW"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="orientation" valueExpression="INOUT"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind STANDARD and a direction UNSET" name="standard.port" label="%common.cii.standard.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/StandardPort.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="STANDARD"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates an Interface" name="interface" label="%common.cii.interface" precondition="aql:not (not (containerView.oclIsKindOf(diagram::DDiagram)) and container.oclIsKindOf(cs::Component) and container.isActor()) and container.oclIsKindOf(cs::Component)" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Interface.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="target" computationExpression="aql:containerView.getCCIITarget()"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="feature:ownedInterfacePkg">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Interface" referenceName="ownedInterfaces">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Implements/Uses">
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates an Implementation relationship from a Component to an Interface" name="implements" label="%common.cii.implements" precondition="aql:preTarget.oclIsKindOf(cs::Interface) and preSource.isAvailableInterface(preTarget) and not (preSource.implementedInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_ImplementInterface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Implement.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceImplementation" referenceName="ownedInterfaceImplementations">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:target"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates an Use relationship from a Component to an Interface" name="uses" label="%common.cii.uses" precondition="aql:preTarget.oclIsKindOf(cs::Interface) and preSource.isAvailableInterface(preTarget) and not (preSource.usedInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_UseInterface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Use.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceUse" referenceName="ownedInterfaceUses">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:target"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup">
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Provide relationship from a Component Port to an Interface" name="provides" label="%common.cii.provides" precondition="aql:not (preSource.ancestors()->includes(preTarget)) and not (preTarget.ancestors()->includes(preSource)) and preTarget.oclIsKindOf(cs::Interface) and preSource.eContainerOrSelf(cs::Component).isAvailableInterface(preTarget) and not (preSource.oclIsKindOf(fa::ComponentPort) and preSource.providedInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinProvidedInterface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Provide.gif" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceRequiresCreation" computationExpression="aql:not (source.oclIsKindOf(information::Port))"/>
              </sourceVariable>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures" variableName="source">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="STANDARD"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']" containerViewExpression="aql:sourceView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:self.makeUnion(source.providedInterfaces, target)"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:sourceRequiresCreation">
                      <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinProvidedInterface']" containerViewExpression="aql:sourceView.getDiagramContainer()" sourceExpression="aql:source" targetExpression="aql:target"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceView.refreshElement()"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Require relationship from a Component Port to an Interface" name="requires" label="%common.cii.requires" precondition="aql:not (preSource.ancestors()->includes(preTarget)) and not (preTarget.ancestors()->includes(preSource)) and preTarget.oclIsKindOf(cs::Interface) and preSource.eContainerOrSelf(cs::Component).isAvailableInterface(preTarget) and not (preSource.oclIsKindOf(fa::ComponentPort) and preSource.requiredInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinRequiredInterface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Require.gif" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceRequiresCreation" computationExpression="aql:not (source.oclIsKindOf(information::Port))"/>
              </sourceVariable>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures" variableName="source">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="STANDARD"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']" containerViewExpression="aql:sourceView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:self.makeUnion(source.requiredInterfaces, target)"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:sourceRequiresCreation">
                      <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinRequiredInterface']" containerViewExpression="aql:sourceView.getDiagramContainer()" sourceExpression="aql:source" targetExpression="aql:target"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceView.refreshElement()"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Component Exchange of kind DELEGATION between a Port of the parent Component and a Port of a Sub Component. This delegation relationship is contextual to the parent Component." name="delegation" label="%common.cii.delegation" precondition="aql:self.isValidCreationIBDelegationExchange(preSourceView,preTargetView)" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_Connection']" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.createIBDelegation(sourceView,targetView)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Generalization relationship (inheritance) between two Components or between two Interfaces" name="generalization" label="%common.cii.generalization" precondition="aql:self.canReconnectGeneralization(preSource,preTarget)" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_Generalization']" connectionStartPrecondition="aql:self.preGeneralization(preSource)">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="capellacore.Generalization" referenceName="ownedGeneralizations">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="super" valueExpression="aql:target"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="sub" valueExpression="aql:source"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Exchange Items">
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to EVENT" name="event" label="%common.cii.event" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemEvent.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="EVENT"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="EVENT"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to OPERATION" name="operation" label="%common.cii.operation" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemOperation.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="OPERATION"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="OPERATION"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to FLOW" name="flow" label="%common.cii.flow" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemFlow.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="FLOW"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="FLOW"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to SHARED DATA" name="data" label="%common.cii.data" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemData.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="SHARED_DATA"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="SHARED_DATA"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to UNSET" name="undefined.exchange.item" label="%common.cii.undefined.exchange.item" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItem.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="UNSET"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="UNSET"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@containerMappings[name='FullInterface1']/@subNodeMappings[name='DT_Operation1']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates an allocation relationship from an Interface to an Exchange Item. An Exchange Item can be allocated to several Interfaces." name="exchange.item.allocation" label="%common.cii.exchange.item.allocation" precondition="aql:preSource.oclIsKindOf(cs::Interface) and preTarget.oclIsKindOf(information::ExchangeItem) and not (preSource.exchangeItems->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_EIAllocation']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Implement.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Transmit/Acquire">
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Communication Link (Send/Produce/Call/Write) from a Component to an Exchange Item" name="transmit" label="%common.cii.transmit" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_CommunicationLink']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CommunicationLink.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::OPERATION">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="CALL"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::EVENT">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="SEND"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::FLOW">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="PRODUCE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::SHARED_DATA">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="WRITE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::UNSET">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="TRANSMIT"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Communication Link (Receive/Consume/Execute/Access) from a Component to an Exchange Item" name="acquire" label="%common.cii.acquire" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_CommunicationLink']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CommunicationLink.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::OPERATION">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="EXECUTE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::EVENT">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="RECEIVE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::FLOW">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="CONSUME"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::SHARED_DATA">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ACCESS"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::UNSET">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ACQUIRE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Insert/Remove Logical / Physical Component. Create or delete graphical objects representing existing Components. Removing a Component graphical object from a diagram does not delete the Component from the model. This tool does not modify the semantic model." name="components" label="%common.cii.components" precondition="aql:not (containerView.oclIsKindOf(diagram::DDiagram) and container.getParentContainer().oclIsKindOf(cs::BlockArchitecture))" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="ownedNodes" computationExpression="aql:self.void2Null(containerView.getOwnedContainers())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleTargets" computationExpression="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.visible).target)"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="scope" computationExpression="aql:containerView.getCCIIShowHideComponent()"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="message" computationExpression="aql:'Select Components to show in ' + container.name + '.'"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="context" computationExpression="aql:containerView.getCCIITarget()"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:context"/>
                  <parameters name="scope" value="aql:scope"/>
                  <parameters name="resultVariable" value="selection"/>
                  <parameters name="wizardMessage" value="aql:message"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(self.makeDiff(self.getIntersection(visibleTargets,scope), selection))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = i)->first())">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selection)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="targetView"/>
                        <parameters name="value" value="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = i)->first())"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:targetView.show()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:i">
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']" containerViewExpression="aql:containerView"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(self.getSubDefinedInterfaces())" iteratorName="h">
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="interfaceView"/>
                          <parameters name="value" value="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = h))"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:interfaceView != null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:interfaceView">
                            <subModelOperations xsi:type="tool_1:DeleteView"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:h">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']" containerViewExpression="aql:h.getBestGraphicalContainer(containerView.getViewDiagram(),container.eClass())"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Insert/Remove Logical / Physical Component. Create or delete graphical objects representing existing Components. Removing a Component graphical object from a diagram does not delete the Component from the model. This tool does not modify the semantic model." name="actors" label="%common.cii.actors" precondition="aql:not (containerView.oclIsKindOf(diagram::DDiagram) and container.getParentContainer().oclIsKindOf(cs::BlockArchitecture))" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="ownedNodes" computationExpression="aql:self.void2Null(containerView.getOwnedContainers())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleTargets" computationExpression="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.visible).target)"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="scope" computationExpression="aql:containerView.getCCIIShowHideActor()"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="message" computationExpression="aql:'Select Components to show in ' + container.name + '.'"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="context" computationExpression="aql:containerView.getCCIITarget()"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:context"/>
                  <parameters name="scope" value="aql:scope"/>
                  <parameters name="resultVariable" value="selection"/>
                  <parameters name="wizardMessage" value="aql:message"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(self.makeDiff(self.getIntersection(visibleTargets,scope), selection))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = i)->first())">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selection)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="targetView"/>
                        <parameters name="value" value="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = i)->first())"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:targetView.show()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:i">
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']" containerViewExpression="aql:containerView"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(self.getSubDefinedInterfaces())" iteratorName="h">
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="interfaceView"/>
                          <parameters name="value" value="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = h))"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:interfaceView != null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:interfaceView">
                            <subModelOperations xsi:type="tool_1:DeleteView"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:h">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']" containerViewExpression="aql:h.getBestGraphicalContainer(containerView.getViewDiagram(),container.eClass())"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Insert/Remove Interfaces. Removing an Interface graphical object from a diagram does not delete the Interface from the model. This tool does not modify the semantic model." name="interfaces" label="%common.cii.interfaces" precondition="aql:container.oclIsKindOf(cs::Component)" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="ownedNodes" computationExpression="aql:containerView.getViewDiagram().getAllNodes()"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleTargets" computationExpression="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.visible).target)"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="scope" computationExpression="aql:containerView.getCCIITarget().getCCIIInsertInterface()"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="message" computationExpression="aql:'Select Interfaces to show in ' + container.name + '.'"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="context" computationExpression="aql:containerView.getCCIITarget()"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="false">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:context"/>
                    <parameters name="scope" value="aql:scope"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="aql:message"/>
                    <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection = 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(self.makeDiff(self.getIntersection(visibleTargets,scope), selection))">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:ownedNodes->select(ownedNode | ownedNode.target = i).hide()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selection)">
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="targetView"/>
                          <parameters name="value" value="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = i))"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView != null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:targetView.show()"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView = null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:i">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']" containerViewExpression="aql:i.getBestGraphicalContainer(containerView.getViewDiagram(),container.eClass())"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="true">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:context"/>
                    <parameters name="scope" value="aql:scope"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="aql:message"/>
                    <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selection != 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideInterfaces(selection,scope,diagram)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Insert/Remove Exchange Items. Removing an Exchange Item graphical object from a diagram does not delete the Exchange Item from the model. This tool does not modify the semantic model." name="exchange.items" label="%common.cii.exchange.items" precondition="aql:containerView.oclIsKindOf(diagram::DDiagram) and not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="displayedOperations" computationExpression="aql:containerView.getDiagramContainer().getAllAbstractNodes().target->filter(information::ExchangeItem)"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:containerView.getDiagramContainer()"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.target">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectOperations" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.getIBShowHideExchangeItems()"/>
                  <parameters name="initialSelection" value="aql:displayedOperations"/>
                  <parameters name="resultVariable" value="selectedOperations"/>
                  <parameters name="wizardMessage" value="aql:'Select ExchangeItems to show in ' + container.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedOperations != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideExchangeItems(selectedOperations,diagram)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Contextual Component Internal Interfaces" precondition="aql:self.isInLib() and self.getComponentType()->select(x | x->filter(la::LogicalComponent)->size() > 0 or x->filter(pa::PhysicalComponent)->size() > 0)->size() > 0" titleExpression="aql:'[CII] ' + self.name" browseExpression="aql:self.getComponentType()" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="implements target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and self.eContainer().isAvailableInterface(target) and not (self.eContainer().implementedInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceUse)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceImplementation)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="uses target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and self.eContainer().isAvailableInterface(target) and not (self.eContainer().usedInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceUse)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceImplementation)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="PinRequiredInterface target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and self.eContainer().isAvailableInterface(target) and not (self.requiredInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:edgeView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="requiredInterfaces" elementExpression="aql:source"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="PinProvidedInterface target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and self.eContainer().isAvailableInterface(target) and not (self.providedInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:edgeView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="providedInterfaces" elementExpression="aql:source"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="implements-pinprovided source" precondition="aql:source.linkReconnectSource(source,target)" forceRefresh="true" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceImplementation" referenceName="ownedInterfaceImplementations">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:edgeView.targetNode.target"/>
                        <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_ImplementInterface']" containerViewExpression="aql:edgeView.getDiagramContainer()" sourceExpression="aql:target" targetExpression="aql:edgeView.targetNode.target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinProvidedInterface']" containerViewExpression="aql:edgeView.getDiagramContainer()" sourceExpression="aql:target" targetExpression="aql:edgeView.targetNode.target"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(fa::ComponentPort)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:Unset" featureName="providedInterfaces" elementExpression="aql:edgeView.targetNode.target"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceImplementation" referenceName="ownedInterfaceImplementations">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:edgeView.targetNode.target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="used-pinrequired source" precondition="aql:source.linkReconnectSource(source,target)" forceRefresh="true" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceUse" referenceName="ownedInterfaceUses">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:edgeView.targetNode.target"/>
                        <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_UseInterface']" containerViewExpression="aql:edgeView.getDiagramContainer()" sourceExpression="aql:target" targetExpression="aql:edgeView.targetNode.target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@edgeMappings[name='CCII_PinRequiredInterface']" containerViewExpression="aql:edgeView.getDiagramContainer()" sourceExpression="aql:target" targetExpression="aql:edgeView.targetNode.target"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(fa::ComponentPort)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:Unset" featureName="requiredInterfaces" elementExpression="aql:edgeView.targetNode.target"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceUse" referenceName="ownedInterfaceUses">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:edgeView.targetNode.target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="delete capella elements">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="deleteCapellaElement" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="CCDI_ProvidedInterface" precondition="true">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="providedInterfaces" elementExpression="aql:elementView.targetNode.target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="CCDI_RequiredInterface" precondition="true">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="requiredInterfaces" elementExpression="aql:elementView.targetNode.target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="NamedElement DirectEdit" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CB Reconnect Generalization Target" precondition="aql:self.canReconnectGeneralization(element.sub,target)">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="super" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CB Reconnect Generalization Source" precondition="aql:self.canReconnectGeneralization(target,element.super)" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="sub" valueExpression="aql:target"/>
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedGeneralizations"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CommunicationLink target" precondition="aql:target.oclIsKindOf(information::ExchangeItem) and not (element.eContainer().ownedCommunicationLinks->select(ownedCommunicationLink | ownedCommunicationLink.kind = element.kind and ownedCommunicationLink.exchangeItem = target)->size() > 0)">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeItem" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CommunicationLink source" precondition="aql:source.oclIsKindOf(communication::CommunicationLinkExchanger) and target.ownedCommunicationLinks->select(ownedCommunicationLink | ownedCommunicationLink.kind = element.kind and ownedCommunicationLink.exchangeItem = element.exchangeItem)->size() = 0" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedCommunicationLinks"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="ComponentPort from Model" precondition="aql:element.isValidIDDndComponentPortFromModel(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDComponentPortFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="ComponentPort from Diagram" precondition="aql:element.isValidIDDndComponentPortFromDiagram(newViewContainer,oldContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']/@borderedNodeMappings[name='CCII_Port']">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDComponentPortFromDiagram(newViewContainer,oldContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Component from Model" precondition="aql:element.isValidIDDndComponentFromModel(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDComponentFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Component from Diagram" precondition="aql:element.isValidIDDndComponentFromDiagram(newViewContainer,oldContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@containerMappings[name='CCII_Component']">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDComponentFromDiagram(newViewContainer,oldContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Allocation ExchangeItem from Model" precondition="aql:element.isValidIDDndAllocationExchangeItemFromModel(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_ExchangeItem']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDAllocationExchangeItemFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Allocation ExchangeItem from Diagram" precondition="aql:element.isValidIDDndAllocationExchangeItemFromDiagram(newViewContainer,oldContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_ExchangeItem']">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDAllocationExchangeItemFromDiagram(newViewContainer,oldContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="InterfaceDrop from Model" precondition="aql:element.isValidIDDndInterfaceFromModel(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDInterfaceFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="InterfaceDrop from Diagram" precondition="aql:element.isValidIDDndInterfaceFromDiagram(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@nodeMappings[name='CCII_Interface']">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDInterfaceFromDiagram(newViewContainer,oldContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Constraint From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Relationships" name="relationships" label="%common.cii.relationships" precondition="aql:not (elementView.oclIsKindOf(diagram::DDiagram)) and (self.oclIsKindOf(cs::Component) or self.oclIsKindOf(fa::ComponentPort) or self.oclIsKindOf(cs::Interface))" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" label="setVariable $scope" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                  <parameters name="context" value="var:elementView"/>
                  <parameters name="variable" value="scope"/>
                  <parameters name="value" value="service:getIDInsertRemoveRelationshipsScope"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" label="setVariable $initialSelection" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                  <parameters name="context" value="var:elementView"/>
                  <parameters name="variable" value="initialSelection"/>
                  <parameters name="value" value="service:getIDInsertRemoveRelationshipsInitialSelection(scope)"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectInterfaces" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizardIDB">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="var:scope"/>
                  <parameters name="initialSelection" value="var:initialSelection"/>
                  <parameters name="resultVariable" value="selectedInterfaces"/>
                  <parameters name="wizardMessage" value="aql:'Select elements to show in ' + element.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedInterfaces != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.insertRemoveIDRelationships(scope,initialSelection,selectedInterfaces)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Common" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%common.cii.constraint" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%common.cii.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%common.cii.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='InterfaceDrop%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='InterfaceDrop%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraint%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']" name="Interfaces Diagram Blank" label="%common.idb" titleExpression="aql:'[IDB] ' + self.name" domainClass="capellacore::Namespace" preconditionExpression="aql:self.getComponentType()->select(x | x->filter(ctx::SystemComponent)->size() > 0 or x->filter(ctx::SystemComponentPkg)->size() > 0 or x->filter(la::LogicalComponent)->size() > 0 or x->filter(la::LogicalComponentPkg)->size() > 0 or x->filter(pa::PhysicalComponent)->size() > 0 or x->filter(pa::PhysicalComponentPkg)->size() > 0)->size() > 0" defaultConcern="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@concerns/@ownedConcernDescriptions.0">
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.interface.contents.filter" label="%common.idb.hide.interface.contents.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']/@subNodeMappings[name='IDB_Operation'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']/@subNodeMappings[name='IDB_Attribute']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.interfaces.filter" label="%common.idb.hide.interfaces.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.exchange.items.details.in.interfaces.filter" label="%common.idb.hide.exchange.items.details.in.interfaces.filter">
        <filters xsi:type="filter:MappingFilter"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.exchange.item.elements.filter" label="%common.idb.hide.exchange.item.elements.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']/@subNodeMappings[name='IDB_ExchangeItemElement']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.exchange.items.filter" label="%common.idb.hide.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_CommunicationLink'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.component.ports.filter" label="%common.idb.hide.component.ports.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.use.links.filter" label="%common.idb.hide.use.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_UseInterface']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.implmentation.links.filter" label="%common.idb.hide.implmentation.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_ImplementInterface']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.provide.links.filter" label="%common.idb.hide.provide.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PinProvidedInterface']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.require.links.filter" label="%common.idb.hide.require.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PinRequiredInterface']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.communication.links.filter" label="%common.idb.hide.communication.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_CommunicationLink']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.generalization.links.filter" label="%common.idb.hide.generalization.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_Generalization']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.port.delegations.filter" label="%common.idb.hide.port.delegations.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_Connection']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.simplified.component.interactions.filter" label="%common.idb.hide.simplified.component.interactions.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_FilteredLabel']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.simplified.diagram.based.interactions.filter" label="%common.idb.hide.simplified.diagram.based.interactions.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_FilteredLabel_DiagramBased']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.technical.interfaces.filter" label="%common.idb.hide.technical.interfaces.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']" semanticConditionExpression="aql:self.structural"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.delegated.communication.links.filter" label="%common.idb.hide.delegated.communication.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_CommunicationLink']" viewConditionExpression="aql:self.doesCommunicationLinkEdgeIsNotRepresentedInComponentChildren()"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.delegated.use.implementation.require.provide.links.filter" label="%common.idb.hide.delegated.use.implementation.require.provide.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_ImplementInterface'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_UseInterface'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PinProvidedInterface'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PinRequiredInterface']" viewConditionExpression="aql:self.doesUseOrImplementOrRequireOrProvideLinkEdgeIsNotRepresentedInComponentChildren()"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.modifiers.filter" label="%common.idb.show.modifiers.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Dummy']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%common.idb.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:self.isDiagramTitleBlock()"/>
      </filters>
      <concerns>
        <ownedConcernDescriptions name="default" filters="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@filters[name='hide.simplified.component.interactions.filter'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@filters[name='hide.simplified.diagram.based.interactions.filter'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@filters[name='hide.technical.interfaces.filter']"/>
      </concerns>
      <defaultLayer name="default IDB" label="default" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']">
        <edgeMappings name="IDB_UseInterface" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBInterfaceUseSemanticCandidates" semanticElements="" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']" targetFinderExpression="feature:usedInterface" sourceFinderExpression="feature:interfaceUser" domainClass="InterfaceUse" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='uses%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='used-pinrequired%20source']">
          <style lineStyle="dash_dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="IDB_ImplementInterface" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBInterfaceImplementationSemanticCandidates" semanticElements="" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']" targetFinderExpression="feature:implementedInterface" sourceFinderExpression="feature:interfaceImplementor" domainClass="InterfaceImplementation" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='implements%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='implements-pinprovided%20source']">
          <style lineStyle="dash" targetArrow="InputClosedArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="IDB_PinRequiredInterface" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='IDB_RequiredInterface']" semanticCandidatesExpression="aql:self" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']" targetFinderExpression="feature:requiredInterfaces" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='PinRequiredInterface%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='used-pinrequired%20source']" pathExpression="">
          <style lineStyle="dash_dot" endsCentering="Source">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="IDB_PinProvidedInterface" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='IDB_ProvidedInterface']" semanticCandidatesExpression="aql:self" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']" targetFinderExpression="feature:providedInterfaces" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='PinProvidedInterface%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='implements-pinprovided%20source']">
          <style lineStyle="dash" targetArrow="InputClosedArrow" endsCentering="Source">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="IDB_PortAllocation" preconditionExpression="false" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" createElements="false" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']" targetFinderExpression="feature:allocatedPort" sourceFinderExpression="feature:allocatedPort" domainClass="PortAllocation" useDomainElement="true">
          <style targetArrow="NoDecoration" endsCentering="Both">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="IDB_Generalization" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBGeneralizationSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']" targetFinderExpression="feature:super" sourceFinderExpression="feature:sub" domainClass="Generalization" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='CB%20Reconnect%20Generalization%20Target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='CB%20Reconnect%20Generalization%20Source']">
          <style targetArrow="InputClosedArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="IDB_CommunicationLink" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getIBCommunicationLinkSemanticCandidates" semanticElements="aql:self.makeUnion(self, self.exchangeItem)" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']" targetFinderExpression="feature:exchangeItem" sourceFinderExpression="feature:eContainer" domainClass="CommunicationLink" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='CommunicationLink%20target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='CommunicationLink%20source']">
          <style lineStyle="dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription labelExpression="aql:self.getCommunicationLinkLabel()">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="IDB_Connection" preconditionExpression="aql:self.kind = fa::ComponentExchangeKind::DELEGATION" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="service:diagram.getIBComponentExchangeSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']" targetFinderExpression="aql:self.getComponentExchangeTarget()" sourceFinderExpression="aql:self.getComponentExchangeSource()" domainClass="ComponentExchange" useDomainElement="true">
          <style targetArrow="NoDecoration" endsCentering="Both">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="IDB_FilteredLabel" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20Common']" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" targetFinderExpression="aql:self.getOppositeCompsOfUseAndSendingCommLink()">
          <style lineStyle="dash" sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getInterfaceExchangeItemLabel(view.sourceNode,view.targetNode)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="IDB_FilteredLabel_DiagramBased" preconditionExpression="aql:self.isInterfaceExchangeItemLabelDiagramBasedEmpty(sourceView,targetView)" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20Common']" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" targetFinderExpression="aql:self.getOppositeCompsOfUseAndSendingCommLink()">
          <style lineStyle="dash" sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getInterfaceExchangeItemLabelDiagramBased(view.sourceNode,view.targetNode)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="IDB_Interface" detailDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@toolSections.0/@ownedTools[name='Interface%20Diagram']" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="" createElements="false" domainClass="Interface" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Model']" reusedContainerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']" childrenPresentation="List">
          <subNodeMappings name="IDB_Attribute" preconditionExpression="aql:self.association = null" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="feature:ownedFeatures" domainClass="Property">
            <style xsi:type="style:SquareDescription" labelExpression="aql:self.multiplicityToString() + ' ' + self.maxCard.value + ' feature:name' + if (self.type != null) then ' : ' + self.type.name endif" labelAlignment="LEFT" sizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </subNodeMappings>
          <subNodeMappings name="IDB_Operation" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20DirectEdit']" semanticCandidatesExpression="feature:ownedExchangeItemAllocations" semanticElements="aql:self.makeUnion(self, self.allocatedItem, self.allocatedItem.ownedElements)" domainClass="CapellaElement" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Model']">
            <style xsi:type="style:SquareDescription" labelExpression="aql:self.getOperationLabel(view)" labelAlignment="LEFT" sizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="GradientTopToBottom" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Pink']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.abstract = true">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Pink']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <containerMappings name="IDB_Component" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="" createElements="false" semanticElements="" domainClass="Component" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='InterfaceDrop%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='InterfaceDrop%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='ComponentPort%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='ComponentPort%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Model']" reusedContainerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']">
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Component%20Breakdown']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20System%20Actors']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20System%20Actors']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='System%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='Configuration%20Items%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Configuration%20Items%20BreakDown']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="EPBS.odesign#//@ownedViewpoints[name='EPBS%20architecture']/@ownedRepresentations[name='EPBS%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='EPBS%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Component%20Breakdown']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Detailed%20Interfaces']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20External%20Interfaces']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Internal%20Interfaces']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Interfaces%20Diagram%20Blank']"/>
          <borderedNodeMappings name="IDB_Port" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="aql:self.ownedFeatures->filter(fa::ComponentPort)" domainClass="ComponentPort">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPortSmall.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
            <conditionnalStyles predicateExpression="aql:self.requiredInterfaces->size() > 0 and self.providedInterfaces->size() > 0 and self.kind = fa::ComponentPortKind::STANDARD">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPort_providedrequired.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.requiredInterfaces->size() > 0 and self.providedInterfaces->size() = 0 and self.kind = fa::ComponentPortKind::STANDARD">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPort_required.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.requiredInterfaces->size() = 0 and self.providedInterfaces->size() > 0 and self.kind = fa::ComponentPortKind::STANDARD">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/StandardPort_provided.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isInStrictFlowPort()">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/InFlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isOutStrictFlowPort()">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/OutFlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="service:isInoutStrictFlowPort()">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:self.computeLabel()" hideLabelByDefault="true" sizeComputationExpression="1" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FlowPort.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
          </borderedNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'SystemComponent') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'Entity') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'Entity') and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'Entity') and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(cs::Component)->select(c | c.isActor())->size() > 0) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(cs::Component)->select(c | c.isActor())->size() > 0) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(cs::Component)->select(c | c.isActor())->size() > 0) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(epbs::ConfigurationItem)->size() > 0) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(epbs::ConfigurationItem)->size() > 0) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(epbs::ConfigurationItem)->size() > 0) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ConfigurationItem_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <containerMappings name="IDB_ExchangeItem" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" createElements="false" documentation="domainClass is AbstractNamedElement since Dnd check if domainClass is compatible" domainClass="ExchangeItem" childrenPresentation="List">
          <subNodeMappings name="IDB_ExchangeItemElement" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="feature:ownedElements" semanticElements="aql:self.makeUnion(self, self.ownedMinCard, self.ownedMaxCard)" domainClass="ExchangeItemElement">
            <style xsi:type="style:SquareDescription" labelExpression="aql:self.computeLabel() + self.modifiersSuffix(view)" labelAlignment="LEFT">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Pink']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
          <conditionnalStyles predicateExpression="service:isAbstract()">
            <style xsi:type="style:FlatContainerStyleDescription" arcWidth="12" arcHeight="12" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="service:capellaLabelService(view, diagram)" roundedCorner="true" backgroundStyle="Liquid" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Pink']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <toolSections name="Interfaces Blank">
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Logical / Physical Component (and creates a Part in the selected Container Component)" name="component" label="%common.idb.component" precondition="aql:containerView.getIBTarget(false).isValidCreationABComponent()" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/System.gif">
            <filters precondition="aql:self.target.eContainerOrSelf(ctx::SystemAnalysis)->size() != 0"/>
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="target" computationExpression="aql:containerView.getIBTarget(false)"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target.createComponent()">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                  <parameters name="context" value="aql:self"/>
                  <parameters name="scope" value="aql:self"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.setIBCreationNature(target)"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new System Actor / Logical Actor / Physical Actor (and creates a Part in the Context element of the current level)" name="actor" label="%common.idb.actor" precondition="aql:containerView.getIBTarget(true).isValidCreationABActor()" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Actor.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="nature" computationExpression="aql:containerView.getComponentNature()"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget(true).createActor()">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                  <parameters name="context" value="aql:self"/>
                  <parameters name="scope" value="aql:self"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Ports">
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind FLOW and a direction IN" name="in.flow.port" label="%common.idb.in.flow.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FlowPortIn.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="FLOW"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="orientation" valueExpression="IN"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind FLOW and a direction OUT" name="out.flow.port" label="%common.idb.out.flow.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FlowPortOut.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="FLOW"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="orientation" valueExpression="OUT"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind FLOW and a direction INOUT" name="in.out.flow.port" label="%common.idb.in.out.flow.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FlowPort.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="FLOW"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="orientation" valueExpression="INOUT"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates a Component Port with a Kind STANDARD and a direction UNSET" name="standard.port" label="%common.idb.standard.port" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/StandardPort.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="STANDARD"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates an Interface" name="interface" label="%common.idb.interface" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Interface.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="target" computationExpression="aql:containerView.getIBTarget()"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="feature:ownedInterfacePkg">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Interface" referenceName="ownedInterfaces">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Implements/Uses">
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates an Implementation relationship from a Component to an Interface" name="implements" label="%common.idb.implements" precondition="aql:not (preSource.implementedInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_ImplementInterface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Implement.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceImplementation" referenceName="ownedInterfaceImplementations">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates an Use relationship from a Component to an Interface" name="uses" label="%common.idb.uses" precondition="aql:not (preSource.usedInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_UseInterface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Use.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceUse" referenceName="ownedInterfaceUses">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:target"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Provides/Requires">
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Provide relationship from a Component Port to an Interface" name="provides" label="%common.idb.provides" precondition="aql:not (preSource.ancestors()->includes(preTarget)) and not (preTarget.ancestors()->includes(preSource)) and not (preSource.oclIsKindOf(fa::ComponentPort) and preSource.providedInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PinProvidedInterface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Provide.gif" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceRequiresCreation" computationExpression="aql:not (source.oclIsKindOf(information::Port))"/>
              </sourceVariable>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures" variableName="source">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="STANDARD"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']" containerViewExpression="aql:sourceView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:self.makeUnion(source.providedInterfaces, target)"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:sourceRequiresCreation">
                      <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PinProvidedInterface']" containerViewExpression="aql:sourceView.getDiagramContainer()" sourceExpression="aql:source" targetExpression="aql:target"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceView.refreshElement()"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Require relationship from a Component Port to an Interface" name="requires" label="%common.idb.requires" precondition="aql:not (preSource.ancestors()->includes(preTarget)) and not (preTarget.ancestors()->includes(preSource)) and not (preSource.oclIsKindOf(fa::ComponentPort) and preSource.requiredInterfaces->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PinRequiredInterface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Require.gif" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceRequiresCreation" computationExpression="aql:not (source.oclIsKindOf(information::Port))"/>
              </sourceVariable>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ComponentPort" referenceName="ownedFeatures" variableName="source">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="STANDARD"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']" containerViewExpression="aql:sourceView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:self.makeUnion(source.requiredInterfaces, target)"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:sourceRequiresCreation">
                      <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PinRequiredInterface']" containerViewExpression="aql:sourceView.getDiagramContainer()" sourceExpression="aql:source" targetExpression="aql:target"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceView.refreshElement()"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Component Exchange of kind DELEGATION between a Port of the parent Component and a Port of a Sub Component. This delegation relationship is contextual to the parent Component." name="delegation" label="%common.idb.delegation" precondition="aql:self.isValidCreationIBDelegationExchange(preSourceView,preTargetView)" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_Connection']" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.createIBDelegation(sourceView,targetView)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Generalization relationship (inheritance) between two Components or between two Interfaces" name="generalization" label="%common.idb.generalization" precondition="aql:self.canReconnectGeneralization(preSource,preTarget)" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_Generalization']" connectionStartPrecondition="aql:self.preGeneralization(preSource)">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="capellacore.Generalization" referenceName="ownedGeneralizations">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="super" valueExpression="aql:target"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="sub" valueExpression="aql:source"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Exchange Items">
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to EVENT" name="event" label="%common.idb.event" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemEvent.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="EVENT"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="EVENT"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.getDiagramContainer().isSynchronized())">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:allocation">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']/@subNodeMappings[name='IDB_Operation']" containerViewExpression="aql:containerView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to OPERATION" name="operation" label="%common.idb.operation" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemOperation.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="OPERATION"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="OPERATION"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.getDiagramContainer().isSynchronized())">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:allocation">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']/@subNodeMappings[name='IDB_Operation']" containerViewExpression="aql:containerView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to FLOW" name="flow" label="%common.idb.flow" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemFlow.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="FLOW"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="FLOW"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.getDiagramContainer().isSynchronized())">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:allocation">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']/@subNodeMappings[name='IDB_Operation']" containerViewExpression="aql:containerView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to SHARED DATA" name="data" label="%common.idb.data" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemData.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="SHARED_DATA"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="SHARED_DATA"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.getDiagramContainer().isSynchronized())">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:allocation">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']/@subNodeMappings[name='IDB_Operation']" containerViewExpression="aql:containerView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to UNSET" name="undefined.exchange.item" label="%common.idb.undefined.exchange.item" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItem.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="UNSET"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="UNSET"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.getDiagramContainer().isSynchronized())">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:allocation">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']/@subNodeMappings[name='IDB_Operation']" containerViewExpression="aql:containerView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Create a new Exchange Item Element in the selected Exchange Item. This tool opens a selection wizard to select the type of the Exchange Item Element." name="exchange.item.element" label="%common.idb.exchange.item.element" precondition="aql:self.oclIsKindOf(cs::ExchangeItemAllocation) or self.oclIsKindOf(information::ExchangeItem)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Parameter.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(cs::ExchangeItemAllocation)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:element"/>
                    <parameters name="variable" value="newContainer"/>
                    <parameters name="value" value="feature:allocatedItem"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(information::ExchangeItem)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:element"/>
                    <parameters name="variable" value="newContainer"/>
                    <parameters name="value" value="aql:self"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:newContainer">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemElement" referenceName="ownedElements"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select Type" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                      <parameters name="context" value="aql:element"/>
                      <parameters name="scope" value="aql:self.getExchangeItemElementTypes()"/>
                      <parameters name="multiple" value="false"/>
                      <parameters name="resultVariable" value="type"/>
                      <parameters name="wizardMessage" value="Select type of ExchangeItemElement."/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:type != 'WIZARD_CANCELED'">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:type"/>
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Edit parameter" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.EditCapellaPropertyWizard">
                        <parameters name="context" value="aql:instance"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element.oclIsKindOf(information::ExchangeItem)">
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']/@subNodeMappings[name='IDB_ExchangeItemElement']" containerViewExpression="aql:elementView"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="refreshElement" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.RefreshElement">
                        <parameters name="context" value="aql:elementView"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:type = 'WIZARD_CANCELED'">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Transmit/Acquire">
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Communication Link (Send/Produce/Call/Write) from a Component to an Exchange Item" name="transmit" label="%common.idb.transmit" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_CommunicationLink']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CommunicationLink.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::OPERATION">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="CALL"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::EVENT">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="SEND"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::FLOW">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="PRODUCE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::SHARED_DATA">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="WRITE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::UNSET">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="TRANSMIT"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a Communication Link (Receive/Consume/Execute/Access) from a Component to an Exchange Item" name="acquire" label="%common.idb.acquire" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_CommunicationLink']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CommunicationLink.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::OPERATION">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="EXECUTE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::EVENT">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="RECEIVE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::FLOW">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="CONSUME"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::SHARED_DATA">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ACCESS"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target.exchangeMechanism = information::ExchangeMechanism::UNSET">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CommunicationLink" referenceName="ownedCommunicationLinks">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ACQUIRE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance.changeExchangeItem(target)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Exchange Items Allocations. Removing an Exchange Item Allocation graphical object from a diagram does not delete the Exchange Item Allocation from the model. This tool does not modify the semantic model. An Exchange Item allocation is a reference relationship from an Interface to an Exchange Item." name="manage.exchange.item.allocations" label="%common.idb.manage.exchange.item.allocations" precondition="aql:elementView.target.oclIsKindOf(cs::Interface)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Manage.gif">
            <element name="element">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="exchangeItems" computationExpression="feature:exchangeItems"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="exchangeItemAllocations" computationExpression="feature:ownedExchangeItemAllocations"/>
            </element>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectAllocations" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:element.getIBReuseExchangeItems()"/>
                  <parameters name="resultVariable" value="selection"/>
                  <parameters name="wizardMessage" value="aql:'Select Exchange Items to allocate to ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(exchangeItems)"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selection != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selection)">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (exchangeItems->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:i"/>
                          <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (elementView.getDiagramContainer().isSynchronized())">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:allocation">
                              <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']/@subNodeMappings[name='IDB_Operation']" containerViewExpression="aql:elementView"/>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(exchangeItems)">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemAllocations->select(exchangeItemAllocation | exchangeItemAllocation.allocatedItem = i)->first()">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.removeCapellaElement()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Insert/Remove Logical / Physical Component. Create or delete graphical objects representing existing Components. Removing a Component graphical object from a diagram does not delete the Component from the model. This tool does not modify the semantic model." name="components" label="%common.idb.components" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="ownedNodes" computationExpression="aql:self.void2Null(containerView.eAllContents()->filter(diagram::DNodeContainer))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleTargets" computationExpression="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.visible).target)"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="scope" computationExpression="aql:containerView.getIBShowHideComponent()"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="message" computationExpression="aql:'Select Components to show in ' + container.name + '.'"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="context" computationExpression="aql:containerView.getIBTarget()"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:context"/>
                  <parameters name="scope" value="aql:scope"/>
                  <parameters name="resultVariable" value="selection"/>
                  <parameters name="wizardMessage" value="aql:message"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(self.makeDiff(self.getIntersection(visibleTargets,scope), selection))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:ownedNodes->select(ownedNode | ownedNode.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selection)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="targetView"/>
                        <parameters name="value" value="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = i))"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:targetView.show()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:i">
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" containerViewExpression="aql:containerView"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(self.getSubDefinedInterfaces())" iteratorName="h">
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="interfaceView"/>
                          <parameters name="value" value="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = h))"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:interfaceView != null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:interfaceView">
                            <subModelOperations xsi:type="tool_1:DeleteView"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:h">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']" containerViewExpression="aql:h.getBestGraphicalContainer(containerView.getViewDiagram(),container.eClass())"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Insert/Remove Sytem / Logical / Physical Actors. Create or delete graphical objects representing existing Actors. Removing a Component graphical object from a diagram does not delete the Actor from the model. This tool does not modify the semantic model." name="actors" label="%common.idb.actors" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="ownedNodes" computationExpression="aql:self.void2Null(containerView.eAllContents()->filter(diagram::DNodeContainer))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleTargets" computationExpression="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.visible).target)"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="scope" computationExpression="aql:containerView.getIBShowHideActor()"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="message" computationExpression="aql:'Select Interfaces to show in ' + container.name + '.'"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="context" computationExpression="aql:containerView.target"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:context"/>
                  <parameters name="scope" value="aql:scope"/>
                  <parameters name="resultVariable" value="selection"/>
                  <parameters name="wizardMessage" value="aql:message"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(self.makeDiff(self.getIntersection(visibleTargets,scope), selection))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:ownedNodes->select(ownedNode | ownedNode.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selection)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="targetView"/>
                        <parameters name="value" value="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = i))"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:targetView.show()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:i">
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" containerViewExpression="aql:containerView"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(self.getSubDefinedInterfaces())" iteratorName="h">
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="interfaceView"/>
                          <parameters name="value" value="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = h))"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:interfaceView != null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:interfaceView">
                            <subModelOperations xsi:type="tool_1:DeleteView"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:h">
                            <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']" containerViewExpression="aql:h.getBestGraphicalContainer(containerView.getViewDiagram(),container.eClass())"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Insert/Remove Component Ports.  Create or delete graphical objects corresponding to already existing Component Ports. Removing a Component Port graphical object from a Component / Actor does not delete the Component Port from the model. This tool does not modify the semantic model." name="component.ports" label="%common.idb.component.ports" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <filters precondition="aql:self.isSynchronized()" elementsToListen="aql:self">
              <listeners domainClass="DDiagram" featureName="synchronized"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="ownedNodes" computationExpression="aql:self.void2Null(containerView.getAllNodes())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleTargets" computationExpression="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.visible).target)"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="scope" computationExpression="aql:containerView.target.ownedFeatures->filter(fa::ComponentPort)"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="message" computationExpression="aql:'Select standard ports to show in ' + container.name + '.'"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="context" computationExpression="aql:containerView.target"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:context"/>
                  <parameters name="scope" value="aql:scope"/>
                  <parameters name="resultVariable" value="selection"/>
                  <parameters name="wizardMessage" value="aql:message"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(self.makeDiff(self.getIntersection(visibleTargets,scope), selection))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:ownedNodes->select(ownedNode | ownedNode.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selection)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="targetView"/>
                        <parameters name="value" value="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = i))"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:targetView.show()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:i">
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']" containerViewExpression="aql:containerView"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="refreshElement" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.RefreshElement">
                      <parameters name="context" value="aql:containerView.getDiagramContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="ShowHide ExchangeItemRelated">
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Insert/Remove Interfaces. Removing an Interface graphical object from a diagram does not delete the Interface from the model. This tool does not modify the semantic model." name="interfaces" label="%common.idb.interfaces" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <variable name="container"/>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="ownedNodes" computationExpression="aql:containerView.getViewDiagram().getAllAbstractNodes()"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleTargets" computationExpression="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.visible).target)"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="scope" computationExpression="aql:containerView.getIBTarget().getIBInsertInterface()"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="message" computationExpression="aql:'Select Interfaces to show in ' + container.name + '.'"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="context" computationExpression="aql:containerView.getIBTarget()"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="false">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                      <parameters name="context" value="aql:context"/>
                      <parameters name="scope" value="aql:scope"/>
                      <parameters name="resultVariable" value="selection"/>
                      <parameters name="wizardMessage" value="aql:message"/>
                      <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selection = 'WIZARD_CANCELED')">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                        <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(self.makeDiff(self.getIntersection(visibleTargets,scope), selection))">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:ownedNodes->select(ownedNode | ownedNode.target = i)->first()">
                            <subModelOperations xsi:type="tool_1:DeleteView"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selection)">
                          <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                            <parameters name="context" value="aql:container"/>
                            <parameters name="variable" value="targetView"/>
                            <parameters name="value" value="aql:self.void2Null(ownedNodes->select(ownedNode | ownedNode.target = i))"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView != null">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:targetView.show()"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetView = null">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:i">
                              <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']" containerViewExpression="aql:i.getBestGraphicalContainer(containerView.getViewDiagram(),container.eClass())"/>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="refreshElement" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.RefreshElement">
                          <parameters name="context" value="aql:containerView.getDiagramContainer()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="true">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="showhide" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                      <parameters name="context" value="aql:context"/>
                      <parameters name="scope" value="aql:scope"/>
                      <parameters name="resultVariable" value="selection"/>
                      <parameters name="wizardMessage" value="aql:message"/>
                      <parameters name="initialSelection" value="aql:self.void2Null(self.getIntersection(visibleTargets,scope))"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selection != 'WIZARD_CANCELED')">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideInterfaces(selection,scope,diagram)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Insert/Remove Exchange Items Allocations. Removing an Exchange Item Allocation graphical object from a diagram does not delete the Exchange Item Allocation from the model. This tool does not modify the semantic model. An Exchange Item allocation is a reference relationship from an Interface to an Exchange Item." name="exchange.item.allocations" label="%common.idb.exchange.item.allocations" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']/@subNodeMappings[name='IDB_Operation']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="aql:self.isSynchronized()" elementsToListen="aql:self">
                <listeners domainClass="DDiagram" featureName="synchronized"/>
              </filters>
              <variable name="container"/>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="displayedOperations" computationExpression="aql:self.void2Null(self.getOwnedNodeListElements().target->filter(cs::ExchangeItemAllocation))"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:containerView.getDiagramContainer()"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectOperations" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="aql:container.ownedExchangeItemAllocations"/>
                    <parameters name="initialSelection" value="aql:displayedOperations"/>
                    <parameters name="resultVariable" value="selectedOperations"/>
                    <parameters name="wizardMessage" value="aql:'Select ExchangeItem allocations to show in ' + container.name + '.'"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedOperations != 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideOperations(selectedOperations,diagram)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Insert/Remove Exchange Items. Removing an Exchange Item graphical object from a diagram does not delete the Exchange Item from the model. This tool does not modify the semantic model." name="exchange.items" label="%common.idb.exchange.items" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <variable name="container"/>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="displayedOperations" computationExpression="aql:containerView.getDiagramContainer().getAllAbstractNodes().target->filter(information::ExchangeItem)"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:containerView.getDiagramContainer()"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.target">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectOperations" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="aql:self.getIBShowHideExchangeItems()"/>
                    <parameters name="initialSelection" value="aql:displayedOperations"/>
                    <parameters name="resultVariable" value="selectedOperations"/>
                    <parameters name="wizardMessage" value="aql:'Select ExchangeItems to show in ' + container.name + '.'"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedOperations != 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideExchangeItems(selectedOperations,diagram)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Insert/Remove Exchange Items Elements. Removing an Exchange Item Element graphical object from a diagram does not delete the Exchange Item Element from the model. This tool does not modify the semantic model." name="exchange.item.elements" label="%common.idb.exchange.item.elements" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']/@subNodeMappings[name='IDB_ExchangeItemElement']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="aql:self.isSynchronized()" elementsToListen="aql:self">
                <listeners domainClass="DDiagram" featureName="synchronized"/>
              </filters>
              <variable name="container"/>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="displayedOperations" computationExpression="aql:self.void2Null(containerView.getOwnedNodeListElements().target->filter(information::ExchangeItemElement))"/>
                <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:containerView.getDiagramContainer()"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectOperations" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="aql:container.ownedElements"/>
                    <parameters name="initialSelection" value="aql:displayedOperations"/>
                    <parameters name="resultVariable" value="selectedOperations"/>
                    <parameters name="wizardMessage" value="aql:'Select ExchangeItemElement to show in ' + container.name + '.'"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedOperations != 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideOperations(selectedOperations,diagram)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Relationships" name="relationships" label="%common.idb.relationships" precondition="aql:not (elementView.oclIsKindOf(diagram::DDiagram)) and (self.oclIsKindOf(cs::Component) or self.oclIsKindOf(fa::ComponentPort) or self.oclIsKindOf(cs::Interface))" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" label="setVariable $scope" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                  <parameters name="context" value="var:elementView"/>
                  <parameters name="variable" value="scope"/>
                  <parameters name="value" value="service:getIDInsertRemoveRelationshipsScope"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" label="setVariable $initialSelection" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                  <parameters name="context" value="var:elementView"/>
                  <parameters name="variable" value="initialSelection"/>
                  <parameters name="value" value="service:getIDInsertRemoveRelationshipsInitialSelection(scope)"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectInterfaces" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizardIDB">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="var:scope"/>
                  <parameters name="initialSelection" value="var:initialSelection"/>
                  <parameters name="resultVariable" value="selectedInterfaces"/>
                  <parameters name="wizardMessage" value="aql:'Select elements to show in ' + element.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedInterfaces != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.insertRemoveIDRelationships(scope,initialSelection,selectedInterfaces)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="delete capella elements">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="deleteCapellaElement" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="IDB_ProvidedInterface" precondition="true">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="providedInterfaces" elementExpression="aql:elementView.targetNode.target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="IDB_RequiredInterface" precondition="true">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="requiredInterfaces" elementExpression="aql:elementView.targetNode.target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="no delete Common">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="NoDeleteElement" id="org.polarsys.capella.core.sirius.analysis.delete.NoDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="NamedElement DirectEdit" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="Allocation DirectEdit" inputLabelExpression="aql:self.allocatedItem.name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.allocatedItem">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="implements target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and self.eContainer().isAvailableInterface(target) and not (self.eContainer().implementedInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceUse)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceImplementation)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="uses target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and self.eContainer().isAvailableInterface(target) and not (self.eContainer().usedInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceUse)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element->filter(cs::InterfaceImplementation)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="PinRequiredInterface target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and self.eContainer().isAvailableInterface(target) and not (self.requiredInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:edgeView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="requiredInterfaces" elementExpression="aql:source"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="PinProvidedInterface target" precondition="aql:not (self.eContainer().oclIsKindOf(epbs::ConfigurationItem)) and target.oclIsKindOf(cs::Interface) and self.eContainer().isAvailableInterface(target) and not (self.providedInterfaces->includes(target))">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:edgeView.sourceNode.target">
                <subModelOperations xsi:type="tool_1:Unset" featureName="providedInterfaces" elementExpression="aql:source"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="implements-pinprovided source" precondition="aql:source.linkReconnectSource(source,target)" forceRefresh="true" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceImplementation" referenceName="ownedInterfaceImplementations">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:edgeView.targetNode.target"/>
                        <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_ImplementInterface']" containerViewExpression="aql:edgeView.getDiagramContainer()" sourceExpression="aql:target" targetExpression="aql:edgeView.targetNode.target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PinProvidedInterface']" containerViewExpression="aql:edgeView.getDiagramContainer()" sourceExpression="aql:target" targetExpression="aql:edgeView.targetNode.target"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(fa::ComponentPort)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:Unset" featureName="providedInterfaces" elementExpression="aql:edgeView.targetNode.target"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceImplementation" referenceName="ownedInterfaceImplementations">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="implementedInterface" valueExpression="aql:edgeView.targetNode.target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="providedInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="used-pinrequired source" precondition="aql:source.linkReconnectSource(source,target)" forceRefresh="true" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(cs::Component)->size() > 0">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceUse" referenceName="ownedInterfaceUses">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:edgeView.targetNode.target"/>
                        <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_UseInterface']" containerViewExpression="aql:edgeView.getDiagramContainer()" sourceExpression="aql:target" targetExpression="aql:edgeView.targetNode.target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateEdgeView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='IDB_PinRequiredInterface']" containerViewExpression="aql:edgeView.getDiagramContainer()" sourceExpression="aql:target" targetExpression="aql:edgeView.targetNode.target"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(fa::ComponentPort)->size() > 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:Unset" featureName="requiredInterfaces" elementExpression="aql:edgeView.targetNode.target"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(cs::Component)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfaceUse" referenceName="ownedInterfaceUses">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="usedInterface" valueExpression="aql:edgeView.targetNode.target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:target->filter(fa::ComponentPort)->size() > 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requiredInterfaces" valueExpression="aql:edgeView.targetNode.target"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Interfaces Diagram Blank" precondition="aql:self.isInLib()" titleExpression="aql:'[IDB] ' + self.name" browseExpression="aql:self.getComponentType()" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="ComponentPort from Model" label="" precondition="aql:element.isValidIDDndComponentPortFromModel(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDComponentPortFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="ComponentPort from Diagram" precondition="aql:element.isValidIDDndComponentPortFromDiagram(newViewContainer,oldContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']/@borderedNodeMappings[name='IDB_Port']">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDComponentPortFromDiagram(newViewContainer,oldContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Component from Model" precondition="aql:element.isValidIDDndComponentFromModel(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDComponentFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Component from Diagram" precondition="aql:element.isValidIDDndComponentFromDiagram(newViewContainer,oldContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Component']">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDComponentFromDiagram(newViewContainer,oldContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Allocation ExchangeItem from Model" precondition="aql:element.isValidIDDndAllocationExchangeItemFromModel(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']/@subNodeMappings[name='IDB_Operation'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDAllocationExchangeItemFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Allocation ExchangeItem from Diagram" precondition="aql:element.isValidIDDndAllocationExchangeItemFromDiagram(newViewContainer,oldContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']/@subNodeMappings[name='IDB_Operation'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_ExchangeItem']">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDAllocationExchangeItemFromDiagram(newViewContainer,oldContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="InterfaceDrop from Model" precondition="aql:element.isValidIDDndInterfaceFromModel(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDInterfaceFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="InterfaceDrop from Diagram" precondition="aql:element.isValidIDDndInterfaceFromDiagram(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='IDB_Interface']">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDInterfaceFromDiagram(newViewContainer,oldContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CB Reconnect Generalization Target" precondition="aql:self.canReconnectGeneralization(element.sub,target)">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="super" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CB Reconnect Generalization Source" precondition="aql:self.canReconnectGeneralization(target,element.super)" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="sub" valueExpression="aql:target"/>
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedGeneralizations"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CommunicationLink target" precondition="aql:target.oclIsKindOf(information::ExchangeItem) and not (element.eContainer().ownedCommunicationLinks->select(ownedCommunicationLink | ownedCommunicationLink.kind = element.kind and ownedCommunicationLink.exchangeItem = target)->size() > 0)">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeItem" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CommunicationLink source" precondition="aql:source.oclIsKindOf(communication::CommunicationLinkExchanger) and target.ownedCommunicationLinks->select(ownedCommunicationLink | ownedCommunicationLink.kind = element.kind and ownedCommunicationLink.exchangeItem = element.exchangeItem)->size() = 0" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedCommunicationLinks"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Constraint From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Accelerators" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@toolSections.1/@ownedTools[name='initialization.from.existing.diagram']"/>
        <toolSections name="Common" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%common.idb.constraint" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%common.idb.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%common.idb.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_3:EditionTableDescription" name="Requirements" domainClass="RequirementsPkg">
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/ContextArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/EPBSArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaModeller.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/OperationalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/PhysicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/SharedModel.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <ownedLineMappings name="Requirement Pkg" domainClass="RequirementsPkg" semanticCandidatesExpression="aql:self" headerLabelExpression="feature:name">
        <ownedSubLines name="requirements 1" reusedInMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='Sub%20Requirement%20Pkg']" domainClass="Requirement" semanticCandidatesExpression="aql:self.ownedRequirements" headerLabelExpression="aql:if (self.eClass().name = 'SystemUserRequirement') then 'SUR' else if (self.eClass().name = 'SystemFunctionalInterfaceRequirement') then 'SFIR' else if (self.eClass().name = 'SystemFunctionalRequirement') then 'SFR' else if (self.eClass().name = 'SystemNonFunctionalInterfaceRequirement') then 'SNFIR' else if (self.eClass().name = 'SystemNonFunctionalRequirement') then 'SNFR' else self.eClass().name endif endif endif endif endif">
          <delete name="delete requirement">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
              <subModelOperations xsi:type="tool_1:For" expression="feature:incomingTraces">
                <subModelOperations xsi:type="tool_1:RemoveElement"/>
              </subModelOperations>
              <subModelOperations xsi:type="tool_1:For" expression="feature:outgoingTraces">
                <subModelOperations xsi:type="tool_1:RemoveElement"/>
              </subModelOperations>
              <subModelOperations xsi:type="tool_1:RemoveElement"/>
            </firstModelOperation>
          </delete>
        </ownedSubLines>
        <ownedSubLines name="Sub Requirement Pkg" reusedSubLines="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='requirements%201'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='Sub%20Requirement%20Pkg']" reusedInMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='Sub%20Requirement%20Pkg']" domainClass="RequirementsPkg" semanticCandidatesExpression="aql:self.ownedRequirementPkgs" headerLabelExpression="feature:name">
          <create name="System User Requirement" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='requirements%201']">
            <variables name="root" documentation="The semantic element of the table."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SystemUserRequirement" referenceName="ownedRequirements">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="requirement"/>
              </subModelOperations>
            </firstModelOperation>
          </create>
          <create name="System Functional Requirement" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='requirements%201']">
            <variables name="root" documentation="The semantic element of the table."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SystemFunctionalRequirement" referenceName="ownedRequirements">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="requirement"/>
              </subModelOperations>
            </firstModelOperation>
          </create>
          <create name="System Functional Interface Requirement" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='requirements%201']">
            <variables name="root" documentation="The semantic element of the table."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SystemFunctionalInterfaceRequirement" referenceName="ownedRequirements">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="requirement"/>
              </subModelOperations>
            </firstModelOperation>
          </create>
          <create name="System Non Functional Requirement" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='requirements%201']">
            <variables name="root" documentation="The semantic element of the table."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SystemNonFunctionalRequirement" referenceName="ownedRequirements">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="requirement"/>
              </subModelOperations>
            </firstModelOperation>
          </create>
          <create name="System Non Functional Interface Requirement" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='requirements%201']">
            <variables name="root" documentation="The semantic element of the table."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SystemNonFunctionalInterfaceRequirement" referenceName="ownedRequirements">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="requirement"/>
              </subModelOperations>
            </firstModelOperation>
          </create>
          <create name="Requirement Pkg" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='Sub%20Requirement%20Pkg']">
            <variables name="root" documentation="The semantic element of the table."/>
            <variables name="element" documentation="The semantic currently edited element."/>
            <variables name="container" documentation="The semantic element corresponding to the view container."/>
            <firstModelOperation xsi:type="tool_1:CreateInstance" typeName="RequirementsPkg" referenceName="ownedRequirementPkgs">
              <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Req Pkg"/>
            </firstModelOperation>
          </create>
          <delete name="delete sub requirement pkg" forceRefresh="true">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
            <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
              <subModelOperations xsi:type="tool_1:For" expression="aql:self.eAllContents()->filter(requirement::Requirement)">
                <subModelOperations xsi:type="tool_1:RemoveElement"/>
              </subModelOperations>
              <subModelOperations xsi:type="tool_1:For" expression="aql:self.eAllContents()->filter(requirement::RequirementsPkg)">
                <subModelOperations xsi:type="tool_1:RemoveElement"/>
              </subModelOperations>
              <subModelOperations xsi:type="tool_1:RemoveElement"/>
            </firstModelOperation>
          </delete>
        </ownedSubLines>
        <create name="Requirement Pkg" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='Sub%20Requirement%20Pkg']">
          <variables name="root" documentation="The semantic element of the table."/>
          <variables name="element" documentation="The semantic currently edited element."/>
          <variables name="container" documentation="The semantic element corresponding to the view container."/>
          <firstModelOperation xsi:type="tool_1:CreateInstance" typeName="RequirementsPkg" referenceName="ownedRequirementPkgs">
            <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Req Pkg"/>
          </firstModelOperation>
        </create>
        <create name="System User Requirement" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='requirements%201']">
          <variables name="root" documentation="The semantic element of the table."/>
          <variables name="element" documentation="The semantic currently edited element."/>
          <variables name="container" documentation="The semantic element corresponding to the view container."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
            <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SystemUserRequirement" referenceName="ownedRequirements">
              <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="requirement"/>
            </subModelOperations>
          </firstModelOperation>
        </create>
        <create name="System Functional Requirement" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='requirements%201']">
          <variables name="root" documentation="The semantic element of the table."/>
          <variables name="element" documentation="The semantic currently edited element."/>
          <variables name="container" documentation="The semantic element corresponding to the view container."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
            <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SystemFunctionalRequirement" referenceName="ownedRequirements">
              <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="requirement"/>
            </subModelOperations>
          </firstModelOperation>
        </create>
        <create name="System Functional Interface Requirement" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='requirements%201']">
          <variables name="root" documentation="The semantic element of the table."/>
          <variables name="element" documentation="The semantic currently edited element."/>
          <variables name="container" documentation="The semantic element corresponding to the view container."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
            <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SystemFunctionalInterfaceRequirement" referenceName="ownedRequirements">
              <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="requirement"/>
            </subModelOperations>
          </firstModelOperation>
        </create>
        <create name="System Non Functional Requirement" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='requirements%201']">
          <variables name="root" documentation="The semantic element of the table."/>
          <variables name="element" documentation="The semantic currently edited element."/>
          <variables name="container" documentation="The semantic element corresponding to the view container."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
            <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SystemNonFunctionalRequirement" referenceName="ownedRequirements">
              <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="requirement"/>
            </subModelOperations>
          </firstModelOperation>
        </create>
        <create name="System Non Functional Interface Requirement" forceRefresh="true" elementsToSelect="service:stdEmptyCollection" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Requirements']/@ownedLineMappings[name='Requirement%20Pkg']/@ownedSubLines[name='requirements%201']">
          <variables name="root" documentation="The semantic element of the table."/>
          <variables name="element" documentation="The semantic currently edited element."/>
          <variables name="container" documentation="The semantic element corresponding to the view container."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
            <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SystemNonFunctionalInterfaceRequirement" referenceName="ownedRequirements">
              <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="requirement"/>
            </subModelOperations>
          </firstModelOperation>
        </create>
        <delete name="no delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedColumnMappings name="Name" headerLabelExpression="Name" featureName="name" labelExpression="feature:name">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
          <mask mask="{0}"/>
        </directEdit>
      </ownedColumnMappings>
      <ownedColumnMappings name="Requirement Id" headerLabelExpression="Requirement Id" canEdit="aql:self->filter(requirement::Requirement)->size() > 0" featureName="requirementId" labelExpression="feature:requirementId">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool_1:SetValue" featureName="requirementId" valueExpression="aql:arg0"/>
          <mask mask="{0}"/>
        </directEdit>
      </ownedColumnMappings>
      <ownedColumnMappings name="Summary" headerLabelExpression="Summary" canEdit="aql:self->filter(requirement::Requirement)->size() > 0" featureName="summary" labelExpression="feature:summary">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool_1:SetValue" featureName="summary" valueExpression="aql:arg0"/>
          <mask mask="{0}"/>
        </directEdit>
      </ownedColumnMappings>
      <ownedColumnMappings name="Description" headerLabelExpression="Description" canEdit="aql:self->filter(requirement::Requirement)->size() > 0" featureName="description" labelExpression="feature:description">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool_1:SetValue" featureName="description" valueExpression="aql:arg0"/>
          <mask mask="{0}"/>
        </directEdit>
      </ownedColumnMappings>
      <ownedColumnMappings name="Additional Information" headerLabelExpression="Additional Information" canEdit="aql:self->filter(requirement::Requirement)->size() > 0" featureName="additionalInformation" labelExpression="feature:additionalInformation">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool_1:SetValue" featureName="additionalInformation" valueExpression="aql:arg0"/>
          <mask mask="{0}"/>
        </directEdit>
      </ownedColumnMappings>
      <ownedColumnMappings name="Verification Method" headerLabelExpression="Verification Method" canEdit="aql:self->filter(requirement::Requirement)->size() > 0" featureName="verificationMethod" labelExpression="feature:verificationMethod">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool_1:SetValue" featureName="verificationMethod" valueExpression="aql:arg0"/>
          <mask mask="{0}"/>
        </directEdit>
      </ownedColumnMappings>
      <ownedColumnMappings name="Verification Phase" headerLabelExpression="Verification Phase" canEdit="aql:self->filter(requirement::Requirement)->size() > 0" featureName="verificationPhase" labelExpression="feature:verificationPhase">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool_1:SetValue" featureName="verificationPhase" valueExpression="aql:arg0"/>
          <mask mask="{0}"/>
        </directEdit>
      </ownedColumnMappings>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraint%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']" name="Contextual Capability Realization Involvement" label="%common.cri" titleExpression="aql:'[CRI] ' + self.name" domainClass="CapabilityRealization">
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/ContextArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/EPBSArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaModeller.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/OperationalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/PhysicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/SharedModel.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%common.cri.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:self.isDiagramTitleBlock()"/>
      </filters>
      <defaultLayer name="default layer" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']">
        <nodeMappings name="CCRI CapabilityRealization" detailDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Data%20Flow%20Blank'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Data%20Flow%20Blank'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20Interfaces%20Scenario'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20Exchanges%20Scenario'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Functional%20Scenario'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Capability%20Realization%20Involvement'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='Capability%20Realization%20Refinement']" navigationDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Existing%20Component%20Exchanges%20Scenario'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Existing%20Functional%20Scenario'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Existing%20Component%20Interfaces%20Scenario'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='Diagram%20Contextual%20Capability%20Realization%20Involvement'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='Diagram%20Capability%20Realization%20Refinement']" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" createElements="false" domainClass="CapabilityRealization">
          <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="6" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/CapabilityRealization.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self = container">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="6" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/CapabilityRealization.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings name="CCRI Component" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" createElements="false" domainClass="Component">
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Component%20Breakdown']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Physical%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Component%20Breakdown']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Architecture%20Blank']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Detailed%20Interfaces']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20External%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20External%20Interfaces']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Internal%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Component%20Internal%20Interfaces']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interfaces%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Interfaces%20Diagram%20Blank']"/>
          <detailDescriptions xsi:type="description_3:TableCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Delegations']/@ownedRepresentationCreationDescriptions[name='Interface%20delegations']"/>
          <conditionnalStyles predicateExpression="aql:(self->filter(cs::Component)->select(c | c.isActor() and c.human = true)->size() > 0)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Actor.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self.isActor())">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.ui.resources/icons/full/png/LogicalActor.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self.human = false)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.ui.resources/icons/full/png/LogicalComponent.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self.human = true)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.ui.resources/icons/full/png/LogicalComponentHuman.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.isActor())">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.ui.resources/icons/full/png/PhysicalActor.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self.human = false)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.ui.resources/icons/full/png/PhysicalComponentNode.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self.human = true)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.ui.resources/icons/full/png/PhysicalComponentHumanNode.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self.human = false)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.ui.resources/icons/full/png/PhysicalComponentBehavior.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self.human = true)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.ui.resources/icons/full/png/PhysicalComponentHumanBehavior.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.human = false)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.ui.resources/icons/full/png/PhysicalComponent.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.human = true)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.ui.resources/icons/full/png/PhysicalComponentHumanUnset.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() != 0)">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="5" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/CSCI.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="CCRI involvement" label="CCRI Involvement" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@nodeMappings[name='CCRI%20CapabilityRealization']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@nodeMappings[name='CCRI%20Component']" targetFinderExpression="feature:involved" sourceFinderExpression="feature:involver" domainClass="CapabilityRealizationInvolvement" useDomainElement="true">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <toolSections name="Tools">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Capability Realization" name="capability.realization" label="%common.cri.capability.realization" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@nodeMappings[name='CCRI%20CapabilityRealization']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CapabilityRealization.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getArchitecture().containedCapabilityRealizationPkg">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CapabilityRealization" referenceName="ownedCapabilityRealizations">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Logical Actor / Physical Actor (and creates a Part in the Context element of the current level)" name="actor" label="%common.cri.actor" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@nodeMappings[name='CCRI%20Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Actor.gif">
            <filters precondition="aql:(self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() != 0)"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(cs::BlockArchitecture).createActor()">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                  <parameters name="context" value="aql:self"/>
                  <parameters name="scope" value="aql:self"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Logical / Physical Component / Configuration Item (and creates a Part in the selected Container Component)" name="component" label="%common.cri.component" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@nodeMappings[name='CCRI%20Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ComponentInstance.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getArchitecture().system">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(pa::PhysicalComponent)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PhysicalComponent" referenceName="ownedPhysicalComponents">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="nature" valueExpression="BEHAVIOR"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(la::LogicalComponent)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="LogicalComponent" referenceName="ownedLogicalComponents">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(epbs::ConfigurationItem)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ConfigurationItem" referenceName="ownedConfigurationItems">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="SystemCI"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a new Involvement relationship between the source Capability Realization and the target Component/Actor." name="involvement" label="%common.cri.involvement" precondition="aql:not self.isComponentInvolvedWithCapability(preSource, preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@edgeMappings[name='CCRI%20involvement']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Use.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.oclIsKindOf(la::CapabilityRealization)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CapabilityRealizationInvolvement" referenceName="ownedCapabilityRealizationInvolvements">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="involved" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Actors" name="actors" label="%common.cri.actors" precondition="aql:elementView->filter(diagram::DDiagram)->size() > 0" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <filters precondition="aql:(self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() != 0)"/>
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleActors" computationExpression="aql:self.void2Null(elementView.getDisplayedNodeActors())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleActorViews" computationExpression="aql:self.void2Null(elementView.getDisplayedActorNodeViews())"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectActors" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(elementView.getMCBActors())"/>
                  <parameters name="resultVariable" value="selectedActors"/>
                  <parameters name="wizardMessage" value="aql:'Select actors to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:visibleActors"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedActors = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="ShowHideActors" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.ShowHideMCComponents">
                    <parameters name="view" value="aql:elementView"/>
                    <parameters name="selected components" value="aql:self.void2Null(selectedActors)"/>
                    <parameters name="components" value="aql:visibleActors"/>
                    <parameters name="visible component views" value="aql:visibleActorViews"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Components" name="components" label="%common.cri.components" precondition="aql:elementView->filter(diagram::DDiagram)->size() > 0" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <filters precondition="aql:(self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() != 0)"/>
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleComponents" computationExpression="aql:self.void2Null(elementView.getDisplayedNodeComponents())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleComponentViews" computationExpression="aql:self.void2Null(elementView.getDisplayedComponentNodeViews())"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectComponents" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(elementView.getCRBComponents())"/>
                  <parameters name="resultVariable" value="selectedComponents"/>
                  <parameters name="wizardMessage" value="aql:'Select components to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:visibleComponents"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedComponents = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="ShowHideComponents" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.ShowHideMCComponents">
                    <parameters name="view" value="aql:elementView"/>
                    <parameters name="selected components" value="aql:self.void2Null(selectedComponents)"/>
                    <parameters name="visible components" value="aql:visibleComponents"/>
                    <parameters name="visible component views" value="aql:visibleComponentViews"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Capability Realizations" name="capability.realizations" label="%common.cri.capability.realizations" precondition="aql:elementView->filter(diagram::DDiagram)->size() > 0" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="semanticCandidate" computationExpression="CapabilityRealization"/>
            </element>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.genericSelectElements()">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (resultVariable = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.genericShowHideElements()"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Relationships" name="relationships" label="%common.cri.relationships" precondition="aql:not (elementView.oclIsKindOf(diagram::DDiagram)) and (self.oclIsKindOf(la::CapabilityRealization))" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectInterfaces" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.getAvailableLinksForCRIDiagram()"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(self.getExistingLinksFromCRIDiagram())"/>
                  <parameters name="resultVariable" value="selectedElements"/>
                  <parameters name="wizardMessage" value="aql:'Select elements to show in ' + element.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedElements != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.showHideCRIRelationships(selectedElements)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="delete capella elements">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="deleteCapellaElement" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="NamedElement DirectEdit" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Constraint From Project Explorer" label="D&amp;D Constraint From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramNavigationDescription" name="Diagram Contextual Capability Realization Involvement" label="Contextual Capability Realization InvolvementContextual Capability Realization Involvement" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Contextual Capability Realization Involvement" precondition="aql:self.isInLib() and self.oclIsKindOf(la::CapabilityRealization)" titleExpression="aql:'[CII] ' + self.name" browseExpression="aql:self.getComponentType()" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Capability Realization Refinement" precondition="aql:self.isInLib()" titleExpression="aql:'[CRR] ' + self.name">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramNavigationDescription" name="Diagram Capability Realization Refinement">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
            <diagramDescription href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Capability%20Realization%20Refinement']"/>
          </ownedTools>
        </toolSections>
        <toolSections name="Common" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%common.cri.constraint" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%common.cri.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%common.cri.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Capabilities%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraint%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20from%20Diagram'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']" name="Capability Realization Blank" label="%common.crb" titleExpression="aql:'[CRB] ' + self.name" domainClass="CapabilityRealizationPkg">
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.capability.realizations.filter" label="%common.crb.hide.capability.realizations.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@nodeMappings[name='CRB%20CapabilityRealization']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.involvements.filter" label="%common.crb.hide.involvements.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Involvement']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.capability.extends.filter" label="%common.crb.hide.capability.extends.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Cap%20Realization%20Extends']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.capability.includes.filter" label="%common.crb.hide.capability.includes.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Cap%20Realization%20Include']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.capability.realization.generalizations.filter" label="%common.crb.hide.capability.realization.generalizations.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Cap%20Generalization']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.components.filter" label="%common.crb.hide.components.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']" semanticConditionExpression="aql:self.isActor()"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.actors.filter" label="%common.crb.hide.actors.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']" semanticConditionExpression="aql:not self.isActor()"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.actor.generalizations.filter" label="%common.crb.hide.actor.generalizations.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Actor%20Generalization']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%common.crb.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:self.isDiagramTitleBlock()"/>
      </filters>
      <defaultLayer name="default layer CRB" label="default layer" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']">
        <nodeMappings name="CRB CapabilityRealization" navigationDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='Diagram%20Contextual%20Capability%20Realization%20Involvement'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='Diagram%20Capability%20Realization%20Refinement'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Existing%20Component%20Exchanges%20Scenario'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Existing%20Component%20Interfaces%20Scenario'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Existing%20Functional%20Scenario']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" createElements="false" domainClass="CapabilityRealization">
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Capability%20Realization%20Involvement']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='Capability%20Realization%20Refinement']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20Interfaces%20Scenario']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20Exchanges%20Scenario']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Functional%20Scenario']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Data%20Flow%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Data%20Flow%20Blank']"/>
          <detailDescriptions xsi:type="description_3:TableCreationDescription" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Interfaces%20-%20Scenarios']/@ownedRepresentationCreationDescriptions[name='Interfaces%20-%20Scenarios']"/>
          <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/CapabilityRealization.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <edgeMappings name="CRB Involvement" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getMBCapabilityInvolvementSemanticCandidates" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@nodeMappings[name='CRB%20CapabilityRealization']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']" targetFinderExpression="feature:involved" sourceFinderExpression="feature:involver" domainClass="CapabilityRealizationInvolvement" useDomainElement="true">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CRB Cap Realization Extends" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getMBCapabilityExtendSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@nodeMappings[name='CRB%20CapabilityRealization']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@nodeMappings[name='CRB%20CapabilityRealization']" targetFinderExpression="aql:self.extended" sourceFinderExpression="feature:extension" domainClass="AbstractCapabilityExtend" useDomainElement="true">
          <style lineStyle="dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="&#xab; e &#xbb;">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CRB Cap Realization Include" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getMBCapabilityIncludeSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@nodeMappings[name='CRB%20CapabilityRealization']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@nodeMappings[name='CRB%20CapabilityRealization']" targetFinderExpression="feature:included" sourceFinderExpression="feature:inclusion" domainClass="AbstractCapabilityInclude" useDomainElement="true">
          <style lineStyle="dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="&#xab; i &#xbb;">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CRB Cap Generalization" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getMBCapabilityGeneralizationSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@nodeMappings[name='CRB%20CapabilityRealization']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@nodeMappings[name='CRB%20CapabilityRealization']" targetFinderExpression="feature:super" sourceFinderExpression="feature:sub" domainClass="AbstractCapabilityGeneralization" useDomainElement="true">
          <style lineStyle="dot" targetArrow="InputClosedArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="CRB Actor Generalization" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="service:diagram.getMBActorGeneralizationSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']" targetFinderExpression="feature:super" sourceFinderExpression="aql:self.eContainer()" domainClass="Generalization" useDomainElement="true" reconnections="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='CB%20Reconnect%20Generalization%20Target'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='CB%20Reconnect%20Generalization%20Source']">
          <style lineStyle="dot" targetArrow="InputClosedArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="CRB Component" preconditionExpression="aql:not (self.isARootComponent()) and self.isDiagramAndElementFromSameLayer(diagram)" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Capability%20Realization%20Involvement']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" createElements="false" domainClass="Component" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Component%20from%20Diagram']" reusedContainerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']">
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Component%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Component%20Breakdown']"/>
          <detailDescriptions xsi:type="tool:DiagramCreationDescription" href="logical.odesign#//@ownedViewpoints[name='Logical%20Architecture']/@ownedRepresentations[name='Logical%20Architecture%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Logical%20Architecture%20Blank']"/>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          <conditionnalStyles predicateExpression="aql:(self.isActor() = true) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']">
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.isActor() = true) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.isActor() = true) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'LogicalComponent') and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(epbs::ConfigurationItem)->size() > 0) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(epbs::ConfigurationItem)->size() > 0) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self->filter(epbs::ConfigurationItem)->size() > 0) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Class_Border_Brown']" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']">
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Class_Border_Brown']" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::NODE) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Class_Border_Brown']" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']">
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.nature = pa::PhysicalComponentNature::BEHAVIOR) and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self = container)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']">
              <labelFormat>bold</labelFormat>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.isAbstract() = false)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:(self.eClass().name = 'PhysicalComponent') and (self.isAbstract() = true)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="service:capellaLabelService(view, diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" backgroundStyle="GradientTopToBottom" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_min']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']">
              <labelFormat>italic</labelFormat>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <toolSections name="Tools">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Capability Realization" name="capability.realization" label="%common.crb.capability.realization" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@nodeMappings[name='CRB%20CapabilityRealization']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CapabilityUseCase.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CapabilityRealization" referenceName="ownedCapabilityRealizations">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Logical / Physical Component (and creates a Part in the selected Container Component)" name="component" label="%common.crb.component" precondition="aql:(self.oclIsKindOf(cs::Component) or self.oclIsKindOf(la::CapabilityRealizationPkg)) and (self.isActor() = false)" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/System.gif">
            <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() != 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="Component" featureName="ownedInterfaceUses"/>
            </filters>
            <variable name="container">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="firstComponent" computationExpression="aql:container.eContainerOrSelf(cs::BlockArchitecture).getFirstComponent()"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(la::LogicalComponent)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="LogicalComponent" referenceName="ownedLogicalComponents" variableName="comp">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(pa::PhysicalComponent)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="variable" value="natureParent"/>
                    <parameters name="value" value="feature:nature"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PhysicalComponent" referenceName="ownedPhysicalComponents" variableName="comp">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="nature" valueExpression="aql:natureParent.toString()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(epbs::ConfigurationItem)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ConfigurationItem" referenceName="ownedConfigurationItems" variableName="comp">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="SystemCI"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (self.oclIsKindOf(cs::Component))">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:firstComponent->size() != 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:firstComponent">
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(la::LogicalComponent)">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="LogicalComponent" referenceName="ownedLogicalComponents">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(pa::PhysicalComponent)">
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="natureParent"/>
                          <parameters name="value" value="feature:nature"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PhysicalComponent" referenceName="ownedPhysicalComponents">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="nature" valueExpression="aql:natureParent.toString()"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(epbs::ConfigurationItem)">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ConfigurationItem" referenceName="ownedConfigurationItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="SystemCI"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Configuration Items">
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Configuration Item with kind COTS (Commercial Off The Shelf)." name="cots" label="%common.crb.cots" precondition="aql:(self.oclIsKindOf(cs::Component) or self.oclIsKindOf(la::CapabilityRealizationPkg)) and not (self.isActor())" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/System.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="Component" featureName="ownedInterfaceUses"/>
              </filters>
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="firstComponent" computationExpression="aql:container.eContainerOrSelf(cs::BlockArchitecture).getFirstComponent()"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createCOTSCI()">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="aql:self"/>
                    <parameters name="scope" value="aql:self"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Configuration Item with kind CS (Computer Software) ." name="cs" label="%common.crb.cs" precondition="aql:(self.oclIsKindOf(cs::Component) or self.oclIsKindOf(la::CapabilityRealizationPkg)) and not (self.isActor())" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/System.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="Component" featureName="ownedInterfaceUses"/>
              </filters>
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="firstComponent" computationExpression="aql:container.eContainerOrSelf(cs::BlockArchitecture).getFirstComponent()"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createCSCI()">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="aql:self"/>
                    <parameters name="scope" value="aql:self"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Configuration Item with kind HW (Hardware) ." name="hw" label="%common.crb.hw" precondition="aql:(self.oclIsKindOf(cs::Component) or self.oclIsKindOf(la::CapabilityRealizationPkg)) and not (self.isActor())" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/System.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="Component" featureName="ownedInterfaceUses"/>
              </filters>
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="firstComponent" computationExpression="aql:container.eContainerOrSelf(cs::BlockArchitecture).getFirstComponent()"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createHWCI()">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="aql:self"/>
                    <parameters name="scope" value="aql:self"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Configuration Item with kind Interface." name="interface" label="%common.crb.interface" precondition="aql:(self.oclIsKindOf(cs::Component) or self.oclIsKindOf(la::CapabilityRealizationPkg)) and not (self.isActor())" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/System.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="Component" featureName="ownedInterfaceUses"/>
              </filters>
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="firstComponent" computationExpression="aql:container.eContainerOrSelf(cs::BlockArchitecture).getFirstComponent()"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createInterfaceCI()">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="aql:self"/>
                    <parameters name="scope" value="aql:self"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Configuration Item with kind NDI (Not Developed Item) ." name="ndi" label="%common.crb.ndi" precondition="aql:(self.oclIsKindOf(cs::Component) or self.oclIsKindOf(la::CapabilityRealizationPkg)) and not (self.isActor())" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/System.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="Component" featureName="ownedInterfaceUses"/>
              </filters>
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="firstComponent" computationExpression="aql:container.eContainerOrSelf(cs::BlockArchitecture).getFirstComponent()"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createNDICI()">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="aql:self"/>
                    <parameters name="scope" value="aql:self"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Configuration Item with kind Prime Item." name="prime.item" label="%common.crb.prime.item" precondition="aql:(self.oclIsKindOf(cs::Component) or self.oclIsKindOf(la::CapabilityRealizationPkg)) and not (self.isActor())" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/System.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="Component" featureName="ownedInterfaceUses"/>
              </filters>
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="firstComponent" computationExpression="aql:container.eContainerOrSelf(cs::BlockArchitecture).getFirstComponent()"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createPrimeItemCI()">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="aql:self"/>
                    <parameters name="scope" value="aql:self"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Configuration Item with kind System." name="system" label="%common.crb.system" precondition="aql:(self.oclIsKindOf(cs::Component) or self.oclIsKindOf(la::CapabilityRealizationPkg)) and not (self.isActor())" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/System.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="Component" featureName="ownedInterfaceUses"/>
              </filters>
              <variable name="container">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="firstComponent" computationExpression="aql:container.eContainerOrSelf(cs::BlockArchitecture).getFirstComponent()"/>
              </variable>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.createSystemCI()">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                    <parameters name="context" value="aql:self"/>
                    <parameters name="scope" value="aql:self"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Logical Actor / Physical Actor (and creates a Part in the Context element of the current level)" name="actor" label="%common.crb.actor" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Actor.gif">
            <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() != 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="Component" featureName="ownedInterfaceUses"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(cs::BlockArchitecture).createActor()">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                  <parameters name="context" value="aql:self"/>
                  <parameters name="scope" value="aql:self"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a new Involvement relationship between the source Capability Realization and the target Component." name="involvement" label="%common.crb.involvement" precondition="aql:self.isComponentTargetAvailableForCapInvolvement(preSource,preTarget)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Involvement']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Use.gif" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@nodeMappings[name='CRB%20CapabilityRealization']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="CapabilityRealizationInvolvement" referenceName="ownedCapabilityRealizationInvolvements">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="involved" valueExpression="aql:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a new Extension relationship between the source and target Capability Realizations." name="extends" label="%common.crb.extends" precondition="aql:not (preSource.extends.extended->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Cap%20Realization%20Extends']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Extend.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="AbstractCapabilityExtend" referenceName="extends">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="extended" valueExpression="aql:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a new Inclusion relationship between the source and target Capability Realizations." name="includes" label="%common.crb.includes" precondition="aql:not (preSource.includes.included->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Cap%20Realization%20Include']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Include.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="AbstractCapabilityInclude" referenceName="includes">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="included" valueExpression="aql:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a new Generalization relationship between the source and target elements (Actors/Components/Capabilities)." name="actor.generalization" label="%common.crb.actor.generalization" precondition="aql:self.canReconnectGeneralization(preSource,preTarget)" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Actor%20Generalization'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@edgeMappings[name='CRB%20Cap%20Generalization']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Generalization.gif" connectionStartPrecondition="aql:self.preGeneralization(preSource)">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:Switch">
                <cases conditionExpression="aql:source.oclIsKindOf(interaction::AbstractCapability)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="AbstractCapabilityGeneralization" referenceName="superGeneralizations">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="super" valueExpression="aql:target"/>
                  </subModelOperations>
                </cases>
                <cases conditionExpression="aql:source.oclIsKindOf(capellacore::GeneralizableElement)">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="capellacore.Generalization" referenceName="ownedGeneralizations">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="super" valueExpression="aql:target"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sub" valueExpression="aql:source"/>
                    </subModelOperations>
                  </subModelOperations>
                </cases>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" name="capability.realizations" label="%common.crb.capability.realizations" precondition="aql:elementView->filter(diagram::DDiagram)->size() > 0" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="semanticCandidate" computationExpression="AbstractCapability"/>
            </element>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.genericSelectElements()">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (resultVariable = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.genericShowHideElements()"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" name="components" label="%common.crb.components" precondition="aql:(self.oclIsKindOf(cs::Component) or self.oclIsKindOf(la::CapabilityRealizationPkg)) and not (self.isActor())" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleComponents" computationExpression="aql:self.void2Null(elementView.getDisplayedContainerComponents())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleComponentViews" computationExpression="aql:self.void2Null(elementView.getDisplayedComponentContainerViews())"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectComponents" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(elementView.getCRBComponents())"/>
                  <parameters name="resultVariable" value="selectedComponents"/>
                  <parameters name="wizardMessage" value="aql:'Select components to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:visibleComponents"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedComponents = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="ShowHideComponents" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.ShowHideMCComponents">
                    <parameters name="view" value="aql:elementView"/>
                    <parameters name="selected components" value="aql:self.void2Null(selectedComponents)"/>
                    <parameters name="visible components" value="aql:visibleComponents"/>
                    <parameters name="visible component views" value="aql:visibleComponentViews"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" name="actors" label="%common.crb.actors" precondition="aql:elementView->filter(diagram::DDiagram)->size() > 0" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleActors" computationExpression="aql:self.void2Null(elementView.getDisplayedContainerActors())"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleActorViews" computationExpression="aql:self.void2Null(elementView.getDisplayedActorContainerViews())"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectActors" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(elementView.getMCBActors())"/>
                  <parameters name="resultVariable" value="selectedActors"/>
                  <parameters name="wizardMessage" value="aql:'Select actors to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:visibleActors"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedActors = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="ShowHideActors" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.ShowHideMCComponents">
                    <parameters name="view" value="aql:elementView"/>
                    <parameters name="selected components" value="aql:self.void2Null(selectedActors)"/>
                    <parameters name="visible components" value="aql:visibleActors"/>
                    <parameters name="visible component views" value="aql:visibleActorViews"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Relationships" name="relationships" label="%common.crb.relationships" precondition="aql:not (elementView.oclIsKindOf(diagram::DDiagram)) and (self.oclIsKindOf(la::CapabilityRealization) or (self.isActor())" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectInterfaces" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.getAvailableLinksForCRBDiagram()"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(self.getExistingLinksFromCRBDiagram())"/>
                  <parameters name="resultVariable" value="selectedInterfaces"/>
                  <parameters name="wizardMessage" value="aql:'Select elements to show in ' + element.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedInterfaces != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.showHideRelationShipFromCRB(selectedInterfaces)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Constraint From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Component from Model" precondition="aql:element.isValidIDDndComponentFromModel(newViewContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDComponentFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Capabilities From Project Explorer" precondition="aql:element.oclIsKindOf(la::CapabilityRealization) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@nodeMappings[name='CRB%20CapabilityRealization']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Component from Diagram" precondition="aql:element.isValidIDDndComponentFromDiagram(newViewContainer,oldContainer)" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capability%20Realization%20Blank']/@defaultLayer/@containerMappings[name='CRB%20Component']">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDComponentFromDiagram(newViewContainer,oldContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CB Reconnect Generalization Target" precondition="aql:self.canReconnectGeneralization(element.sub,target)">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="super" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ReconnectEdgeDescription" name="CB Reconnect Generalization Source" precondition="aql:self.canReconnectGeneralization(target,element.super)" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="sub" valueExpression="aql:target"/>
                <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedGeneralizations"/>
              </firstModelOperations>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="delete capella elements">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="deleteCapellaElement" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
        </toolSections>
        <toolSections name="Common" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%common.crb.constraint" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%common.crb.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%common.crb.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Package%20Dependencies']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocate%20InterfacePkg%20from%20Model'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']" name="Package Dependencies" label="%common.pd" titleExpression="aql:'[PD] ' + self.name" domainClass="AbstractDependenciesPkg" preconditionExpression="">
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/ContextArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/EPBSArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaModeller.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/OperationalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/PhysicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/SharedModel.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%common.pd.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:self.isDiagramTitleBlock()"/>
      </filters>
      <defaultLayer name="Packages" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@containerMappings[name='DT_InterfacePkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']">
        <edgeMappings name="PD_PkgDependency" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Package%20Dependencies']/@defaultLayer/@toolSections.0/@ownedTools[name='No%20Delete']" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@containerMappings[name='DT_InterfacePkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataPkg']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_DataPkg'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@containerMappings[name='DT_InterfacePkg']" targetFinderExpression="aql:self.getDependentPackages2(diagram)">
          <style lineStyle="dash">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <toolSections name="Dependencies">
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Data Packages" name="data.packages" label="%common.pd.data.packages" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.getDiagramContainer()"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectPackages" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:elementView.getAvailableDataPkgsToInsert()"/>
                  <parameters name="resultVariable" value="selectedPkgs"/>
                  <parameters name="wizardMessage" value="aql:'Select Packages to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(elementView.containers.target->filter(information::DataPkg))"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedPkgs = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.showHideDataPkgs(selectedPkgs)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:diagram.forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Iinterface Packages" name="interface.packages" label="%common.pd.interface.packages" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.getDiagramContainer()"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectPackages" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:elementView.getAvailableInterfacePkgsToInsert()"/>
                  <parameters name="resultVariable" value="selectedPkgs"/>
                  <parameters name="wizardMessage" value="aql:'Select Packages to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(diagram.containers.target->filter(cs::InterfacePkg))"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedPkgs = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.showHideInterfacePkgs(selectedPkgs)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:diagram.forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert/Remove Dependent Packages" name="dependencies" label="%common.pd.dependencies" precondition="aql:not (elementView.oclIsKindOf(diagram::DDiagram))" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.showHidePackageDependencies(elementView.getDiagramContainer())"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="No Delete">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="NoDeleteElement" id="org.polarsys.capella.core.sirius.analysis.delete.NoDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Package Dependencies" precondition="aql:self.isInLib()" titleExpression="aql:'[PD] ' + self.name" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Package%20Dependencies']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Allocate InterfacePkg from Model" precondition="aql:element.oclIsKindOf(capellacore::AbstractDependenciesPkg) and element.canBeDropped(newViewContainer)" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@additionalLayers[name='Communication%20Model']/@containerMappings[name='DT_InterfacePkg']" containerViewExpression="aql:newContainerView"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Common" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%common.pd.constraint" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%common.pd.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%common.pd.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_3:CrossTableDescription" name="Interface Delegations" titleExpression="aql:'[ID] ' + self.name" preconditionExpression="aql:self.oclIsKindOf(la::LogicalComponent) or self.oclIsKindOf(pa::PhysicalComponent)" domainClass="Component">
      <ownedRepresentationCreationDescriptions xsi:type="description_3:TableCreationDescription" name="Interface delegations" precondition="aql:self.oclIsKindOf(la::LogicalComponent) or self.oclIsKindOf(pa::PhysicalComponent)" titleExpression="aql:'[ID] ' + self.name" tableDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Delegations']">
        <containerViewVariable name="containerView"/>
        <representationNameVariable name="tableName"/>
      </ownedRepresentationCreationDescriptions>
      <ownedLineMappings name="TID line" domainClass="Component" semanticCandidatesExpression="aql:self.getSubUsedComponents()" headerLabelExpression="feature:name"/>
      <ownedColumnMappings name="TID column" headerLabelExpression="aql:self.getTIDInterfaceLabel()" domainClass="Interface" semanticCandidatesExpression="aql:viewpoint.target.getTIDInterfaces()"/>
      <intersection name="TID Cell Value" canEdit="false" lineMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Delegations']/@ownedLineMappings[name='TID%20line']" columnMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Delegations']/@ownedColumnMappings.0" labelExpression="aql:self.getTIDLabel(column,line)" columnFinderExpression="aql:self.getRelatedInterfaces()"/>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']" name="Interface Diagram" label="%common.id" titleExpression="aql:'[ID] ' + self.name" domainClass="Interface">
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%common.id.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:self.isDiagramTitleBlock()"/>
      </filters>
      <defaultLayer name="default IDB" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']">
        <containerMappings name="ID_Interface" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="aql:self" domainClass="Interface" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20ExchangeItem%20from%20Model']" childrenPresentation="List">
          <subNodeMappings name="ID_Attribute" preconditionExpression="aql:self.association = null" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@toolSections.0/@ownedTools[name='NamedElement%20DirectEdit']" semanticCandidatesExpression="feature:ownedFeatures" domainClass="Property">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.multiplicityToString() + ' ' + self.maxCard.value + ' feature:name' + if (self.type != null) then ' : ' + self.type.name endif" labelAlignment="LEFT" sizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </subNodeMappings>
          <subNodeMappings name="ID_Operation" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@toolSections.0/@ownedTools[name='Allocation%20DirectEdit']" semanticCandidatesExpression="feature:ownedExchangeItemAllocations" semanticElements="aql:self.makeUnion(self, self.allocatedItem, self.allocatedItem.ownedElements)" domainClass="CapellaElement">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getOperationLabel(diagram)" labelAlignment="LEFT" sizeComputationExpression="1">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.abstract = true">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelFormat>italic</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <toolSections name="Interfaces Blank">
          <ownedTools xsi:type="tool:ToolGroup" name="Exchange Items">
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to EVENT" name="event" label="%common.id.event" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@containerMappings[name='ID_Interface']/@subNodeMappings[name='ID_Operation']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemEvent.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="EVENT"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="EVENT"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to OPERATION" name="operation" label="%common.id.operation" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@containerMappings[name='ID_Interface']/@subNodeMappings[name='ID_Operation']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemOperation.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="OPERATION"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="OPERATION"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to FLOW" name="flow" label="%common.id.flow" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@containerMappings[name='ID_Interface']/@subNodeMappings[name='ID_Operation']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemFlow.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="FLOW"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="FLOW"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to SHARED DATA" name="data" label="%common.id.data" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@containerMappings[name='ID_Interface']/@subNodeMappings[name='ID_Operation']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItemData.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="SHARED_DATA"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="SHARED_DATA"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:NodeCreationDescription" documentation="Creates an Exchange Item with a Communication Mechanism set to UNSET" name="undefined.exchange.item" label="%common.id.undefined.exchange.item" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@containerMappings[name='ID_Interface']/@subNodeMappings[name='ID_Operation']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ExchangeItem.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::ExchangeItemAllocation)">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="variable" value="container"/>
                      <parameters name="value" value="aql:container.eContainer()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (container.oclIsKindOf(cs::Interface))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.getIBTarget()">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInterfacePkg->size() = 0">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="InterfacePkg" referenceName="ownedInterfacePkg">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:container"/>
                          <parameters name="variable" value="exchangeItemContainer"/>
                          <parameters name="value" value="feature:ownedInterfacePkg"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItem" referenceName="ownedExchangeItems">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="UNSET"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:container"/>
                        <parameters name="variable" value="exchangeItemContainer"/>
                        <parameters name="value" value="aql:container.eContainer()"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:container.oclIsKindOf(cs::Interface)">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:exchangeItemContainer.createExchangeItem(container,'instance')">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="exchangeMechanism" valueExpression="UNSET"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemAllocation" referenceName="ownedExchangeItemAllocations" variableName="allocation">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="allocatedItem" valueExpression="aql:instance"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Create a new Exchange Item Element in the selected Exchange Item. This tool opens a selection wizard to select the type of the Exchange Item Element." name="exchange.item.element" label="%common.id.exchange.item.element" precondition="aql:self.oclIsKindOf(cs::ExchangeItemAllocation) or self.oclIsKindOf(information::ExchangeItem)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Parameter.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(cs::ExchangeItemAllocation)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:element"/>
                    <parameters name="variable" value="newContainer"/>
                    <parameters name="value" value="feature:allocatedItem"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(information::ExchangeItem)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:element"/>
                    <parameters name="variable" value="newContainer"/>
                    <parameters name="value" value="aql:self"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:newContainer">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemElement" referenceName="ownedElements"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instance">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select Type" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                      <parameters name="context" value="aql:element"/>
                      <parameters name="scope" value="aql:self.getExchangeItemElementTypes()"/>
                      <parameters name="multiple" value="false"/>
                      <parameters name="resultVariable" value="type"/>
                      <parameters name="wizardMessage" value="Select type of Parameter."/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:type != 'WIZARD_CANCELED'">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:type"/>
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Edit parameter" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.EditCapellaPropertyWizard">
                        <parameters name="context" value="aql:instance"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="refreshElement" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.RefreshElement">
                        <parameters name="context" value="aql:elementView"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:type = 'WIZARD_CANCELED'">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Insert/Remove Exchange Items Allocations. Removing an Exchange Item Allocation graphical object from a diagram does not delete the Exchange Item Allocation from the model. This tool does not modify the semantic model. An Exchange Item allocation is a reference relationship from an Interface to an Exchange Item." name="exchange.item.allocations" label="%common.id.exchange.item.allocations" precondition="aql:not (containerView.getViewDiagram().target.oclIsKindOf(epbs::ConfigurationItem))" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@containerMappings[name='ID_Interface']/@subNodeMappings[name='ID_Operation']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <filters precondition="aql:self.isSynchronized()" elementsToListen="aql:self">
              <listeners domainClass="DDiagram" featureName="synchronized"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="displayedOperations" computationExpression="aql:containerView.getNodesAndNodeListElements().target->filter(cs::ExchangeItemAllocation)"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:containerView.getDiagramContainer()"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectOperations" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:container.ownedExchangeItemAllocations"/>
                  <parameters name="initialSelection" value="aql:displayedOperations"/>
                  <parameters name="resultVariable" value="selectedOperations"/>
                  <parameters name="wizardMessage" value="aql:'Select ExchangeItem allocations to show in ' + container.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedOperations != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:containerView.showHideOperations(selectedOperations,diagram)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="delete capella elements">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="deleteCapellaElement" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="NamedElement DirectEdit" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="Allocation DirectEdit" inputLabelExpression="aql:self.allocatedItem.name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.allocatedItem">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Interface Diagram" precondition="aql:self.isInLib()" titleExpression="aql:'[ID] ' + self.name" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Allocation ExchangeItem from Model" precondition="aql:element.isValidIDDndAllocationExchangeItemFromModel(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Interface%20Diagram']/@defaultLayer/@containerMappings[name='ID_Interface']/@subNodeMappings[name='ID_Operation']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldContainer"/>
            <newContainer name="newContainer"/>
            <element name="element"/>
            <newViewContainer name="newViewContainer"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.dndIDAllocationExchangeItemFromModel(newViewContainer)"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Common" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%common.id.constraint" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%common.id.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%common.id.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:SequenceDiagramDescription" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Drop%20Component'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraint%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']" name="Component Interfaces Scenario" label="%common.is" titleExpression="aql:self.name.addScenarioPrefix('[IS]')" domainClass="interaction.Scenario" preconditionExpression="aql:self.isValidIS()" endsOrdering="aql:self.makeIntersection(self.getOrderedInteractionFragments(), eventEnds)" instanceRolesOrdering="feature:ownedInstanceRoles">
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.executions.filter" label="%common.is.hide.executions.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.call.arguments.filter" label="%common.is.hide.call.arguments.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabel']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.pre.post.conditions.filter" label="%common.is.hide.pre.post.conditions.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='preconditionMapping'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='postconditionMapping']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.ei.exchange.context.filter" label="%common.is.show.ei.exchange.context.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabel']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%common.is.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
      </filters>
      <diagramInitialisation>
        <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
          <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(self.ancestors()->filter(ctx::SystemAnalysis)->size() > 0)">
            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInstanceRoles->select(role | not role.representedInstance.abstractType.actor)->size()=0">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:self.eContainerOrSelf(ctx::SystemAnalysis).system.representingParts->first()"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.eContainerOrSelf(ctx::SystemAnalysis).system.name"/>
              </subModelOperations>
              <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(self.eContainerOrSelf(ctx::SystemAnalysis).system)"/>
            </subModelOperations>
          </subModelOperations>
          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="INTERFACE"/>
        </firstModelOperations>
      </diagramInitialisation>
      <defaultLayer name="Default" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']">
        <nodeMappings xsi:type="description_2:InstanceRoleMapping" name="Instancerole Mapping" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20IS']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20instance%20role']" semanticCandidatesExpression="feature:ownedInstanceRoles" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole">
          <borderedNodeMappings xsi:type="description_2:ExecutionMapping" name="default execution" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20IS']" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole" reusedBorderedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']/@borderedNodeMappings[name='InteractionState%20Mapping']" startingEndFinderExpression="aql:self" finishingEndFinderExpression="aql:self">
            <borderedNodeMappings xsi:type="description_2:ExecutionMapping" name="Execution" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20IS']" semanticCandidatesExpression="aql:self.getExecutionsFromInstanceRoleOrParentExecution()" synchronizationLock="true" domainClass="interaction.Execution" reusedBorderedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish">
              <borderedNodeMappings xsi:type="description_2:StateMapping" name="InteractionState Mapping" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.getInteractionStatesOnExecution()" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.StateFragment" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']" showIcon="false" labelExpression="aql:self.relatedAbstractFunction.name" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']" labelPosition="node" resizeKind="NSEW" width="10" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
                <conditionnalStyles predicateExpression="aql:not self.relatedAbstractState->isEmpty() and self.relatedAbstractState->filter(capellacommon::Mode)->size() > 0">
                  <style xsi:type="style:EllipseNodeDescription" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateMode_Border_Gray']" showIcon="false" labelExpression="aql:self.relatedAbstractState.name" labelPosition="node" resizeKind="NSEW" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Mode_Gray']" horizontalDiameterComputationExpression="10" verticalDiameterComputationExpression="3">
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:not self.relatedAbstractState->isEmpty() and self.relatedAbstractState->filter(capellacommon::Mode)->size() = 0">
                  <style xsi:type="style:EllipseNodeDescription" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateMode_Border_Gray']" showIcon="false" labelExpression="aql:self.relatedAbstractState.name" labelPosition="node" resizeKind="NSEW" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_State_Gray']" horizontalDiameterComputationExpression="10" verticalDiameterComputationExpression="3">
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:self.relatedAbstractFunction != null and self.relatedAbstractFunction.kind = fa::FunctionKind::DUPLICATE">
                  <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.relatedAbstractFunction.name" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Duplicate.gif" labelPosition="node" resizeKind="NSEW" width="10" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xBD_ControlNode']">
                    <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:self.relatedAbstractFunction != null and self.relatedAbstractFunction.kind = fa::FunctionKind::GATHER">
                  <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.relatedAbstractFunction.name" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Gather.gif" labelPosition="node" resizeKind="NSEW" width="10" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xBD_ControlNode']">
                    <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:self.relatedAbstractFunction != null and self.relatedAbstractFunction.kind = fa::FunctionKind::ROUTE">
                  <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.relatedAbstractFunction.name" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_ROUTE.gif" labelPosition="node" resizeKind="NSEW" width="10" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xBD_ControlNode']">
                    <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:self.relatedAbstractFunction != null and self.relatedAbstractFunction.kind = fa::FunctionKind::SELECT">
                  <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.relatedAbstractFunction.name" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Select.gif" labelPosition="node" resizeKind="NSEW" width="10" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xBD_ControlNode']">
                    <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:self.relatedAbstractFunction != null and self.relatedAbstractFunction.kind = fa::FunctionKind::SPLIT">
                  <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.relatedAbstractFunction.name" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Split.gif" labelPosition="node" resizeKind="NSEW" width="10" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xBD_ControlNode']">
                    <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
              </borderedNodeMappings>
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="" resizeKind="NSEW" width="1" height="3">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              </style>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.abstractType->filter(information::ExchangeItem)->size() > 0">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="" resizeKind="NSEW" width="1" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Pink']">
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="service:isTransformedExecution()">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="" resizeKind="NSEW" width="1" height="3">
                  <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.abstractType->filter(cs::Component)->size() > 0 and not (self.isInternalLCForExecution())">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" showIcon="false" labelExpression="" resizeKind="NSEW" width="1" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Pink']">
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.abstractType->filter(cs::Component)->size() > 0 and self.isInternalLCForExecution()">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" showIcon="false" labelExpression="" resizeKind="NSEW" width="1" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Pink']">
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                </style>
              </conditionnalStyles>
            </borderedNodeMappings>
            <borderedNodeMappings xsi:type="description_2:EndOfLifeMapping" name="Lifeline deletion mapping" preconditionExpression="aql:self.eContainer().ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE).receivingEnd.covered->includes(self)" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20IS']" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:''" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/eol.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <borderedNodeMappings xsi:type="description_2:EndOfLifeMapping" name="endOfLife" preconditionExpression="aql:not (self.eContainer().ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE).receivingEnd.covered->includes(self))" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole">
              <deletionDescription href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20System%20Actors']/@defaultLayer/@toolSections.0/@ownedTools[name='No%20Delete']"/>
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:''" sizeComputationExpression="1" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/handlelifeline.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Lifeline_Gray']" showIcon="false" labelExpression="" sizeComputationExpression="" labelPosition="node" resizeKind="NSEW" width="1" height="40">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </borderedNodeMappings>
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getInstanceRoleLabel()" sizeComputationExpression="" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.abstractType->filter(information::ExchangeItem)->size() > 0">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Interface_Border_Reddish']" labelExpression="aql:self.getInstanceRoleLabel()" labelPosition="node" resizeKind="EAST_WEST" width="15" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_ExchangeItem_Pinkkish']">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.abstractType->filter(cs::Component)->select(c | c.isActor())->size() > 0">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']" labelExpression="aql:self.getInstanceRoleLabel()" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.abstractType->filter(pa::PhysicalComponent)->size() > 0 and self.isBehaviorComponent()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="aql:self.getInstanceRoleLabel()" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" labelPosition="node" resizeKind="EAST_WEST" width="15" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.abstractType->filter(pa::PhysicalComponent)->size() > 0 and self.isNodeComponent()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']" labelExpression="aql:self.getInstanceRoleLabel()" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']" labelPosition="node" resizeKind="EAST_WEST" width="15" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.abstractType->filter(pa::PhysicalComponent)->size() > 0">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="aql:self.getInstanceRoleLabel()" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" labelPosition="node" resizeKind="EAST_WEST" width="15" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.abstractType->filter(cs::Component)->size()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="aql:self.getInstanceRoleLabel()" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" labelPosition="node" resizeKind="EAST_WEST" width="15" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings xsi:type="description_2:InstanceRoleMapping" name="hideSequenceLabel" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20FS']" semanticCandidatesExpression="ocl:Set {}" domainClass="EObject"/>
        <nodeMappings name="LostFoundEnd" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.sendingEnd = null and ownedMessage.receivingEnd != null or ownedMessage.sendingEnd != null and ownedMessage.receivingEnd = null)" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.SequenceMessage">
          <style xsi:type="style:DotDescription" labelExpression="" tooltipExpression="Lost end" sizeComputationExpression="1" strokeSizeComputationExpression="1">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="Scenario_Constraint" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Constraint%20Content']" semanticCandidatesExpression="" createElements="false" domainClass="Constraint">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getConstraintLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_yellow']"/>
          </style>
        </nodeMappings>
        <nodeMappings xsi:type="description_2:ObservationPointMapping" name="ObservationPoint" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20IS']" semanticCandidatesExpression="aql:self.makeUnion(self.ownedConstraintDurations.start, self.ownedConstraintDurations.finish)" semanticElements="service:getAssociatedSemanticElements()" domainClass="InteractionFragment">
          <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="" sizeComputationExpression="1" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/observation.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="preconditionMapping" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20IS']" semanticCandidatesExpression="aql:self.preCondition" domainClass="capellacore.Constraint">
          <style xsi:type="style:NoteDescription" showIcon="false" labelExpression="aql:'pre:' + self.getConstraintLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="postconditionMapping" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20IS']" semanticCandidatesExpression="aql:self.postCondition" domainClass="capellacore.Constraint">
          <style xsi:type="style:NoteDescription" showIcon="false" labelExpression="aql:'post:' + self.getConstraintLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </nodeMappings>
        <edgeMappings xsi:type="description_2:BasicMessageMapping" name="Basic message mapping" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20basic%20message']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::SYNCHRONOUS_CALL or ownedMessage.kind = interaction::MessageKind::ASYNCHRONOUS_CALL or ownedMessage.kind = interaction::MessageKind::UNSET)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='LostFoundEnd']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='LostFoundEnd']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="aql:self.getSendingEndEvent()" receivingEndFinderExpression="aql:self.getReceivingEndEvent()">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="aql:self.kind = interaction::MessageKind::SYNCHRONOUS_CALL or self.kind = interaction::MessageKind::UNSET">
            <style targetArrow="InputFillClosedArrow">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <edgeMappings xsi:type="description_2:ReturnMessageMapping" name="return message mapping" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::REPLY)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="feature:sendingEnd" receivingEndFinderExpression="feature:receivingEnd" invocationMessageFinderExpression="aql:self.getInvocationMessage()">
          <style lineStyle="dash">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_2:BasicMessageMapping" name="Timer message mapping" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20basic%20message%20DF']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::TIMER)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="aql:self.getSendingEndEvent()" receivingEndFinderExpression="aql:self.getReceivingEndEvent()">
          <style sourceArrow="Diamond">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_2:CreationMessageMapping" name="creation message mapping" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::CREATE)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="feature:sendingEnd" receivingEndFinderExpression="feature:receivingEnd">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_2:DestructionMessageMapping" name="destruction message mapping" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20IS']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Lifeline%20deletion%20mapping']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="feature:sendingEnd" receivingEndFinderExpression="feature:receivingEnd">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="Scenario_ContrainedElements" preconditionExpression="aql:not self.constrainedElements->isEmpty() and self.constrainedElements->size() > 0" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Delete%20Constraint%20Elements']" semanticCandidatesExpression="feature:eAllContents" semanticElements="aql:self" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint']" targetFinderExpression="feature:constrainedElements">
          <targetMapping xsi:type="description_2:BasicMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']"/>
          <targetMapping xsi:type="description_2:ExecutionMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']"/>
          <targetMapping xsi:type="description_2:StateMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']/@borderedNodeMappings[name='InteractionState%20Mapping']"/>
          <targetMapping xsi:type="description_2:InteractionUseMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUse']"/>
          <targetMapping xsi:type="description_2:ReturnMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping']"/>
          <targetMapping xsi:type="description_2:CombinedFragmentMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragment']"/>
          <targetMapping xsi:type="description_2:OperandMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragment']/@subContainerMappings[name='Operand']"/>
          <targetMapping xsi:type="description_2:CreationMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping']"/>
          <targetMapping xsi:type="description_2:DestructionMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping']"/>
          <targetMapping xsi:type="description_2:BasicMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20DF']"/>
          <targetMapping xsi:type="description_2:CombinedFragmentMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentDF']"/>
          <targetMapping xsi:type="description_2:OperandMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentDF']/@subContainerMappings[name='OperandDF']"/>
          <targetMapping xsi:type="description_2:CreationMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20DF']"/>
          <targetMapping xsi:type="description_2:DestructionMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20DF']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']"/>
          <targetMapping xsi:type="description_2:ExecutionMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']"/>
          <targetMapping xsi:type="description_2:StateMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']/@borderedNodeMappings[name='InteractionStateFunction']"/>
          <targetMapping xsi:type="description_2:InteractionUseMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUseDF']"/>
          <targetMapping xsi:type="description_2:ReturnMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20DF']"/>
          <targetMapping xsi:type="description_2:CombinedFragmentMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentFS']"/>
          <targetMapping xsi:type="description_2:OperandMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentFS']/@subContainerMappings[name='OperandFS']"/>
          <targetMapping xsi:type="description_2:CreationMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20FS']"/>
          <targetMapping xsi:type="description_2:DestructionMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20FS']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']"/>
          <targetMapping xsi:type="description_2:ExecutionMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']"/>
          <targetMapping xsi:type="description_2:StateMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']/@borderedNodeMappings[name='InteractionState%20Mapping%20FS']"/>
          <targetMapping xsi:type="description_2:InteractionUseMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUseFS']"/>
          <targetMapping xsi:type="description_2:ReturnMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20FS']"/>
          <targetMapping xsi:type="description_2:BasicMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20AIS']"/>
          <targetMapping xsi:type="description_2:CombinedFragmentMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentAIS']"/>
          <targetMapping xsi:type="description_2:OperandMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentAIS']/@subContainerMappings[name='OperandAIS']"/>
          <targetMapping xsi:type="description_2:CreationMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20AIS']"/>
          <targetMapping xsi:type="description_2:DestructionMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20AIS']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']"/>
          <targetMapping xsi:type="description_2:ExecutionMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']"/>
          <targetMapping xsi:type="description_2:StateMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']/@borderedNodeMappings[name='InteractionState%20Mapping%20AIS']"/>
          <targetMapping xsi:type="description_2:InteractionUseMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUse%20AIS']"/>
          <targetMapping xsi:type="description_2:ReturnMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20AIS']"/>
          <targetMapping xsi:type="description_2:BasicMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20OA']"/>
          <targetMapping xsi:type="description_2:CombinedFragmentMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentOA']"/>
          <targetMapping xsi:type="description_2:OperandMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentOA']/@subContainerMappings[name='OperandOA']"/>
          <targetMapping xsi:type="description_2:CreationMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20OA']"/>
          <targetMapping xsi:type="description_2:DestructionMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20OA']"/>
          <targetMapping xsi:type="description_2:InstanceRoleMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']"/>
          <targetMapping xsi:type="description_2:ExecutionMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']"/>
          <targetMapping xsi:type="description_2:StateMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']/@borderedNodeMappings[name='InteractionState%20Mapping%20OA']"/>
          <targetMapping xsi:type="description_2:InteractionUseMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUse%20OA']"/>
          <targetMapping xsi:type="description_2:ReturnMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20OA']"/>
          <targetMapping xsi:type="description_2:BasicMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS']"/>
          <style lineStyle="dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="Scenario_ExchangeContext" preconditionExpression="aql:not self.exchangeContext->isEmpty()" semanticCandidatesExpression="feature:eAllContents" semanticElements="aql:self" synchronizationLock="true" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint']" targetFinderExpression="feature:exchangeContext">
          <sourceMapping xsi:type="description_2:BasicMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping']"/>
          <sourceMapping xsi:type="description_2:BasicMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20AIS']"/>
          <sourceMapping xsi:type="description_2:BasicMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20DF']"/>
          <sourceMapping xsi:type="description_2:BasicMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS']"/>
          <sourceMapping xsi:type="description_2:BasicMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20OA']"/>
          <sourceMapping xsi:type="description_2:BasicMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Timer%20message%20mapping']"/>
          <sourceMapping xsi:type="description_2:BasicMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Timer%20message%20mapping%20DF']"/>
          <sourceMapping xsi:type="description_2:BasicMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Timer%20message%20mapping%20OA']"/>
          <sourceMapping xsi:type="description_2:CreationMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping']"/>
          <sourceMapping xsi:type="description_2:CreationMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20AIS']"/>
          <sourceMapping xsi:type="description_2:CreationMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20DF']"/>
          <sourceMapping xsi:type="description_2:CreationMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20FS']"/>
          <sourceMapping xsi:type="description_2:CreationMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20OA']"/>
          <sourceMapping xsi:type="description_2:DestructionMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping']"/>
          <sourceMapping xsi:type="description_2:DestructionMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20AIS']"/>
          <sourceMapping xsi:type="description_2:DestructionMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20DF']"/>
          <sourceMapping xsi:type="description_2:DestructionMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20FS']"/>
          <sourceMapping xsi:type="description_2:DestructionMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20OA']"/>
          <sourceMapping xsi:type="description_2:ReturnMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping']"/>
          <sourceMapping xsi:type="description_2:ReturnMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20AIS']"/>
          <sourceMapping xsi:type="description_2:ReturnMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20DF']"/>
          <sourceMapping xsi:type="description_2:ReturnMessageMapping" href="#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20FS']"/>
          <sourceMapping xsi:type="description_2:ReturnMessageMapping" href="oa.odesign#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20OA']"/>
          <style lineStyle="dot" targetArrow="NoDecoration">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_orange']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_orange']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="ConstraintDuration" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20IS']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Set%20Duration']" semanticCandidatesExpression="feature:ownedConstraintDurations" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='ObservationPoint']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='ObservationPoint']" targetFinderExpression="feature:finish" sourceFinderExpression="feature:start" domainClass="interaction.ConstraintDuration" useDomainElement="true">
          <style xsi:type="style:BracketEdgeStyleDescription" sourceArrow="InputArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="feature:duration">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings xsi:type="description_2:InteractionUseMapping" name="InteractionUse" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.ownedTimeLapses->filter(interaction::InteractionUse)" semanticElements="aql:self.makeUnion(self, self.referencedScenario, self.referencedScenario.eContainerOrSelf(interaction::AbstractCapability))" synchronizationLock="true" domainClass="interaction.InteractionUse" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish" coveredLifelinesExpression="aql:self.getCoveredFromAbstractFragment()" centerLabelExpression="aql:self.referencedScenario.name">
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression=" ref" labelAlignment="LEFT" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_CombinedFragment_Gray']">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <labelBorderStyle href="environment:/viewpoint#//@labelBorderStyles/@labelBorderStyleDescriptions.0"/>
          </style>
        </containerMappings>
        <containerMappings xsi:type="description_2:CombinedFragmentMapping" name="CombinedFragment" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.ownedTimeLapses->filter(interaction::CombinedFragment)" synchronizationLock="true" domainClass="interaction.CombinedFragment" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish" coveredLifelinesExpression="aql:self.getCoveredFromAbstractFragment()">
          <subContainerMappings xsi:type="description_2:OperandMapping" name="Operand" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Direct%20edit%20operand']" semanticCandidatesExpression="feature:referencedOperands" synchronizationLock="true" domainClass="interaction.InteractionOperand" startingEndFinderExpression="aql:self.getOperandBegin()" finishingEndFinderExpression="aql:self.getOperandEnd()">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.getOperandLabel()" labelAlignment="LEFT" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_CombinedFragment_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </subContainerMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.getOperatorLabel()" labelAlignment="LEFT" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_CombinedFragment_Gray']">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <labelBorderStyle href="environment:/viewpoint#//@labelBorderStyles/@labelBorderStyleDescriptions.0"/>
          </style>
        </containerMappings>
        <toolSections name="tools section" label="Scenario Elements">
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="node.pc" label="%common.is.node.pc" precondition="aql:self.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ComponentInstanceNodePC.gif">
            <filters precondition="aql:self.target.eContainerOrSelf(pa::PhysicalArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getComponentContainer()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(la::LogicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="LogicalComponent" referenceName="ownedLogicalComponents" variableName="component">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(pa::PhysicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PhysicalComponent" referenceName="ownedPhysicalComponents" variableName="component">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="nature" valueExpression="NODE"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="behavior.pc" label="%common.is.behavior.pc" precondition="aql:self.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ComponentInstance.gif">
            <filters precondition="aql:self.target.eContainerOrSelf(pa::PhysicalArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getComponentContainer()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(la::LogicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="LogicalComponent" referenceName="ownedLogicalComponents" variableName="component">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(pa::PhysicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PhysicalComponent" referenceName="ownedPhysicalComponents" variableName="component">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="nature" valueExpression="BEHAVIOR"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="component" label="%common.is.component" precondition="aql:self.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ComponentInstance.gif">
            <filters precondition="aql:self.target.eContainerOrSelf(la::LogicalArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getComponentContainer()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(la::LogicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="LogicalComponent" referenceName="ownedLogicalComponents" variableName="component">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(pa::PhysicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PhysicalComponent" referenceName="ownedPhysicalComponents" variableName="component">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="cots" label="%common.is.cots" precondition="aql:self.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']">
            <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getComponentContainer()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(epbs::EPBSArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ConfigurationItem" referenceName="ownedConfigurationItems" variableName="component">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="COTSCI"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:component"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="cs" label="%common.is.cs" precondition="aql:self.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']">
            <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getComponentContainer()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(epbs::EPBSArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ConfigurationItem" referenceName="ownedConfigurationItems" variableName="component">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="CSCI"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:component"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="hw" label="%common.is.hw" precondition="aql:self.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']">
            <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getComponentContainer()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(epbs::EPBSArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ConfigurationItem" referenceName="ownedConfigurationItems" variableName="component">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="HWCI"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:component"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="interface" label="%common.is.interface" precondition="aql:self.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']">
            <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getComponentContainer()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(epbs::EPBSArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ConfigurationItem" referenceName="ownedConfigurationItems" variableName="component">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="InterfaceCI"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:component"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="ndi" label="%common.is.ndi" precondition="aql:self.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']">
            <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getComponentContainer()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(epbs::EPBSArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ConfigurationItem" referenceName="ownedConfigurationItems" variableName="component">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="NDICI"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:component"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="prime.item" label="%common.is.prime.item" precondition="aql:self.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']">
            <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getComponentContainer()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(epbs::EPBSArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ConfigurationItem" referenceName="ownedConfigurationItems" variableName="component">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="PrimeItemCI"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:component"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="system" label="%common.is.system" precondition="aql:self.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']">
            <filters precondition="aql:self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getComponentContainer()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(epbs::EPBSArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ConfigurationItem" referenceName="ownedConfigurationItems" variableName="component">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="SystemCI"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="cs.Part" referenceName="ownedFeatures" variableName="part">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:component"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="actor" label="%common.is.actor" precondition="aql:self.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Actor.gif">
            <filters precondition="aql:(self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() != 0)" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(ctx::SystemAnalysis)->size() != 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="feature:ownedSystemComponentPkg">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SystemComponent" referenceName="ownedSystemComponents" variableName="actor">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="actor" valueExpression="true"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(la::LogicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="feature:ownedLogicalComponentPkg">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="LogicalComponent" referenceName="ownedLogicalComponents" variableName="actor">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="actor" valueExpression="true"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(pa::PhysicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:Let" variableName="parentContainer" valueExpression="aql:self"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="feature:ownedPhysicalComponentPkg">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PhysicalComponent" referenceName="ownedPhysicalComponents" variableName="actor">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="actor" valueExpression="true"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="nature" valueExpression="service:parentContainer.computePhysicalActorNature()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(epbs::EPBSArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer().ownedArchitectures->filter(pa::PhysicalArchitecture).ownedPhysicalComponentPkg">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PhysicalComponent" referenceName="ownedPhysicalComponents" variableName="actor">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="actor" valueExpression="true"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:actor.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:actor.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(actor)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="ISActorsGroup">
            <tools xsi:type="tool_2:InstanceRoleCreationTool" name="actors" label="%common.is.actors" precondition="aql:self.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="aql:(self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() != 0)" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
              </filters>
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Select Actor" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="aql:self.void2Null(container.getISScopeInsertActors())"/>
                    <parameters name="initialSelection" value="aql:self.void2Null(containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance->select(x | x.abstractType.oclIsKindOf(cs::Component) and x.abstractType.isActor()))"/>
                    <parameters name="wizardMessage" value=""/>
                    <parameters name="resultVariable" value="result"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(result)">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:i != 'WIZARD_CANCELED'">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance->includes(i))">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:i"/>
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:i.name"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(i.abstractType)"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles">
                    <parameters name="result" value="aql:self.void2Null(result)"/>
                    <parameters name="current" value="aql:self.void2Null(containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole)->select(x | x.representedInstance.abstractType->filter(cs::Component)->select(c | c.isActor())->size() > 0))"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
            <tools xsi:type="tool_2:InstanceRoleCreationTool" documentation="Creates a new lifeline representing an existing actor. This tool allows having multiple lifelines representing the same actor." name="add.multiple.lifelines.for.an.existing.actor" label="%common.is.add.multiple.lifelines.for.an.existing.actor" precondition="aql:self.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AddInstanceRole.gif">
              <filters precondition="aql:(self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() != 0)" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
              </filters>
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Select Component" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="service:getAllMultiInstanceRoleActorParts"/>
                    <parameters name="wizardMessage" value=""/>
                    <parameters name="resultVariable" value="result"/>
                    <parameters name="multiple" value="false"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:result"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:result"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:result.name"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(result.abstractType)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="ISComponentsGroup">
            <tools xsi:type="tool_2:InstanceRoleCreationTool" name="components" label="%common.is.components" precondition="aql:self.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(ctx::SystemAnalysis)->size() != 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
              </filters>
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Select Component" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="aql:self.void2Null(container.getISScopeInsertComponents())"/>
                    <parameters name="initialSelection" value="aql:self.void2Null(containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance->select(x | x.abstractType.oclIsKindOf(cs::Component) and not x.abstractType.isActor()))"/>
                    <parameters name="wizardMessage" value=""/>
                    <parameters name="resultVariable" value="result"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(result)">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:i != 'WIZARD_CANCELED'">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance->includes(i))">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:i"/>
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:i.name"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(i.abstractType)"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles">
                    <parameters name="result" value="aql:self.void2Null(result)"/>
                    <parameters name="current" value="aql:self.void2Null(containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole)->select(x | x.representedInstance.abstractType->filter(cs::Component)->size() > 0 and x.representedInstance.abstractType->filter(cs::Component)->select(c | c.isActor())->size() = 0))"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
            <tools xsi:type="tool_2:InstanceRoleCreationTool" documentation="Creates a new lifeline representing an existing component or the system. This tool allows having multiple lifelines representing the same component." name="add.multiple.lifelines.for.an.existing.component" label="%common.is.add.multiple.lifelines.for.an.existing.component" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AddInstanceRole.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Select Component" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="service:getAllMultiInstanceRoleComponentParts"/>
                    <parameters name="wizardMessage" value=""/>
                    <parameters name="resultVariable" value="result"/>
                    <parameters name="multiple" value="false"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:result"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:result"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:result.name"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(result.abstractType)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="shared.data.event" label="%common.is.shared.data.event" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Select Exchange Item" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:containerView.eContainerOrSelf(diagram::DDiagram).getSharedDataEventForSD()"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance->select(x | x.abstractType->filter(information::ExchangeItem)->size() > 0))"/>
                  <parameters name="wizardMessage" value=""/>
                  <parameters name="resultVariable" value="result"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(result)">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:i != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance->includes(i))">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:i">
                          <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedExchangeItemInstances->size() = 0">
                            <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ExchangeItemInstance" referenceName="ownedExchangeItemInstances" variableName="eiInstance">
                              <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:i.name"/>
                              <subModelOperations xsi:type="tool_1:SetValue" featureName="abstractType" valueExpression="aql:i"/>
                            </subModelOperations>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                            <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                              <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:i.name"/>
                              <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:i.abstractTypedElements->at(1)"/>
                            </subModelOperations>
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles">
                  <parameters name="result" value="aql:self.void2Null(result)"/>
                  <parameters name="current" value="aql:self.void2Null(containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole)->select(x | x.representedInstance.abstractType->filter(information::ExchangeItem)->size() > 0))"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Sequence Message invoking a Interface Exchange Item allocation without return branch between the Source and Target Lifelines representing existing Component/Actor Parts. The kind of these Components/Actors is related to the Architecture. This tool opens a selection wizard to select an available existing Interface Exchange Item allocation or to create a new one to existing/new Interface." name="sequence.message" label="%common.is.sequence.message" precondition="aql:self.allowMessageCreation2(preSource, preTarget, false, messageEndBefore, messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif">
            <sourceVariable name="source">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="targetOnExchangeItem" value="aql:(self.makeUnion(source, target))"/>
                  <parameters name="sourceIR" value="aql:sourceIR"/>
                  <parameters name="targetIR" value="aql:targetIR"/>
                  <parameters name="messageKind" value="ASYNCHRONOUS_CALL"/>
                  <parameters name="resultVariable" value="result"/>
                  <parameters name="resultPortStrategyVariable" value="portStrategy"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'CANCELED_DIALOG'">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                    <parameters name="message" value="aql:call"/>
                    <parameters name="affected" value="aql:self.void2Null(result)"/>
                    <parameters name="portStrategy" value="aql:portStrategy"/>
                    <parameters name="targetOnExchangeItem" value="aql:(self.makeUnion(source, target))"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Sequence Message invoking a Interface Exchange Item allocation with return branch between the Source and Target Lifelines representing existing Component/Actor Parts. The kind of these Components/Actors is related to the Architecture. This tool opens a selection wizard to select an available existing Interface Exchange Item allocation or to create a new one to existing/new Interface." name="sequence.message.with.return.branch" label="%common.is.sequence.message.with.return.branch" precondition="aql:self.allowMessageCreation2(preSource, preTarget, false, messageEndBefore, messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping']" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']">
            <sourceVariable name="source">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="targetOnExchangeItem" value="aql:(self.makeUnion(source, target))"/>
                  <parameters name="sourceIR" value="aql:sourceIR"/>
                  <parameters name="targetIR" value="aql:targetIR"/>
                  <parameters name="messageKind" value="SYNCHRONOUS_CALL"/>
                  <parameters name="resultVariable" value="result"/>
                  <parameters name="resultPortStrategyVariable" value="portStrategy"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'CANCELED_DIALOG'">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationReply"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationReply"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="SYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="reply">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName() + '_reply'"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="REPLY"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(call)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingReplyEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationReply"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:reply">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingReplyEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingReplyEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(sendingReplyEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(sendingReplyEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationReply"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:reply">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:receivingReplyEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:reply">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingReplyEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingReplyEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:sendingReplyEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                      <parameters name="message" value="aql:call"/>
                      <parameters name="affected" value="aql:self.void2Null(result)"/>
                      <parameters name="portStrategy" value="aql:portStrategy"/>
                      <parameters name="targetOnExchangeItem" value="aql:(self.makeUnion(source, target))"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="SequenceMessages">
            <tools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Create Sequence Message invoking a Interface Exchange Item allocation between the Source and Target Lifelines representing existing Component/Actor Parts. The kind of these Components/Actors is related to the Architecture. This tool opens a selection wizard to select an available existing Interface Exchange Item allocation or to create a new one to existing/new Interface." name="create.message" label="%common.is.create.message" precondition="aql:self.allowCreateMessageCreation2(preTargetView.target,preSourceView.target,messageEndBefore,messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CreateSequenceMessage.gif">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </sourceVariable>
              <targetVariable name="target">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </targetVariable>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetIR.representedInstance->filter(information::ExchangeItemInstance)->size() != 0">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                      <parameters name="message" value="aql:call"/>
                      <parameters name="targetOnExchangeItem" value="aql:self.makeUnion(source, target)"/>
                      <parameters name="sourceIR" value="aql:sourceIR"/>
                      <parameters name="targetIR" value="aql:targetIR"/>
                      <parameters name="messageKind" value="CREATE"/>
                      <parameters name="resultVariable" value="result"/>
                      <parameters name="resultPortStrategyVariable" value="portStrategy"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'CANCELED_DIALOG'">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="CREATE"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="create call"/>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(sendingEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(sendingEnd)"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                        <parameters name="message" value="aql:call"/>
                        <parameters name="affected" value="aql:self.void2Null(result)"/>
                        <parameters name="portStrategy" value="aql:portStrategy"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:targetIR.representedInstance->filter(information::ExchangeItemInstance)->size() = 0">
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                      <parameters name="message" value="aql:call"/>
                      <parameters name="sourceIR" value="aql:sourceIR"/>
                      <parameters name="targetIR" value="aql:targetIR"/>
                      <parameters name="messageKind" value="DELETE"/>
                      <parameters name="resultVariable" value="result"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'CANCELED_DIALOG'">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="CREATE"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="create call"/>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(sendingEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(sendingEnd)"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                        <parameters name="message" value="aql:call"/>
                        <parameters name="affected" value="aql:self.void2Null(result)"/>
                        <parameters name="portStrategy" value="aql:portStrategy"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="messageEndAfter"/>
            </tools>
            <tools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Delete Sequence Message invoking a Interface Exchange Item allocation between the Source and Target Lifelines representing existing Component/Actor Parts. The kind of these Components/Actors is related to the Architecture. This tool opens a selection wizard to select an available existing Interface Exchange Item allocation or to create a new one to existing/new Interface." name="delete.message" label="%common.is.delete.message" precondition="aql:self.allowDeleteMessageCreation2(preTargetView.target,preSourceView.target,messageEndBefore,messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/DeleteSequenceMessage.gif">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </sourceVariable>
              <targetVariable name="target">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </targetVariable>
              <sourceViewVariable name="sourceVIew"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                    <parameters name="message" value="aql:call"/>
                    <parameters name="targetOnExchangeItem" value="aql:self.makeUnion(source, target)"/>
                    <parameters name="sourceIR" value="aql:sourceIR"/>
                    <parameters name="targetIR" value="aql:targetIR"/>
                    <parameters name="messageKind" value="CREATE"/>
                    <parameters name="resultVariable" value="result"/>
                    <parameters name="resultPortStrategyVariable" value="portStrategy"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'CANCELED_DIALOG'">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="DELETE"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="delete call"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(sendingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(sendingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                      <parameters name="message" value="aql:call"/>
                      <parameters name="affected" value="aql:self.void2Null(result)"/>
                      <parameters name="portStrategy" value="aql:portStrategy"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="messageEndAfter"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Timers">
            <tools xsi:type="tool_2:MessageCreationTool" documentation="Create a new sequence message to arm a timer." name="arm.timer" label="%common.is.arm.timer" precondition="aql:preSource = preTarget" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Timer%20message%20mapping']">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </sourceVariable>
              <targetVariable name="target">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </targetVariable>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ArmTimerEvent" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ArmTimerEvent" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="TIMER"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Arm Timer"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="messageEndAfter"/>
            </tools>
            <tools xsi:type="tool_2:MessageCreationTool" documentation="Create a new sequence message to cancel a prieviously armed timer." name="cancel.timer" label="%common.is.cancel.timer" precondition="aql:preSource = preTarget" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Timer%20message%20mapping']">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </sourceVariable>
              <targetVariable name="target">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </targetVariable>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CancelTimerEvent" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CancelTimerEvent" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="TIMER"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Cancel Timer"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="messageEndAfter"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Lost and found">
            <tools xsi:type="tool_1:ToolDescription" documentation="Creates a new Found Sequence Message invoking an Exchange Item between the Source and Target Lifelines representing existing Components / Actors. This tool opens a selection wizard to select an available existing Exchange Item." name="found.message" label="%common.is.found.message" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FoundMessage.gif">
              <filters precondition="aql:true" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedInteractionFragments"/>
              </filters>
              <element name="element">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="instanceRole" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </element>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instanceRole.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                    <parameters name="targetOnExchangeItem" value="aql:(self.makeUnion(instanceRole, instanceRole))"/>
                    <parameters name="targetIR" value="aql:instanceRole"/>
                    <parameters name="messageKind" value="SYNCHRONOUS_CALL"/>
                    <parameters name="resultVariable" value="result"/>
                    <parameters name="resultPortStrategyVariable" value="portStrategy"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:endBefore->isEmpty() or endBefore.semanticEnd.getPreviousMessageEnd() = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not endBefore->isEmpty() and endBefore.semanticEnd.getPreviousMessageEnd() != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(endBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not endBefore->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(endBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(endBefore.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:instanceRole"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:instanceRole"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                    <parameters name="message" value="aql:call"/>
                    <parameters name="affected" value="aql:self.void2Null(result)"/>
                    <parameters name="portStrategy" value="aql:portStrategy"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ToolDescription" documentation="Creates a new Lost Sequence Message invoking an Exchange Item between the Source and Target Lifelines representing existing Components / Actors. This tool opens a selection wizard to select an available existing Exchange Item." name="lost.message" label="%common.is.lost.message" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/LostMessage.gif">
              <filters precondition="aql:true" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedInteractionFragments"/>
              </filters>
              <element name="element">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="instanceRole" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </element>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instanceRole.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                    <parameters name="targetOnExchangeItem" value="aql:(self.makeUnion(instanceRole, instanceRole))"/>
                    <parameters name="sourceIR" value="aql:instanceRole"/>
                    <parameters name="messageKind" value="SYNCHRONOUS_CALL"/>
                    <parameters name="resultVariable" value="result"/>
                    <parameters name="resultPortStrategyVariable" value="portStrategy"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:endBefore->isEmpty() or endBefore.semanticEnd.getPreviousMessageEnd() = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not endBefore->isEmpty() and endBefore.semanticEnd.getPreviousMessageEnd() != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not endBefore->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(endBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(endBefore.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:endBefore->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:instanceRole"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                    <parameters name="message" value="aql:call"/>
                    <parameters name="affected" value="aql:self.void2Null(result)"/>
                    <parameters name="portStrategy" value="aql:portStrategy"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Operand Group">
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with the kind LOOP covering Target Lifelines representing existing Component/Actor Parts." name="loop" label="%common.is.loop" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragment'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragment']/@subContainerMappings[name='Operand']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="operand 1"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="combined fragment"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="operator" valueExpression="LOOP"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with the kind ALT covering Target Lifelines representing existing Component/Actor Parts. Operands should be added to the combined Fragment." name="alt" label="%common.is.alt" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragment'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragment']/@subContainerMappings[name='Operand']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="operand 1"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="combined fragment"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="operator" valueExpression="ALT"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with the kind PAR covering Target Lifelines representing existing Component/Actor Parts. Operands should be added to the combined Fragment." name="par" label="%common.is.par" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragment'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragment']/@subContainerMappings[name='Operand']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="operand 1"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="combined fragment"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="operator" valueExpression="PAR"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with selected kind covering Target Lifelines representing existing Component/Actor Parts. Operands should be added to the combined Fragment." name="other.combined.fragment" label="%common.is.other.combined.fragment" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragment'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragment']/@subContainerMappings[name='Operand']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="SelectElementFromListWizard" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="aql:container.eContainerOrSelf(interaction::Scenario)"/>
                    <parameters name="scope" value="aql:self.getOperators()"/>
                    <parameters name="multiple" value="false"/>
                    <parameters name="resultVariable" value="selectedOperator"/>
                    <parameters name="wizardMessage" value="Select an operator for the Combined Fragment."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedOperator != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="end"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="start"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="operand 1"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="combined fragment"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:startFE"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="operator" valueExpression="aql:selectedOperator.toString()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Create a new constraint duration between two interaction fragments of the sequence diagram." name="duration" label="%common.is.duration" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='ConstraintDuration']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/BracketEdgeStyle.gif" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='endOfLife'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']/@borderedNodeMappings[name='InteractionState%20Mapping'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='endOfLife'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']/@borderedNodeMappings[name='InteractionState%20Mapping'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ConstraintDuration" referenceName="ownedConstraintDurations" variableName="duration">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:self.getCorrespondingIFStart(source,target)"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:self.getCorrespondingIFFinish(target,source)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="delete capella elements IS">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="deleteCapellaElement" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="no delete IS">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ReorderTool" name="reorder" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Timer%20message%20mapping'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']/@borderedNodeMappings[name='InteractionState%20Mapping'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragment'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragment']/@subContainerMappings[name='Operand'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUse']">
            <startingEndPredecessorAfter name="startingEndPredecessorAfter"/>
            <finishingEndPredecessorAfter name="finishingEndPredecessorAfter"/>
            <onEventMovedOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.actions.extensions.DoReorder" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.DoReorder">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
                  <parameters name="context" value="aql:self"/>
                  <parameters name="STARTING_END_PREDECESSOR" value="aql:startingEndPredecessorAfter.semanticEnd"/>
                  <parameters name="FINISHING_END_PREDECESSOR" value="aql:finishingEndPredecessorAfter.semanticEnd"/>
                </subModelOperations>
              </firstModelOperations>
            </onEventMovedOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Exchange Contexts. Removing an Exchange Context graphical object does not delete the corresponding Constraint from the model. This tool does not modify the semantic model." name="exchange.context" label="%common.is.exchange.context" precondition="aql:element.eAllContents(interaction::Scenario)->size() > 0 or element.eAllContents(interaction::SequenceMessage)->size() > 0" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="visibleExchangeContexts" computationExpression="aql:self.getVisibleExchangeContexts(diagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedExchangeContexts" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.makeDiff(self.getExchangeContextsToInsertInDiagram(), visibleExchangeContexts)"/>
                  <parameters name="initialSelection" value="aql:visibleExchangeContexts"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select ExchangeContexts to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,visibleExchangeContexts,false)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:visibleExchangeContexts">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:StateCreationTool" documentation="Create a State Fragment referencing an existing Function allocated to Target Component/Actor. This tool opens a selection wizard to select an available Function." name="allocated.function" label="%common.is.allocated.function" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']/@borderedNodeMappings[name='InteractionState%20Mapping']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <filters precondition="aql:(self.target.eContainerOrSelf(epbs::EPBSArchitecture)->size() != 0)" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
            </filters>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select Function" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.void2Null(self.getFunctionsForState(self.getCoveredFromExecOrIR(container).representedInstance.abstractType))"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedFunction"/>
                  <parameters name="wizardMessage" value="Select a Function"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedFunction != 'WIZARD_CANCELED' and not selectedFunction->isEmpty()">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionState">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedAbstractFunction" valueExpression="aql:selectedFunction"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionStateEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedAbstractFunction" valueExpression="aql:selectedFunction"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(interactionState)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.StateFragment" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedAbstractFunction" valueExpression="aql:selectedFunction"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:interactionState"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:interactionStateEnd"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="startingEndPredecessor"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:StateCreationTool" documentation="Create a State Fragment referencing an existing State/Mode of the Target Component/Actor. This tool opens a selection wizard to select an available State/Mode." name="state.mode" label="%common.is.state.mode" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']/@borderedNodeMappings[name='default%20execution']/@borderedNodeMappings[name='Execution']/@borderedNodeMappings[name='InteractionState%20Mapping']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select State" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.getCoveredFromExecOrIR(container).representedInstance.getISStateModes()"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedState"/>
                  <parameters name="wizardMessage" value="Select a Mode/State"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedState != 'WIZARD_CANCELED' and not selectedState->isEmpty()">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionState">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedAbstractState" valueExpression="aql:selectedState"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionStateEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedAbstractState" valueExpression="aql:selectedState"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(interactionState)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.StateFragment" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedAbstractState" valueExpression="aql:selectedState"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:interactionState"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:interactionStateEnd"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="startingEndPredecessor"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InteractionUseCreationTool" documentation="Creates a Reference to existing Interface Scenario covering Target Lifelines representing existing Actor/Component Parts." name="reference" label="%common.is.reference" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUse']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/InteractionUse.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select Scenario" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:self.eContainerOrSelf(interaction::Scenario)"/>
                  <parameters name="scope" value="aql:self.void2Null(self.eContainerOrSelf(interaction::Scenario).getReferenceScope())"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedScenario"/>
                  <parameters name="wizardMessage" value="Select a Scenario"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedScenario != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionUse" referenceName="ownedTimeLapses" variableName="interactionUse">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="interactionUse"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedScenario" valueExpression="aql:selectedScenario"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
            <coveredLifelines name="coveredLifeLines"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:OperandCreationTool" documentation="Creates a new Operand within the target Combined Fragment. " name="operand" label="%common.is.operand" precondition="aql:container.operator != 'LOOP'" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragment']/@subContainerMappings[name='Operand']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/InteractionOperand.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="operand"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:container.start.coveredInstanceRoles"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.getFragmentFromContained()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="Direct edit operand" inputLabelExpression="feature:name">
            <mask mask="[{0}]"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="rename instance role" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="rename basic message" inputLabelExpression="aql:self.sendingEnd.event.operation.allocatedItem.name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.sendingEnd.event.operation.allocatedItem">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Drop Component" precondition="aql:element->filter(cs::Component)->size() != 0" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:newSemanticContainer">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.isValidScenarioDrop(self.eContainerOrSelf(interaction::Scenario),element)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:element.abstractTypedElements->first()"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:element.name"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Constraint From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="Set Duration" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="duration" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleReorderTool" name="IRReorder" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping']">
            <predecessorBefore name="predecessorBefore"/>
            <predecessorAfter name="predecessorAfter"/>
            <instanceRoleMoved>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.actions.extensions.doIRReorder" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.doIRReorder">
                  <parameters name="PREDECESSOR_BEFORE" value="aql:predecessorBefore"/>
                  <parameters name="PREDECESSOR_AFTER" value="aql:predecessorAfter"/>
                  <parameters name="SCENARIO" value="aql:self.eContainerOrSelf(interaction::Scenario)"/>
                </subModelOperations>
              </firstModelOperations>
            </instanceRoleMoved>
          </ownedTools>
        </toolSections>
        <toolSections name="Common" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu']">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%common.is.constraint" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%common.is.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Scenario_ContrainedElements']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%common.is.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,false)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:SequenceDiagramDescription" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Drop%20Component'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraint%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']" name="Component Exchanges Scenario" label="%common.es" titleExpression="aql:self.name.addScenarioPrefix('[ES]')" domainClass="interaction.Scenario" preconditionExpression="aql:self.isValidES()" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Scenario_ContrainedElements']" endsOrdering="aql:self.makeIntersection(self.ownedInteractionFragments, eventEnds)" instanceRolesOrdering="feature:ownedInstanceRoles">
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.executions.filter" label="%common.es.hide.executions.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.pre.post.conditions.filter" label="%common.es.hide.pre.post.conditions.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='preconditionMappingDF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='postconditionMappingDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.filter" label="%common.es.show.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.parameters.filter" label="%common.es.show.exchange.items.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.filter" label="%common.es.show.functional.exchanges.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.exchange.items.filter" label="%common.es.show.functional.exchanges.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.parameters.filter" label="%common.es.show.functional.exchanges.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.exchange.items.parameters.filter" label="%common.es.show.functional.exchanges.exchange.items.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.component.exchanges.exchange.items.filter" label="%common.es.show.component.exchanges.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.ce.param.filter" label="%common.es.show.ce.param.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.ce.ei.param.filter" label="%common.es.show.ce.ei.param.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.context.filter" label="%common.es.show.exchange.context.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.fe.exchange.context.filter" label="%common.es.show.fe.exchange.context.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.ce.exchange.context.filter" label="%common.es.show.ce.exchange.context.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%common.es.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
      </filters>
      <diagramInitialisation>
        <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
          <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(self.ancestors()->filter(ctx::SystemAnalysis)->size() > 0)">
            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.ownedInstanceRoles->select(role | not role.representedInstance.abstractType.actor)->size()=0">
              <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:self.eContainerOrSelf(ctx::SystemAnalysis).system.representingParts->first()"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.eContainerOrSelf(ctx::SystemAnalysis).system.name"/>
              </subModelOperations>
              <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(self.eContainerOrSelf(ctx::SystemAnalysis).system)"/>
            </subModelOperations>
          </subModelOperations>
          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="DATA_FLOW"/>
        </firstModelOperations>
      </diagramInitialisation>
      <defaultLayer name="Default" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Scenario_ContrainedElements'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Scenario_ExchangeContext'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']" icon="">
        <nodeMappings xsi:type="description_2:InstanceRoleMapping" name="Instancerole Mapping DF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20DF']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20instance%20role%20DF']" semanticCandidatesExpression="feature:ownedInstanceRoles" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole">
          <borderedNodeMappings xsi:type="description_2:ExecutionMapping" name="default execution DF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20DF']" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole" reusedBorderedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']/@borderedNodeMappings[name='InteractionStateFunction']" startingEndFinderExpression="aql:self" finishingEndFinderExpression="aql:self">
            <borderedNodeMappings xsi:type="description_2:ExecutionMapping" name="Execution DF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20DF']" semanticCandidatesExpression="aql:self.getExecutionsFromInstanceRoleOrParentExecution()" synchronizationLock="true" domainClass="interaction.Execution" reusedBorderedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish">
              <borderedNodeMappings xsi:type="description_2:StateMapping" name="InteractionStateFunction" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.getInteractionStatesOnExecution()" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.StateFragment" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']" showIcon="false" labelExpression="aql:self.relatedAbstractFunction.name" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']" labelPosition="node" resizeKind="NSEW" width="10" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
                <conditionnalStyles predicateExpression="aql:not self.relatedAbstractState->isEmpty() and self.relatedAbstractState->filter(capellacommon::Mode)->size() > 0">
                  <style xsi:type="style:EllipseNodeDescription" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateMode_Border_Gray']" showIcon="false" labelExpression="aql:self.relatedAbstractState.name" labelPosition="node" resizeKind="NSEW" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Mode_Gray']" horizontalDiameterComputationExpression="10" verticalDiameterComputationExpression="3">
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:not self.relatedAbstractState->isEmpty() and self.relatedAbstractState->filter(capellacommon::Mode)->size() = 0">
                  <style xsi:type="style:EllipseNodeDescription" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateMode_Border_Gray']" showIcon="false" labelExpression="aql:self.relatedAbstractState.name" labelPosition="node" resizeKind="NSEW" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_State_Gray']" horizontalDiameterComputationExpression="10" verticalDiameterComputationExpression="3">
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:self.relatedAbstractFunction != null and self.relatedAbstractFunction.kind = fa::FunctionKind::DUPLICATE">
                  <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.relatedAbstractFunction.name" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Duplicate.gif" labelPosition="node" resizeKind="NSEW" width="10" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xBD_ControlNode']">
                    <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:self.relatedAbstractFunction != null and self.relatedAbstractFunction.kind = fa::FunctionKind::GATHER">
                  <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.relatedAbstractFunction.name" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Gather.gif" labelPosition="node" resizeKind="NSEW" width="10" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xBD_ControlNode']">
                    <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:self.relatedAbstractFunction != null and self.relatedAbstractFunction.kind = fa::FunctionKind::ROUTE">
                  <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.relatedAbstractFunction.name" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_ROUTE.gif" labelPosition="node" resizeKind="NSEW" width="10" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xBD_ControlNode']">
                    <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:self.relatedAbstractFunction != null and self.relatedAbstractFunction.kind = fa::FunctionKind::SELECT">
                  <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.relatedAbstractFunction.name" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Select.gif" labelPosition="node" resizeKind="NSEW" width="10" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xBD_ControlNode']">
                    <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:self.relatedAbstractFunction != null and self.relatedAbstractFunction.kind = fa::FunctionKind::SPLIT">
                  <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.relatedAbstractFunction.name" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Split.gif" labelPosition="node" resizeKind="NSEW" width="10" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xBD_ControlNode']">
                    <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
              </borderedNodeMappings>
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="" resizeKind="NSEW" width="1" height="3">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
              </style>
              <conditionnalStyles predicateExpression="service:isTransformedExecution()">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="" resizeKind="NSEW" width="1" height="3">
                  <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_gray']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="service:isFunctionalExecution()">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']" labelExpression="" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']" resizeKind="NSEW" width="1" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.abstractType->filter(cs::Component)->size() > 0 and not (self.isInternalLCForExecution())">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" showIcon="false" labelExpression="" resizeKind="NSEW" width="1" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                </style>
              </conditionnalStyles>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance.abstractType->filter(cs::Component)->size() > 0 and self.isInternalLCForExecution()">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" showIcon="false" labelExpression="" resizeKind="NSEW" width="1" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']">
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                </style>
              </conditionnalStyles>
            </borderedNodeMappings>
            <borderedNodeMappings xsi:type="description_2:EndOfLifeMapping" name="Lifeline deletion mapping DF" preconditionExpression="aql:self.eContainer().ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE).receivingEnd.covered->includes(self)" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20DF']" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:''" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/eol.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <borderedNodeMappings xsi:type="description_2:EndOfLifeMapping" name="endOfLifeDF" preconditionExpression="aql:not (self.eContainer().ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE).receivingEnd.covered->includes(self))" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.InstanceRole">
              <deletionDescription href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20System%20Actors']/@defaultLayer/@toolSections.0/@ownedTools[name='No%20Delete']"/>
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:''" sizeComputationExpression="1" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/handlelifeline.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Lifeline_Gray']" showIcon="false" labelExpression="" sizeComputationExpression="" labelPosition="node" resizeKind="NSEW" width="1" height="40">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </borderedNodeMappings>
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getInstanceRoleLabel()" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.abstractType->filter(cs::Component)->select(c | c.isActor())->size() > 0">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']" labelExpression="aql:self.getInstanceRoleLabel()" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.abstractType->filter(pa::PhysicalComponent)->size() > 0 and self.isBehaviorComponent()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="aql:self.getInstanceRoleLabel()" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" labelPosition="node" resizeKind="EAST_WEST" width="15" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.abstractType->filter(pa::PhysicalComponent)->size() > 0 and self.isNodeComponent()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Border']" labelExpression="aql:self.getInstanceRoleLabel()" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow_Label']" labelPosition="node" resizeKind="EAST_WEST" width="15" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Node_Yellow']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.abstractType->filter(pa::PhysicalComponent)->size() > 0">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Border']" labelExpression="aql:self.getInstanceRoleLabel()" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray_Label']" labelPosition="node" resizeKind="EAST_WEST" width="15" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Unset_Gray']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.abstractType->filter(cs::Component)->size() > 0">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="aql:self.getInstanceRoleLabel()" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Label_Blue']" labelPosition="node" resizeKind="EAST_WEST" width="15" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Blue']"/>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings xsi:type="description_2:InstanceRoleMapping" name="hideSequenceLabelDF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20DF']" semanticCandidatesExpression="ocl:Set {}" domainClass="EObject">
          <borderedNodeMappings xsi:type="description_2:InstanceRoleMapping" name="hideSequenceLabelDF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20DF']" semanticCandidatesExpression="ocl:Set {}" domainClass="EObject"/>
        </nodeMappings>
        <nodeMappings name="LostFoundEnd DF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.sendingEnd = null and ownedMessage.receivingEnd != null or ownedMessage.sendingEnd != null and ownedMessage.receivingEnd = null)" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.SequenceMessage">
          <style xsi:type="style:DotDescription" labelExpression="" tooltipExpression="Lost end" sizeComputationExpression="1" strokeSizeComputationExpression="1">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <nodeMappings xsi:type="description_2:ObservationPointMapping" name="ObservationPoint DF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20DF']" semanticCandidatesExpression="aql:self.makeUnion(self.ownedConstraintDurations.start, self.ownedConstraintDurations.finish)" semanticElements="service:getAssociatedSemanticElements()" domainClass="InteractionFragment">
          <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="" sizeComputationExpression="1" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/observation.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="preconditionMappingDF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20DF']" semanticCandidatesExpression="aql:self.preCondition" domainClass="capellacore.Constraint">
          <style xsi:type="style:NoteDescription" showIcon="false" labelExpression="aql:'pre:' + self.getConstraintLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="postconditionMappingDF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20DF']" semanticCandidatesExpression="aql:self.postCondition" domainClass="capellacore.Constraint">
          <style xsi:type="style:NoteDescription" showIcon="false" labelExpression="aql:'post:' + self.getConstraintLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </nodeMappings>
        <edgeMappings xsi:type="description_2:BasicMessageMapping" name="Basic message mapping DF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20basic%20message%20DF']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::SYNCHRONOUS_CALL or ownedMessage.kind = interaction::MessageKind::ASYNCHRONOUS_CALL or ownedMessage.kind = interaction::MessageKind::UNSET)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='LostFoundEnd%20DF']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='LostFoundEnd%20DF']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="aql:self.getSendingEndEvent()" receivingEndFinderExpression="aql:self.getReceivingEndEvent()">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
          <conditionnalStyles predicateExpression="aql:self.kind = interaction::MessageKind::SYNCHRONOUS_CALL or self.kind = interaction::MessageKind::UNSET">
            <style targetArrow="InputFillClosedArrow">
              <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <edgeMappings xsi:type="description_2:ReturnMessageMapping" name="return message mapping DF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::REPLY)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="feature:sendingEnd" receivingEndFinderExpression="feature:receivingEnd" invocationMessageFinderExpression="aql:self.getInvocationMessage()">
          <style lineStyle="dash">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_2:CreationMessageMapping" name="creation message mapping DF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20DF']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::CREATE)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="feature:sendingEnd" receivingEndFinderExpression="feature:receivingEnd">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(view.eContainerOrSelf(diagram::DDiagram))">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_2:DestructionMessageMapping" name="destruction message mapping DF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20DF']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE)" semanticElements="service:getAssociatedSemanticElements()" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Lifeline%20deletion%20mapping%20DF']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="feature:sendingEnd" receivingEndFinderExpression="feature:receivingEnd">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(view.eContainerOrSelf(diagram::DDiagram))">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_2:BasicMessageMapping" name="Timer message mapping DF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20basic%20message%20DF']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::TIMER)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="aql:self.getSendingEndEvent()" receivingEndFinderExpression="aql:self.getReceivingEndEvent()">
          <style sourceArrow="Diamond">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="ConstraintDuration DF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20DF']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Set%20Duration']" semanticCandidatesExpression="feature:ownedConstraintDurations" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='ObservationPoint%20DF']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='ObservationPoint%20DF']" targetFinderExpression="feature:finish" sourceFinderExpression="feature:start" domainClass="interaction.ConstraintDuration" useDomainElement="true">
          <style xsi:type="style:BracketEdgeStyleDescription" sourceArrow="InputArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="feature:duration">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings xsi:type="description_2:InteractionUseMapping" name="InteractionUseDF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.ownedTimeLapses->filter(interaction::InteractionUse)" semanticElements="aql:self.makeUnion(self, self.referencedScenario, self.referencedScenario.eContainerOrSelf(interaction::AbstractCapability))" domainClass="interaction.InteractionUse" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish" coveredLifelinesExpression="aql:self.getCoveredFromAbstractFragment()" centerLabelExpression="aql:self.referencedScenario.name">
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression=" ref" labelAlignment="LEFT" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_CombinedFragment_Gray']">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <labelBorderStyle href="environment:/viewpoint#//@labelBorderStyles/@labelBorderStyleDescriptions.0"/>
          </style>
        </containerMappings>
        <containerMappings xsi:type="description_2:CombinedFragmentMapping" name="CombinedFragmentDF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.ownedTimeLapses->filter(interaction::CombinedFragment)" synchronizationLock="true" domainClass="interaction.CombinedFragment" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish" coveredLifelinesExpression="aql:self.getCoveredFromAbstractFragment()">
          <subContainerMappings xsi:type="description_2:OperandMapping" name="OperandDF" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Direct%20edit%20operand']" semanticCandidatesExpression="feature:referencedOperands" synchronizationLock="true" domainClass="interaction.InteractionOperand" startingEndFinderExpression="aql:self.getOperandBegin()" finishingEndFinderExpression="aql:self.getOperandEnd()">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.getOperandLabel()" labelAlignment="LEFT" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_CombinedFragment_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </subContainerMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.getOperatorLabel()" labelAlignment="LEFT" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_CombinedFragment_Gray']">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <labelBorderStyle href="environment:/viewpoint#//@labelBorderStyles/@labelBorderStyleDescriptions.0"/>
          </style>
        </containerMappings>
        <toolSections name="tools section" label="Scenario Elements" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='exchange.context']">
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="node.pc" label="%common.es.node.pc" precondition="aql:self.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ComponentInstanceNodePC.gif">
            <filters precondition="aql:self.target.eContainerOrSelf(pa::PhysicalArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getComponentContainer()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(la::LogicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="feature:ownedLogicalComponentPkg">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="LogicalComponent" referenceName="ownedLogicalComponents" variableName="component">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(pa::PhysicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="feature:ownedPhysicalComponentPkg">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PhysicalComponent" referenceName="ownedPhysicalComponents" variableName="component">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="nature" valueExpression="NODE"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="behavior.pc" label="%common.es.behavior.pc" precondition="aql:self.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ComponentInstance.gif">
            <filters precondition="aql:self.target.eContainerOrSelf(pa::PhysicalArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getComponentContainer()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(la::LogicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="feature:ownedLogicalComponentPkg">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="LogicalComponent" referenceName="ownedLogicalComponents" variableName="component">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(pa::PhysicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="feature:ownedPhysicalComponentPkg">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PhysicalComponent" referenceName="ownedPhysicalComponents" variableName="component">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="nature" valueExpression="BEHAVIOR"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="component" label="%common.es.component" precondition="aql:self.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ComponentInstance.gif">
            <filters precondition="aql:self.target.eContainerOrSelf(la::LogicalArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.getComponentContainer()">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(la::LogicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="LogicalComponent" referenceName="ownedLogicalComponents" variableName="component">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)->filter(pa::PhysicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PhysicalComponent" referenceName="ownedPhysicalComponents" variableName="component">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="nature" valueExpression="BEHAVIOR"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="actor" label="%common.es.actor" precondition="aql:self.eContainerOrSelf(epbs::EPBSArchitecture)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Actor.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(ctx::SystemAnalysis)->size() != 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="feature:ownedSystemComponentPkg">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SystemComponent" referenceName="ownedSystemComponents" variableName="actor">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="actor" valueExpression="true"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(la::LogicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="feature:ownedLogicalComponentPkg">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="LogicalComponent" referenceName="ownedLogicalComponents" variableName="actor">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="actor" valueExpression="true"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(pa::PhysicalArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:Let" variableName="parentContainer" valueExpression="aql:self"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="feature:ownedPhysicalComponentPkg">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PhysicalComponent" referenceName="ownedPhysicalComponents" variableName="actor">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="actor" valueExpression="true"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="nature" valueExpression="service:parentContainer.computePhysicalActorNature()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self->filter(epbs::EPBSArchitecture)->size() != 0">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer().ownedArchitectures->filter(pa::PhysicalArchitecture).ownedPhysicalComponentPkg">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PhysicalComponent" referenceName="ownedPhysicalComponents" variableName="actor">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="actor" valueExpression="true"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:actor.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:actor.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(actor)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="ESComponentsGroup">
            <tools xsi:type="tool_2:InstanceRoleCreationTool" name="components" label="%common.es.components" precondition="aql:self.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(ctx::SystemAnalysis)->size() != 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
              </filters>
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Select Component" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="service:getAllMultiInstanceRoleComponentParts"/>
                    <parameters name="initialSelection" value="aql:self.void2Null(containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance->select(x | x.abstractType->filter(cs::Component)->size() > 0 and x.abstractType->filter(cs::Component)->select(c | c.isActor())->size() = 0))"/>
                    <parameters name="wizardMessage" value=""/>
                    <parameters name="resultVariable" value="result"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(result)">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:i != 'WIZARD_CANCELED'">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance->includes(i))">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:i"/>
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:i.name"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(i.abstractType)"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles">
                    <parameters name="result" value="aql:self.void2Null(result)"/>
                    <parameters name="current" value="aql:self.void2Null(containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole)->select(x | x.representedInstance.abstractType->filter(cs::Component)->size() > 0 and x.representedInstance.abstractType->filter(cs::Component)->select(c | c.isActor())->size() = 0))"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
            <tools xsi:type="tool_2:InstanceRoleCreationTool" documentation="Creates a new lifeline representing an existing component or the system. This tool allows having multiple lifelines representing the same component." name="add.multiple.lifelines.for.an.existing.component" label="%common.es.add.multiple.lifelines.for.an.existing.component" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AddInstanceRole.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Select Component" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="service:getAllMultiInstanceRoleComponentParts"/>
                    <parameters name="wizardMessage" value=""/>
                    <parameters name="resultVariable" value="result"/>
                    <parameters name="multiple" value="false"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:result"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:result"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:result.name"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(result.abstractType)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="ESActorsGroup">
            <tools xsi:type="tool_2:InstanceRoleCreationTool" name="actors" label="%common.es.actors" precondition="aql:self->filter(interaction::Scenario)->size() = 1" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Select Actor" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="service:getAllMultiInstanceRoleActorParts"/>
                    <parameters name="initialSelection" value="aql:self.void2Null(containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance->select(x | x.abstractType->filter(cs::Component)->select(c | c.isActor())->size() > 0))"/>
                    <parameters name="wizardMessage" value=""/>
                    <parameters name="resultVariable" value="result"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(result)">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:i != 'WIZARD_CANCELED'">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                        <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance->includes(i))">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:i"/>
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:i.name"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(i.abstractType)"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles">
                    <parameters name="result" value="aql:self.void2Null(result)"/>
                    <parameters name="current" value="aql:self.void2Null(containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole)->select(x | x.representedInstance.abstractType->filter(cs::Component)->select(c | c.isActor())->size() > 0))"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
            <tools xsi:type="tool_2:InstanceRoleCreationTool" documentation="Creates a new lifeline representing an existing actor. This tool allows having multiple lifelines representing the same actor." name="add.multiple.lifelines.for.an.existing.actor" label="%common.es.add.multiple.lifelines.for.an.existing.actor" precondition="aql:self->filter(interaction::Scenario)->size() = 1" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AddInstanceRole.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Select Component" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="service:getAllMultiInstanceRoleActorParts"/>
                    <parameters name="wizardMessage" value=""/>
                    <parameters name="resultVariable" value="result"/>
                    <parameters name="multiple" value="false"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:result"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:result"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:result.name"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(result.abstractType)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="FunctionalExchange">
            <tools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Sequence Message invoking a Functional Exchange without return branch between the Source and Target Lifelines representing existing Component/Actor Parts. The kind of these Components/Actors is related to the Architecture. This tool opens a selection wizard to select an available existing Functional Exchange or to create a new one between existing/new allocated  Functions.&#xD;&#xA;This tool is masked as soon as a Component Exchange is displayed on the scenario." name="functional.exchange" label="%common.es.functional.exchange" precondition="aql:self.allowMessageCreation2(preSource, preTarget, false, messageEndBefore, messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20DF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(interaction::Scenario).ownedEvents.operation->filter(fa::ComponentExchange)->size() > 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedInteractionFragments"/>
              </filters>
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </sourceVariable>
              <targetVariable name="target">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </targetVariable>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                    <parameters name="message" value="aql:call"/>
                    <parameters name="exchangeType" value="FE"/>
                    <parameters name="sourceIR" value="aql:sourceIR"/>
                    <parameters name="targetIR" value="aql:targetIR"/>
                    <parameters name="messageKind" value="ASYNCHRONOUS_CALL"/>
                    <parameters name="resultVariable" value="result"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'CANCELED_DIALOG'">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                      <parameters name="message" value="aql:call"/>
                      <parameters name="affected" value="aql:self.void2Null(result)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="messageEndAfter"/>
            </tools>
            <tools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Sequence Message invoking a Functional Exchange with return branch between the Source and Target Lifelines representing existing Component/Actor Parts. The kind of these Components/Actors is related to the Architecture. This tool opens a selection wizard to select an available existing Functional Exchange or to create a new one between existing/new allocated  Functions.&#xD;&#xA;This tool is masked as soon as a Component Exchange is displayed on the scenario. " name="functional.exchange.with.return.branch" label="%common.es.functional.exchange.with.return.branch" precondition="aql:self.allowMessageCreation2(preSource, preTarget, false, messageEndBefore, messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20DF']" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']">
              <filters precondition="aql:self.target.eContainerOrSelf(interaction::Scenario).ownedEvents.operation->filter(fa::ComponentExchange)->size() > 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedInteractionFragments"/>
              </filters>
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </sourceVariable>
              <targetVariable name="target">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </targetVariable>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                    <parameters name="message" value="aql:call"/>
                    <parameters name="exchangeType" value="FE"/>
                    <parameters name="sourceIR" value="aql:sourceIR"/>
                    <parameters name="targetIR" value="aql:targetIR"/>
                    <parameters name="messageKind" value="SYNCHRONOUS_CALL"/>
                    <parameters name="resultVariable" value="result"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'CANCELED_DIALOG'">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationReply"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationReply"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="SYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="reply">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName() + '_reply'"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="REPLY"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(call)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingReplyEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationReply"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:reply">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingReplyEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingReplyEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(sendingReplyEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(sendingReplyEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationReply"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:reply">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:receivingReplyEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:reply">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingReplyEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingReplyEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:sendingReplyEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                      <parameters name="message" value="aql:call"/>
                      <parameters name="affected" value="aql:self.void2Null(result)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="messageEndAfter"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="ComponentExchange">
            <tools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Sequence Message invoking a Component Exchange without return branch between the Source and Target Lifelines representing existing Component/Actor Parts. The kind of these Components/Actors is related to the Architecture. This tool opens a selection wizard to select an available existing Component Exchange or to create a new one between these Components/Actors.This tool is masked as soon as a Functional Exchange is displayed on the scenario." name="component.exchange" label="%common.es.component.exchange" precondition="aql:self.allowMessageCreation2(preSource, preTarget, false, messageEndBefore, messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20DF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(interaction::Scenario).ownedEvents.operation->filter(fa::FunctionalExchange)->size() > 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedInteractionFragments"/>
              </filters>
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </sourceVariable>
              <targetVariable name="target">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </targetVariable>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                    <parameters name="message" value="aql:call"/>
                    <parameters name="exchangeType" value="CE"/>
                    <parameters name="sourceIR" value="aql:sourceIR"/>
                    <parameters name="targetIR" value="aql:targetIR"/>
                    <parameters name="messageKind" value="ASYNCHRONOUS_CALL"/>
                    <parameters name="resultVariable" value="result"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'CANCELED_DIALOG'">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                      <parameters name="message" value="aql:call"/>
                      <parameters name="affected" value="aql:self.void2Null(result)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="messageEndAfter"/>
            </tools>
            <tools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Sequence Message invoking a Component Exchange with return branch between the Source and Target Lifelines representing existing Component/Actor Parts. The kind of these Components/Actors is related to the Architecture. This tool opens a selection wizard to select an available existing Component Exchange or to create a new one between these Components/Actors.This tool is masked as soon as a Functional Exchange is displayed on the scenario." name="component.exchange.with.return.branch" label="%common.es.component.exchange.with.return.branch" precondition="aql:self.allowMessageCreation2(preSource, preTarget, false, messageEndBefore, messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20DF']" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']">
              <filters precondition="aql:self.target.eContainerOrSelf(interaction::Scenario).ownedEvents.operation->filter(fa::FunctionalExchange)->size() > 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedInteractionFragments"/>
              </filters>
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </sourceVariable>
              <targetVariable name="target">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </targetVariable>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                    <parameters name="message" value="aql:call"/>
                    <parameters name="exchangeType" value="CE"/>
                    <parameters name="sourceIR" value="aql:sourceIR"/>
                    <parameters name="targetIR" value="aql:targetIR"/>
                    <parameters name="messageKind" value="SYNCHRONOUS_CALL"/>
                    <parameters name="resultVariable" value="result"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'CANCELED_DIALOG'">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationReply"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationReply"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="SYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="reply">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName() + '_reply'"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="REPLY"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(call)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingReplyEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationReply"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:reply">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingReplyEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingReplyEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(sendingReplyEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(sendingReplyEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationReply"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:reply">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:receivingReplyEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:reply">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingReplyEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingReplyEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:sendingReplyEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                      <parameters name="message" value="aql:call"/>
                      <parameters name="affected" value="aql:self.void2Null(result)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="messageEndAfter"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Timers">
            <tools xsi:type="tool_2:MessageCreationTool" documentation="Create a new sequence message to arm a timer." name="arm.timer" label="%common.es.arm.timer" precondition="aql:preSource = preTarget" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Timer%20message%20mapping%20DF']">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </sourceVariable>
              <targetVariable name="target">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </targetVariable>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ArmTimerEvent" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ArmTimerEvent" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="TIMER"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Arm Timer"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="messageEndAfter"/>
            </tools>
            <tools xsi:type="tool_2:MessageCreationTool" documentation="Create a new sequence message to cancel a prieviously armed timer." name="cancel.timer" label="%common.es.cancel.timer" precondition="aql:preSource = preTarget" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Timer%20message%20mapping%20DF']">
              <sourceVariable name="source">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </sourceVariable>
              <targetVariable name="target">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </targetVariable>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CancelTimerEvent" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CancelTimerEvent" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="TIMER"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="Cancel Timer"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="messageEndAfter"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Lost and found">
            <tools xsi:type="tool_1:ToolDescription" documentation="Creates a new Found Sequence Message invoking a Functional Exchange between the Source and Target Lifelines representing existing Components / Actors. This tool opens a selection wizard to select an available existing Functional Exchange." name="found.functional.exchange" label="%common.es.found.functional.exchange" precondition="aql:element->filter(interaction::Execution)->size() > 0 or element->filter(interaction::InstanceRole)->size() > 0" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FoundMessage.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(interaction::Scenario).ownedEvents.operation->filter(fa::ComponentExchange)->size() > 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedInteractionFragments"/>
              </filters>
              <element name="element">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="instanceRole" computationExpression="aql:if (self->filter(interaction::InstanceRole)->size() > 0) then self else self.covered endif"/>
              </element>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instanceRole.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                    <parameters name="targetIR" value="aql:instanceRole"/>
                    <parameters name="messageKind" value="SYNCHRONOUS_CALL"/>
                    <parameters name="resultVariable" value="result"/>
                    <parameters name="exchangeType" value="FE"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:endBefore->isEmpty() or endBefore.semanticEnd.getPreviousMessageEnd() = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not endBefore->isEmpty() and endBefore.semanticEnd.getPreviousMessageEnd() != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(endBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not endBefore->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(endBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(endBefore.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:endBefore->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:instanceRole"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:instanceRole"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                    <parameters name="message" value="aql:call"/>
                    <parameters name="affected" value="aql:self.void2Null(result)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ToolDescription" documentation="Creates a new Lost Sequence Message invoking a Component Exchange between the Source and Target Lifelines representing existing Components / Actors. This tool opens a selection wizard to select an available existing Component Exchange." name="lost.component.exchange" label="%common.es.lost.component.exchange" precondition="aql:element->filter(interaction::Execution)->size() > 0 or element->filter(interaction::InstanceRole)->size() > 0" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/LostMessage.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(interaction::Scenario).ownedEvents.operation->filter(fa::FunctionalExchange)->size() > 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedInteractionFragments"/>
              </filters>
              <element name="element">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="instanceRole" computationExpression="aql:if (self->filter(interaction::InstanceRole)->size() > 0) then self else self.covered endif"/>
              </element>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instanceRole.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                    <parameters name="sourceIR" value="aql:instanceRole"/>
                    <parameters name="messageKind" value="SYNCHRONOUS_CALL"/>
                    <parameters name="resultVariable" value="result"/>
                    <parameters name="exchangeType" value="CE"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:endBefore->isEmpty() or endBefore.semanticEnd.getPreviousMessageEnd() = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not endBefore->isEmpty() and endBefore.semanticEnd.getPreviousMessageEnd() != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(endBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Sending Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not endBefore->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(endBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(endBefore.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:endBefore->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:instanceRole"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                    <parameters name="message" value="aql:call"/>
                    <parameters name="affected" value="aql:self.void2Null(result)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ToolDescription" documentation="Creates a new Found Sequence Message invoking a Component Exchange between the Source and Target Lifelines representing existing Components / Actors. This tool opens a selection wizard to select an available existing Component Exchange." name="found.component.exchange" label="%common.es.found.component.exchange" precondition="aql:element->filter(interaction::Execution)->size() > 0 or element->filter(interaction::InstanceRole)->size() > 0" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FoundMessage.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(interaction::Scenario).ownedEvents.operation->filter(fa::FunctionalExchange)->size() > 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedInteractionFragments"/>
              </filters>
              <element name="element">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="instanceRole" computationExpression="aql:if (self->filter(interaction::InstanceRole)->size() > 0) then self else self.covered endif"/>
              </element>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instanceRole.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                    <parameters name="targetIR" value="aql:instanceRole"/>
                    <parameters name="messageKind" value="SYNCHRONOUS_CALL"/>
                    <parameters name="resultVariable" value="result"/>
                    <parameters name="exchangeType" value="CE"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:endBefore->isEmpty() or endBefore.semanticEnd.getPreviousMessageEnd() = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not endBefore->isEmpty() and endBefore.semanticEnd.getPreviousMessageEnd() != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(endBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not endBefore->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(endBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(endBefore.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:endBefore->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:instanceRole"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:instanceRole"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                    <parameters name="message" value="aql:call"/>
                    <parameters name="affected" value="aql:self.void2Null(result)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ToolDescription" documentation="Creates a new Lost Sequence Message invoking a Functional Exchange between the Source and Target Lifelines representing existing Components / Actors. This tool opens a selection wizard to select an available existing Functional Exchange." name="lost.functional.exchange" label="%common.es.lost.functional.exchange" precondition="aql:element->filter(interaction::Execution)->size() > 0 or element->filter(interaction::InstanceRole)->size() > 0" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/LostMessage.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(interaction::Scenario).ownedEvents.operation->filter(fa::ComponentExchange)->size() > 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedInteractionFragments"/>
              </filters>
              <element name="element">
                <subVariables xsi:type="tool_1:AcceleoVariable" name="instanceRole" computationExpression="aql:if (self->filter(interaction::InstanceRole)->size() > 0) then self else self.covered endif"/>
              </element>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:instanceRole.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                    <parameters name="sourceIR" value="aql:instanceRole"/>
                    <parameters name="messageKind" value="SYNCHRONOUS_CALL"/>
                    <parameters name="resultVariable" value="result"/>
                    <parameters name="exchangeType" value="FE"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:endBefore->isEmpty() or endBefore.semanticEnd.getPreviousMessageEnd() = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not endBefore->isEmpty() and endBefore.semanticEnd.getPreviousMessageEnd() != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(endBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Sending Call ' + call.name"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not endBefore->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(endBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(endBefore.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:endBefore->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:instanceRole"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                    <parameters name="message" value="aql:call"/>
                    <parameters name="affected" value="aql:self.void2Null(result)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="delete capella elements DF">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="deleteCapellaElement" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="no delete DF">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ReorderTool" name="reorder" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Timer%20message%20mapping%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']/@borderedNodeMappings[name='InteractionStateFunction'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentDF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUseDF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentDF']/@subContainerMappings[name='OperandDF']">
            <startingEndPredecessorAfter name="startingEndPredecessorAfter"/>
            <finishingEndPredecessorAfter name="finishingEndPredecessorAfter"/>
            <onEventMovedOperation>
              <firstModelOperations xsi:type="tool_1:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.actions.extensions.DoReorder" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.DoReorder">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
                <parameters name="context" value="aql:self"/>
                <parameters name="STARTING_END_PREDECESSOR" value="aql:startingEndPredecessorAfter.semanticEnd"/>
                <parameters name="FINISHING_END_PREDECESSOR" value="aql:finishingEndPredecessorAfter.semanticEnd"/>
              </firstModelOperations>
            </onEventMovedOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:StateCreationTool" documentation="Create a State Fragment referencing an existing Function allocated to Target Component/Actor. This tool opens a selection wizard to select an available Function." name="allocated.function" label="%common.es.allocated.function" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']/@borderedNodeMappings[name='InteractionStateFunction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select Function" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.void2Null(self.getFunctionsForState(self.getCoveredFromExecOrIR(container).representedInstance.abstractType))"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedFunction"/>
                  <parameters name="wizardMessage" value="Select a Function"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedFunction != 'WIZARD_CANCELED' and not selectedFunction->isEmpty()">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionState">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedAbstractFunction" valueExpression="aql:selectedFunction"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionStateEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedAbstractFunction" valueExpression="aql:selectedFunction"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(interactionState)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.StateFragment" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedAbstractFunction" valueExpression="aql:selectedFunction"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:interactionState"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:interactionStateEnd"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="startingEndPredecessor"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:StateCreationTool" documentation="Create a State Fragment referencing an existing State/Mode of the Target Component/Actor. This tool opens a selection wizard to select an available State/Mode." name="state.mode" label="%common.es.state.mode" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']/@borderedNodeMappings[name='InteractionStateFunction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select State" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.getCoveredFromExecOrIR(container).representedInstance.getISStateModes()"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedState"/>
                  <parameters name="wizardMessage" value="Select a Mode/State"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedState != 'WIZARD_CANCELED' and not selectedState->isEmpty()">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionState">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedAbstractState" valueExpression="aql:selectedState"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionStateEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedAbstractState" valueExpression="aql:selectedState"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(interactionState)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.StateFragment" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedAbstractState" valueExpression="aql:selectedState"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:interactionState"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:interactionStateEnd"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="startingEndPredecessor"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InteractionUseCreationTool" documentation="Creates a Reference to existing Exchange Scenario covering Target Lifelines representing existing Actor/Component Parts." name="reference" label="%common.es.reference" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUseDF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/InteractionUse.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select Scenario" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:self.eContainerOrSelf(interaction::Scenario)"/>
                  <parameters name="scope" value="aql:self.void2Null(self.eContainerOrSelf(interaction::Scenario).getReferenceScope())"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedScenario"/>
                  <parameters name="wizardMessage" value="Select a Scenario"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedScenario != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionUse" referenceName="ownedTimeLapses" variableName="interactionUse">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="interactionUse"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedScenario" valueExpression="aql:selectedScenario"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
            <coveredLifelines name="coveredLifeLines"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Operand Group">
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with the kind LOOP covering Target Lifelines representing existing Component/Actor Parts." name="loop" label="%common.es.loop" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentDF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentDF']/@subContainerMappings[name='OperandDF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="operand 1"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="combined fragment"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="operator" valueExpression="LOOP"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with the kind ALT covering Target Lifelines representing existing Component/Actor Parts. Operands should be added to the combined Fragment." name="alt" label="%common.es.alt" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentDF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentDF']/@subContainerMappings[name='OperandDF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="operand 1"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="combined fragment"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="operator" valueExpression="ALT"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with the kind PAR covering Target Lifelines representing existing Component/Actor Parts. Operands should be added to the combined Fragment." name="par" label="%common.es.par" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentDF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentDF']/@subContainerMappings[name='OperandDF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="operand 1"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="combined fragment"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="operator" valueExpression="PAR"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with selected kind covering Target Lifelines representing existing Component/Actor Parts. Operands should be added to the combined Fragment." name="other.combined.fragment" label="%common.es.other.combined.fragment" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentDF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentDF']/@subContainerMappings[name='OperandDF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="SelectElementFromListWizard" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="aql:container.eContainerOrSelf(interaction::Scenario)"/>
                    <parameters name="scope" value="aql:self.getOperators()"/>
                    <parameters name="multiple" value="false"/>
                    <parameters name="resultVariable" value="selectedOperator"/>
                    <parameters name="wizardMessage" value="Select an operator for the Combined Fragment."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedOperator != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="end"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="start"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="operand 1"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="combined fragment"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:startFE"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="operator" valueExpression="aql:selectedOperator.toString()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_2:OperandCreationTool" documentation="Creates a new Operand within the target Combined Fragment. " name="operand" label="%common.es.operand" precondition="aql:container.operator != 'LOOP'" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentDF']/@subContainerMappings[name='OperandDF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/InteractionOperand.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="operand"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:container.start.coveredInstanceRoles"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.getFragmentFromContained()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="Direct edit operand" inputLabelExpression="feature:name">
            <mask mask="[{0}]"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="rename instance role DF" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="rename basic message DF" inputLabelExpression="aql:self.sendingEnd.event.operation.name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.sendingEnd.event.operation">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Drop Component" precondition="aql:element->filter(cs::Component)->size() != 0" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:newSemanticContainer">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.isValidScenarioDrop(self.eContainerOrSelf(interaction::Scenario),element)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:element.abstractTypedElements->first()"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:element.name"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Create a new constraint duration between two interaction fragments of the sequence diagram." name="duration" label="%common.es.duration" precondition="aql:(not (preTarget.oclIsKindOf(interaction::SequenceMessage))) or preTarget.receivingEnd != null" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='ConstraintDuration%20DF']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/BracketEdgeStyle.gif" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='endOfLifeDF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']/@borderedNodeMappings[name='InteractionStateFunction'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20DF']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='endOfLifeDF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']/@borderedNodeMappings[name='default%20execution%20DF']/@borderedNodeMappings[name='Execution%20DF']/@borderedNodeMappings[name='InteractionStateFunction'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20DF'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20DF']" connectionStartPrecondition="aql:(not (preSource.oclIsKindOf(interaction::SequenceMessage))) or preSource.receivingEnd != null">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ConstraintDuration" referenceName="ownedConstraintDurations" variableName="duration">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:self.getCorrespondingIFStart(source,target)"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:self.getCorrespondingIFFinish(target,source)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Constraint From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="Set Duration" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="duration" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleReorderTool" name="IRReorder" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20DF']">
            <predecessorBefore name="predecessorBefore"/>
            <predecessorAfter name="predecessorAfter"/>
            <instanceRoleMoved>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.actions.extensions.doIRReorder" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.doIRReorder">
                  <parameters name="PREDECESSOR_BEFORE" value="aql:predecessorBefore"/>
                  <parameters name="PREDECESSOR_AFTER" value="aql:predecessorAfter"/>
                  <parameters name="SCENARIO" value="aql:self.eContainerOrSelf(interaction::Scenario)"/>
                </subModelOperations>
              </firstModelOperations>
            </instanceRoleMoved>
          </ownedTools>
        </toolSections>
        <toolSections name="Common" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu']">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%common.es.constraint" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%common.es.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Scenario_ContrainedElements']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%common.es.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,false)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:SequenceDiagramDescription" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Drop%20Component'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraint%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']" name="Functional Scenario" label="%common.fs" titleExpression="aql:self.name.addScenarioPrefix('[FS]')" domainClass="interaction.Scenario" preconditionExpression="aql:self.isValidFS()" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Scenario_ContrainedElements']" endsOrdering="aql:self.makeIntersection(self.ownedInteractionFragments, eventEnds)" instanceRolesOrdering="feature:ownedInstanceRoles">
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.executions.filter" label="%common.fs.hide.executions.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.pre.post.conditions.filter" label="%common.fs.hide.pre.post.conditions.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='preconditionMappingFS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='postconditionMappingFS']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.filter" label="%common.fs.show.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.parameters.filter" label="%common.fs.show.exchange.items.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.exchange.items.filter" label="%common.fs.show.functional.exchanges.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.parameters.filter" label="%common.fs.show.functional.exchanges.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.exchange.items.parameters.filter" label="%common.fs.show.functional.exchanges.exchange.items.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.context.filter" label="%common.fs.show.exchange.context.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.fe.exchange.context.filter" label="%common.fs.show.fe.exchange.context.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%common.fs.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
      </filters>
      <diagramInitialisation>
        <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="FUNCTIONAL"/>
        </firstModelOperations>
      </diagramInitialisation>
      <defaultLayer name="Default" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Scenario_ContrainedElements'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Scenario_ExchangeContext'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']">
        <nodeMappings xsi:type="description_2:InstanceRoleMapping" name="Instancerole Mapping FS" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20instance%20role%20FS']" semanticCandidatesExpression="feature:ownedInstanceRoles" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole">
          <borderedNodeMappings xsi:type="description_2:ExecutionMapping" name="default execution FS" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole" reusedBorderedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']/@borderedNodeMappings[name='InteractionState%20Mapping%20FS']" startingEndFinderExpression="aql:self" finishingEndFinderExpression="aql:self">
            <borderedNodeMappings xsi:type="description_2:ExecutionMapping" name="Execution FS" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.getExecutionsFromInstanceRoleOrParentExecution()" synchronizationLock="true" domainClass="interaction.Execution" reusedBorderedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish">
              <borderedNodeMappings xsi:type="description_2:StateMapping" name="InteractionState Mapping FS" semanticCandidatesExpression="aql:self.getInteractionStatesOnExecution()" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.StateFragment" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish">
                <deletionDescription href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']"/>
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']" showIcon="false" labelExpression="aql:self.relatedAbstractFunction.name" labelPosition="node" resizeKind="NSEW" width="10" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']">
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                </style>
                <conditionnalStyles predicateExpression="aql:not self.relatedAbstractState->isEmpty() and self.relatedAbstractState->filter(capellacommon::Mode)->size() > 0">
                  <style xsi:type="style:EllipseNodeDescription" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateMode_Border_Gray']" showIcon="false" labelExpression="aql:self.relatedAbstractState.name" labelPosition="node" resizeKind="NSEW" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Mode_Gray']" horizontalDiameterComputationExpression="10" verticalDiameterComputationExpression="3">
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:not self.relatedAbstractState->isEmpty() and self.relatedAbstractState->filter(capellacommon::Mode)->size() = 0">
                  <style xsi:type="style:EllipseNodeDescription" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateMode_Border_Gray']" showIcon="false" labelExpression="aql:self.relatedAbstractState.name" labelPosition="node" resizeKind="NSEW" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_State_Gray']" horizontalDiameterComputationExpression="10" verticalDiameterComputationExpression="3">
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                  </style>
                </conditionnalStyles>
              </borderedNodeMappings>
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']" showIcon="false" labelExpression="" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Label_Green']" resizeKind="NSEW" width="1" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
              <conditionnalStyles predicateExpression="aql:self.covered.representedInstance->filter(fa::AbstractFunction)->first().kind = fa::FunctionKind::FUNCTION">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']" showIcon="false" labelExpression="" hideLabelByDefault="true" resizeKind="NSEW" width="1" height="3" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']">
                  <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                </style>
              </conditionnalStyles>
            </borderedNodeMappings>
            <borderedNodeMappings xsi:type="description_2:EndOfLifeMapping" name="Lifeline deletion mapping FS" preconditionExpression="aql:self.eContainer().ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE).receivingEnd.covered->includes(self)" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20FS']" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:''" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/eol.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <borderedNodeMappings xsi:type="description_2:EndOfLifeMapping" name="endOfLife FS" preconditionExpression="aql:not (self.eContainer().ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE).receivingEnd.covered->includes(self))" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Package%20Dependencies']/@defaultLayer/@toolSections.0/@ownedTools[name='No%20Delete']" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.InstanceRole">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:''" sizeComputationExpression="1" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/handlelifeline.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Lifeline_Gray']" showIcon="false" labelExpression="" sizeComputationExpression="" labelPosition="node" resizeKind="NSEW" width="1" height="40">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </borderedNodeMappings>
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']" labelExpression="aql:self.getInstanceRoleLabel()" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Label_Green']" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.componentFunctionalAllocations.block->filter(cs::Component)->select(c | c.isActor())->size() != 0">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']" labelExpression="aql:self.getInstanceRoleLabel()" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:not (self.representedInstance.isControlNode()) and not (self.representedInstance.isAllLeavesFunctionActorAllocated())">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']" labelExpression="aql:self.getInstanceRoleLabel()" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Label_Green']" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']"/>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.isAllLeavesFunctionActorAllocated()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Border_Blue']" labelExpression="aql:self.getInstanceRoleLabel()" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue_label']" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']"/>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings xsi:type="description_2:InstanceRoleMapping" name="hideSequenceLabel FS" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20FS']" semanticCandidatesExpression="ocl:Set {}" domainClass="EObject"/>
        <nodeMappings xsi:type="description_2:ObservationPointMapping" name="ObservationPoint FS" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20FS']" semanticCandidatesExpression="aql:self.makeUnion(self.ownedConstraintDurations.start, self.ownedConstraintDurations.finish)" semanticElements="service:getAssociatedSemanticElements()" domainClass="InteractionFragment">
          <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="" sizeComputationExpression="1" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/observation.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="preconditionMappingFS" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.preCondition" domainClass="capellacore.Constraint">
          <style xsi:type="style:NoteDescription" showIcon="false" labelExpression="aql:'pre:' + self.getConstraintLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="postconditionMappingFS" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.postCondition" domainClass="capellacore.Constraint">
          <style xsi:type="style:NoteDescription" showIcon="false" labelExpression="aql:'post:' + self.getConstraintLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </nodeMappings>
        <edgeMappings xsi:type="description_2:BasicMessageMapping" name="Basic message mapping FS" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20basic%20message%20FS']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::SYNCHRONOUS_CALL or ownedMessage.kind = interaction::MessageKind::ASYNCHRONOUS_CALL or ownedMessage.kind = interaction::MessageKind::UNSET)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="feature:sendingEnd" receivingEndFinderExpression="feature:receivingEnd">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_2:ReturnMessageMapping" name="return message mapping FS" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::REPLY)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="feature:sendingEnd" receivingEndFinderExpression="feature:receivingEnd" invocationMessageFinderExpression="aql:self.getInvocationMessage()">
          <style lineStyle="dash">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_2:CreationMessageMapping" name="creation message mapping FS" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::CREATE)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="feature:sendingEnd" receivingEndFinderExpression="feature:receivingEnd">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_2:DestructionMessageMapping" name="destruction message mapping FS" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE)" semanticElements="service:getAssociatedSemanticElements()" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Lifeline%20deletion%20mapping%20FS']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="feature:sendingEnd" receivingEndFinderExpression="feature:receivingEnd">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="ConstraintDuration FS" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Set%20Duration']" semanticCandidatesExpression="feature:ownedConstraintDurations" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='ObservationPoint%20FS']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='ObservationPoint%20FS']" targetFinderExpression="feature:finish" sourceFinderExpression="feature:start" domainClass="interaction.ConstraintDuration" useDomainElement="true">
          <style xsi:type="style:BracketEdgeStyleDescription" sourceArrow="InputArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="feature:duration">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings xsi:type="description_2:InteractionUseMapping" name="InteractionUseFS" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.ownedTimeLapses->filter(interaction::InteractionUse)" semanticElements="aql:self.makeUnion(self, self.referencedScenario, self.referencedScenario.eContainerOrSelf(interaction::AbstractCapability))" domainClass="interaction.InteractionUse" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish" coveredLifelinesExpression="aql:self.getCoveredFromAbstractFragment()" centerLabelExpression="aql:self.referencedScenario.name">
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression=" ref" labelAlignment="LEFT" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_CombinedFragment_Gray']">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <labelBorderStyle href="environment:/viewpoint#//@labelBorderStyles/@labelBorderStyleDescriptions.0"/>
          </style>
        </containerMappings>
        <containerMappings xsi:type="description_2:CombinedFragmentMapping" name="CombinedFragmentFS" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" semanticCandidatesExpression="aql:self.ownedTimeLapses->filter(interaction::CombinedFragment)" synchronizationLock="true" domainClass="interaction.CombinedFragment" startingEndFinderExpression="feature:start" finishingEndFinderExpression="feature:finish" coveredLifelinesExpression="aql:self.getCoveredFromAbstractFragment()">
          <subContainerMappings xsi:type="description_2:OperandMapping" name="OperandFS" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']" labelDirectEdit="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Direct%20edit%20operand']" semanticCandidatesExpression="feature:referencedOperands" synchronizationLock="true" domainClass="interaction.InteractionOperand" startingEndFinderExpression="aql:self.getOperandBegin()" finishingEndFinderExpression="aql:self.getOperandEnd()">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.getOperandLabel()" labelAlignment="LEFT" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_CombinedFragment_Gray']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
          </subContainerMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.getOperatorLabel()" labelAlignment="LEFT" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_CombinedFragment_Gray']">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <labelBorderStyle href="environment:/viewpoint#//@labelBorderStyles/@labelBorderStyleDescriptions.0"/>
          </style>
        </containerMappings>
        <toolSections name="tools section" label="Scenarios Elements" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='exchange.context']">
          <ownedTools xsi:type="tool:ToolGroup" name="FunctionCreation">
            <tools xsi:type="tool_2:InstanceRoleCreationTool" documentation=" Creates a new lifeline representing a System Function." name="system.function" label="%common.fs.system.function" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/SystemFunction.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(ctx::SystemAnalysis)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
              </filters>
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.getRootFunction().createFunction()">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="variable" value="component"/>
                    <parameters name="value" value="aql:self"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
            <tools xsi:type="tool_2:InstanceRoleCreationTool" documentation=" Creates a new lifeline representing a System Function." name="logical.function" label="%common.fs.logical.function" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/LogicalFunction.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(la::LogicalArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
              </filters>
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.getRootFunction().createFunction()">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="variable" value="component"/>
                    <parameters name="value" value="aql:self"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
            <tools xsi:type="tool_2:InstanceRoleCreationTool" documentation=" Creates a new lifeline representing a System Function." name="physical.function" label="%common.fs.physical.function" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/PhysicalFunction.gif">
              <filters precondition="aql:self.target.eContainerOrSelf(pa::PhysicalArchitecture)->size() = 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
                <listeners domainClass="interaction.Scenario" featureName="ownedAbstractEnds"/>
              </filters>
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.getRootFunction().createFunction()">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="variable" value="component"/>
                    <parameters name="value" value="aql:self"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
            <tools xsi:type="tool_2:InstanceRoleCreationTool" documentation="Creates a new lifeline representing a Function of kind Duplicate." name="duplicate" label="%common.fs.duplicate" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Duplicate.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.getRootFunction().createDuplicateFunction()">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="variable" value="component"/>
                    <parameters name="value" value="aql:self"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
            <tools xsi:type="tool_2:InstanceRoleCreationTool" documentation="Creates a new lifeline representing a Function of kind Gather." name="gather" label="%common.fs.gather" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Gather.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.getRootFunction().createGatherFunction()">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="variable" value="component"/>
                    <parameters name="value" value="aql:self"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
            <tools xsi:type="tool_2:InstanceRoleCreationTool" documentation="Creates a new lifeline representing a Function of kind Route." name="route" label="%common.fs.route" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Route.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.getRootFunction().createRouteFunction()">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="variable" value="component"/>
                    <parameters name="value" value="aql:self"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
            <tools xsi:type="tool_2:InstanceRoleCreationTool" documentation="Creates a new lifeline representing a Function of kind Select." name="select" label="%common.fs.select" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Select.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.getRootFunction().createSelectFunction()">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="variable" value="component"/>
                    <parameters name="value" value="aql:self"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
            <tools xsi:type="tool_2:InstanceRoleCreationTool" documentation="Creates a new lifeline representing a Function of kind Split." name="split" label="%common.fs.split" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionKind_Split.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.getRootFunction().createSplitFunction()">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="variable" value="component"/>
                    <parameters name="value" value="aql:self"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:component"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:component.name"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" documentation="Insert/Remove Functions. Creates or delete semantic Lifelines representing existing Functions. Removing a Lifeline from a scenario deletes incoming and outgoing sequence messages, but does not delete from model the represented Functions and related Functional Exchanges." name="functions" label="%common.fs.functions" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="Select Function" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.eContainerOrSelf(capellacore::ModellingArchitecture).ownedFunctionPkg.eAllContents()->filter(fa::AbstractFunction)"/>
                  <parameters name="initialSelection" value="aql:containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance"/>
                  <parameters name="wizardMessage" value=""/>
                  <parameters name="resultVariable" value="result"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(result)">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:i != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance->includes(i))">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:i"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:i.name"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(i)"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles">
                  <parameters name="result" value="aql:self.void2Null(result)"/>
                  <parameters name="current" value="aql:containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Sequence Message invoking a  Functional Exchange with a return branch between the Source and Target Lifelines. This tool opens a selection wizard to select an available existing Functional Exchange or to create a new one." name="functional.exchange.with.return.branch" label="%common.fs.functional.exchange.with.return.branch" precondition="aql:self.allowMessageCreation2(preSource, preTarget, false, messageEndBefore, messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS']" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']">
            <sourceVariable name="source">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="exchangeType" value="FEF"/>
                  <parameters name="sourceIR" value="aql:sourceIR"/>
                  <parameters name="targetIR" value="aql:targetIR"/>
                  <parameters name="messageKind" value="SYNCHRONOUS_CALL"/>
                  <parameters name="resultVariable" value="result"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'CANCELED_DIALOG'">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationReply"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationReply"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="SYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="reply">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName() + '_reply'"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="REPLY"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(call)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingReplyEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationReply"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:reply">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingReplyEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingReplyEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(sendingReplyEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(sendingReplyEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationReply"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:reply">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:receivingReplyEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:reply">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingReplyEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingReplyEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:sendingReplyEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                      <parameters name="message" value="aql:call"/>
                      <parameters name="affected" value="aql:self.void2Null(result)"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Sequence Message invoking a  Functional Exchange without return branch between the Source and Target Lifelines. This tool opens a selection wizard to select an available existing Functional Exchange or to create a new one.&#xD;&#xA;" name="functional.exchange" label="%common.fs.functional.exchange" precondition="aql:self.allowMessageCreation2(preSource, preTarget, false, messageEndBefore, messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif">
            <sourceVariable name="source">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="exchangeType" value="FEF"/>
                  <parameters name="sourceIR" value="aql:sourceIR"/>
                  <parameters name="targetIR" value="aql:targetIR"/>
                  <parameters name="messageKind" value="ASYNCHRONOUS_CALL"/>
                  <parameters name="resultVariable" value="result"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:result != 'CANCELED_DIALOG'">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndAfter != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="endExec"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:end"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                      <parameters name="message" value="aql:call"/>
                      <parameters name="affected" value="aql:self.void2Null(result)"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="delete capella elements">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="deleteCapellaElement" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="no delete FS">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ReorderTool" name="reorder" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']/@borderedNodeMappings[name='InteractionState%20Mapping%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentFS']/@subContainerMappings[name='OperandFS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentFS']">
            <startingEndPredecessorAfter name="startingEndPredecessorAfter"/>
            <finishingEndPredecessorAfter name="finishingEndPredecessorAfter"/>
            <onEventMovedOperation>
              <firstModelOperations xsi:type="tool_1:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.actions.extensions.DoReorder" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.DoReorder">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
                <parameters name="context" value="aql:self"/>
                <parameters name="STARTING_END_PREDECESSOR" value="aql:startingEndPredecessorAfter.semanticEnd"/>
                <parameters name="FINISHING_END_PREDECESSOR" value="aql:finishingEndPredecessorAfter.semanticEnd"/>
              </firstModelOperations>
            </onEventMovedOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="rename instance role FS" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InteractionUseCreationTool" documentation="Creates a Reference to existing Function Scenario covering Target Lifelines representing existing Functions." name="reference" label="%common.fs.reference" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUseFS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/InteractionUse.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select Scenario" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:self.eContainerOrSelf(interaction::Scenario)"/>
                  <parameters name="scope" value="aql:self.void2Null(self.eContainerOrSelf(interaction::Scenario).getReferenceScope())"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedScenario"/>
                  <parameters name="wizardMessage" value="Select a Scenario"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedScenario != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionUse" referenceName="ownedTimeLapses" variableName="interactionUse">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="interactionUse"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedScenario" valueExpression="aql:selectedScenario"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
            <coveredLifelines name="coveredLifeLines"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="rename basic message FS" inputLabelExpression="aql:self.sendingEnd.event.operation.name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.sendingEnd.event.operation">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Operand Group">
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with the kind LOOP covering Target Lifelines representing existing Component/Actor Parts." name="loop" label="%common.fs.loop" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentFS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentFS']/@subContainerMappings[name='OperandFS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="operand 1"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="combined fragment"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="operator" valueExpression="LOOP"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with the kind ALT covering Target Lifelines representing existing Component/Actor Parts. Operands should be added to the combined Fragment." name="alt" label="%common.fs.alt" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentFS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentFS']/@subContainerMappings[name='OperandFS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="operand 1"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="combined fragment"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="operator" valueExpression="ALT"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with the kind PAR covering Target Lifelines representing existing Component/Actor Parts. Operands should be added to the combined Fragment." name="par" label="%common.fs.par" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentFS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentFS']/@subContainerMappings[name='OperandFS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="operand 1"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="combined fragment"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="operator" valueExpression="PAR"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with selected kind covering Target Lifelines representing existing Component/Actor Parts. Operands should be added to the combined Fragment." name="other.combined.fragment" label="%common.fs.other.combined.fragment" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentFS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentFS']/@subContainerMappings[name='OperandFS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="SelectElementFromListWizard" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="aql:container.eContainerOrSelf(interaction::Scenario)"/>
                    <parameters name="scope" value="aql:self.getOperators()"/>
                    <parameters name="multiple" value="false"/>
                    <parameters name="resultVariable" value="selectedOperator"/>
                    <parameters name="wizardMessage" value="Select an operator for the Combined Fragment."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedOperator != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="end"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="start"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="operand 1"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="combined fragment"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:startFE"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="operator" valueExpression="aql:selectedOperator.toString()"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_2:OperandCreationTool" documentation="Creates a new Operand within the target Combined Fragment. " name="operand" label="%common.fs.operand" precondition="aql:container.operator != 'LOOP'" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentFS']/@subContainerMappings[name='OperandFS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/InteractionOperand.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="operand"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:container.start.coveredInstanceRoles"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore = null">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:messageEndBefore != null">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.getFragmentFromContained()">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="Direct edit operand" inputLabelExpression="feature:name">
            <mask mask="[{0}]"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="Drop Component" precondition="aql:element->filter(information::AbstractInstance)->size() != 0" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:newSemanticContainer">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.isValidScenarioDrop(self.eContainerOrSelf(interaction::Scenario),element)">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="representedInstance" valueExpression="aql:element"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:element.name"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:StateCreationTool" documentation="Create a State Fragment referencing an existing State/Mode. This tool opens a selection wizard to select an available State/Mode." name="state.mode" label="%common.fs.state.mode" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']/@borderedNodeMappings[name='InteractionState%20Mapping%20FS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select State" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.getCoveredFromExecOrIR(container).representedInstance.getISStateModes()"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedState"/>
                  <parameters name="wizardMessage" value="Select a Mode/State"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedState != 'WIZARD_CANCELED' and not selectedState->isEmpty()">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionState">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedAbstractState" valueExpression="aql:selectedState"/>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionStateEnd">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedAbstractState" valueExpression="aql:selectedState"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.moveEndOnScenario(interactionState)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="interaction.StateFragment" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="relatedAbstractState" valueExpression="aql:selectedState"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:interactionState"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:interactionStateEnd"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="startingEndPredecessor"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Create a new constraint duration between two interaction fragments of the sequence diagram." name="duration" label="%common.fs.duration" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='ConstraintDuration%20FS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/BracketEdgeStyle.gif" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']/@borderedNodeMappings[name='InteractionState%20Mapping%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='endOfLife%20FS']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='endOfLife%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']/@borderedNodeMappings[name='default%20execution%20FS']/@borderedNodeMappings[name='Execution%20FS']/@borderedNodeMappings[name='InteractionState%20Mapping%20FS'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20FS']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ConstraintDuration" referenceName="ownedConstraintDurations" variableName="duration">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="start" valueExpression="aql:self.getCorrespondingIFStart(source,target)"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="finish" valueExpression="aql:self.getCorrespondingIFFinish(target,source)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Constraint From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DirectEditLabel" name="Set Duration" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="duration" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleReorderTool" name="IRReorder" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20FS']">
            <predecessorBefore name="predecessorBefore"/>
            <predecessorAfter name="predecessorAfter"/>
            <instanceRoleMoved>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.actions.extensions.doIRReorder" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.doIRReorder">
                  <parameters name="PREDECESSOR_BEFORE" value="aql:predecessorBefore"/>
                  <parameters name="PREDECESSOR_AFTER" value="aql:predecessorAfter"/>
                  <parameters name="SCENARIO" value="aql:self.eContainerOrSelf(interaction::Scenario)"/>
                </subModelOperations>
              </firstModelOperations>
            </instanceRoleMoved>
          </ownedTools>
        </toolSections>
        <toolSections name="Common" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu']">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%common.fs.constraint" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%common.fs.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Scenario_ContrainedElements']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%common.fs.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,false)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraint%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']" name="Functional Chain Description" label="%common.fcd" titleExpression="aql:'[' + self.getFunctionalChainDiagramPrefix() + '] ' + self.name" domainClass="FunctionalChain" preconditionExpression="aql:not (self.oclIsKindOf(oa::OperationalProcess)) and self.isInLib()" defaultConcern="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@concerns/@ownedConcernDescriptions.0">
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.filter" label="%common.fcd.show.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.parameters.filter" label="%common.fcd.show.exchange.items.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.exchange.items.filter" label="%common.fcd.show.functional.exchanges.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%common.fcd.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.functional.chain.involvement.links.filter" label="%common.fcd.hide.functional.chain.involvement.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.sequencing.information.filter" label="%common.fcd.hide.sequencing.information.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink_InvolvementLink']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.computed.sequencing.information.filter" label="%common.fcd.hide.computed.sequencing.information.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" viewConditionExpression="aql:not ((self.target.oclIsKindOf(fa::ControlNode)) and (self.controlNodeLinkedToCollapsedFCR()))"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.association.links.filter" label="%common.fcd.hide.association.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink_InvolvementLink']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="merge.associated.functional.exchange.involvements.and.sequence.links.without.control.node.filter" label="%common.fcd.merge.associated.functional.exchange.involvements.and.sequence.links.without.control.node.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']" viewConditionExpression="aql:not(self.isFEWithAssociatedSL())"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']" semanticConditionExpression="aql:self.isDiagramTitleBlock()"/>
      </filters>
      <concerns>
        <ownedConcernDescriptions name="hideLinksByDefault" filters="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@filters[name='hide.association.links.filter']"/>
      </concerns>
      <layout xsi:type="description_1:CompositeLayout" direction="LeftToRight"/>
      <defaultLayer name="Default" reusedMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']">
        <nodeMappings name="FC_AbstractFunction" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20FE%20Involvement']" semanticCandidatesExpression="aql:self.ownedFunctionalChainInvolvements->filter(fa::FunctionalChainInvolvementFunction)" semanticElements="aql:self.makeUnion(self, self.involved)" synchronizationLock="true" domainClass="FunctionalChainInvolvementFunction">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']" labelExpression="aql:self.involved.name" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Green']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="false">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.involved.name" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xBD_ControlNode']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="false">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.involved.name" resizeKind="NSEW" width="1" height="7">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.involved.isDuplicateFunction()">
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:view.computeFunctionLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionKind_Duplicate.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_green']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.involved.isGatherFunction()">
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:view.computeFunctionLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionKind_Gather.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_green']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.involved.isRouteFunction()">
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:view.computeFunctionLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionKind_Route.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_green']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.involved.isSplitFunction()">
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:view.computeFunctionLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionKind_Split.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_green']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.involved.isSelectFunction()">
            <style xsi:type="style:WorkspaceImageDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:view.computeFunctionLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/FunctionKind_Select.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_green']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.involved.oclIsKindOf(oa::OperationalActivity)">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']" labelExpression="aql:self.involved.name" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange']">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.involved.isAllocatedInActor()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Component_Border_Blue']" labelExpression="aql:self.involved.name" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Actor_Blue']">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings name="FC_FunctionalChain" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20FE%20Involvement']" semanticCandidatesExpression="aql:self.ownedFunctionalChainInvolvements->select(inv | inv.involved->filter(fa::FunctionalChain)->size() > 0)" createElements="false" semanticElements="aql:self.makeUnion(self, self.involved)" domainClass="FunctionalChainReference">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']" labelExpression="aql:self.involved.name" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_FCinFCD_Green']">
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.involved.oclIsKindOf(oa::OperationalProcess)">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" borderColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']" labelExpression="aql:self.involved.name" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW" width="10" height="5" color="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange']">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings name="FC_ControlNode" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20FE%20Involvement']" semanticCandidatesExpression="aql:self.ownedSequenceNodes" synchronizationLock="true" domainClass="ControlNode">
          <conditionnalStyles predicateExpression="aql:self.kind == fa::ControlNodeKind::AND">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/ControlNode_And.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.kind == fa::ControlNodeKind::OR">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/ControlNode_Or.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.kind == fa::ControlNodeKind::ITERATE">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/ControlNode_Iterate.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="FC_Exchange" preconditionExpression="service:canCreateFCILEdge(sourceView, source, targetView, target)" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20FE%20Involvement']" semanticCandidatesExpression="service:getAllFunctionalChainInvolvementLinks()" semanticElements="aql:self.makeUnion(self, self.involved)" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_AbstractFunction'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@containerMappings[name='FC_FunctionalChainReference']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_AbstractFunction'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@containerMappings[name='FC_FunctionalChainReference']" targetFinderExpression="aql:self.makeUnion(self.target, self.targetReferenceHierarchy)" sourceFinderExpression="aql:self.makeUnion(self.source, self.sourceReferenceHierarchy)" domainClass="FunctionalChainInvolvementLink" useDomainElement="true">
          <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']" routingStyle="manhattan">
            <centerLabelStyleDescription labelExpression="aql:self.getFCInvolvmentLinkLabel(diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:not (self.involved.isInOperationalAnalysis()) and self.source.isSameFunctionInvolved(self.target)">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Function_Border_Green']" lineStyle="dot" targetArrow="NoDecoration" sizeComputationExpression="2" routingStyle="manhattan">
              <centerLabelStyleDescription labelExpression="aql:self.getFCInvolvmentLinkLabel(diagram)">
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </centerLabelStyleDescription>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.involved.isInOperationalAnalysis() and not self.source.isSameFunctionInvolved(self.target)">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']" routingStyle="manhattan">
              <centerLabelStyleDescription labelExpression="aql:self.getFCInvolvmentLinkLabel(diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.involved.isInOperationalAnalysis() and self.source.isSameFunctionInvolved(self.target)">
            <style strokeColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']" lineStyle="dash" targetArrow="NoDecoration" routingStyle="manhattan">
              <centerLabelStyleDescription labelExpression="aql:self.getFCInvolvmentLinkLabel(diagram)" labelColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
            </style>
          </conditionnalStyles>
        </edgeMappings>
        <edgeMappings name="FC_SequenceLink_InvolvementLink" preconditionExpression="aql:sourceView.canCreateLinksEdge(targetView)" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']" targetFinderExpression="service:self.getLinksEdgeTargets()">
          <style lineStyle="dot" targetArrow="NoDecoration" sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
          </style>
        </edgeMappings>
        <edgeMappings name="FC_SequenceLink" preconditionExpression="service:canCreateFCILEdge(sourceView, source, targetView, target)" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20FE%20Involvement']" semanticCandidatesExpression="service:getAllSequenceLinks()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_AbstractFunction'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@containerMappings[name='FC_FunctionalChainReference']" targetMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_AbstractFunction'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@containerMappings[name='FC_FunctionalChainReference']" targetFinderExpression="aql:self.makeUnion(self.target, self.targetReferenceHierarchy)" sourceFinderExpression="aql:self.makeUnion(self.source, self.sourceReferenceHierarchy)" domainClass="SequenceLink" useDomainElement="true">
          <style lineStyle="dash" routingStyle="manhattan">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="service:getSequenceLinkLabel(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="FC_FunctionalChainReference" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20FE%20Involvement']" semanticCandidatesExpression="aql:self.ownedFunctionalChainInvolvements->select(inv | inv.oclIsKindOf(fa::FunctionalChainReference))" semanticElements="aql:self.makeUnion(self, self.involved)" synchronizationLock="true" domainClass="FunctionalChainReference" childrenPresentation="VerticalStack">
          <subContainerMappings name="FC_FunctionalChainStacked" deletionDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20FE%20Involvement']" semanticCandidatesExpression="aql:self.involved" synchronizationLock="true" domainClass="FunctionalChain" reusedNodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_AbstractFunction'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" reusedContainerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@containerMappings[name='FC_FunctionalChainReference']">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_FCD']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_FCD']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
            <conditionnalStyles predicateExpression="aql:self.oclIsKindOf(oa::OperationalProcess)">
              <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelSize="12" showIcon="false" labelExpression="" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Operational_Process_Reference_Orange']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Operational_Process_Reference_Orange']">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
          </subContainerMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:view.getFunctionalChainReferenceLabel()" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_FCD']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_FCD']">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.involved.oclIsKindOf(oa::OperationalProcess)">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:view.getFunctionalChainReferenceLabel()" backgroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Operational_Process_Reference_Orange']" foregroundColor="//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Operational_Process_Reference_Orange']">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </containerMappings>
        <toolSections name="Involvements">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Creates a new Involvement Function referencing the selected Function." name="involve.function" label="%common.fcd.involve.function" precondition="aql:containerView.isValidFCInvolveFunction()" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_AbstractFunction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementFunction.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select Function" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:container.computeFCIFunctionScope()"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="selectedFunctions"/>
                  <parameters name="wizardMessage" value="aql:'Select a Function to involve in ' + container.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedFunctions != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:selectedFunctions" iteratorName="selectedFunction">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FunctionalChainInvolvementFunction" referenceName="ownedFunctionalChainInvolvements" variableName="function">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="involved" valueExpression="aql:selectedFunction"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a new Involvement Link referencing a Functional Exchange." name="involve.exchange" label="%common.fcd.involve.exchange" precondition="aql:preSource.isValidFCILinkExchange(preTarget)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementLink_ToExchange.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select Value" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:source"/>
                  <parameters name="scope" value="aql:source.computeFCILinkScope(target)"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedValue"/>
                  <parameters name="wizardMessage" value="Select a value to involve."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedValue != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceView.computeContainerFunctionalChain(targetView)">
                    <subModelOperations xsi:type="tool_1:Let" variableName="commonFC" valueExpression="aql:self"/>
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FunctionalChainInvolvementLink" referenceName="ownedFunctionalChainInvolvements" variableName="involvementLink">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:source"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="aql:target"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="involved" valueExpression="aql:selectedValue"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sourceView.computeFCReferenceHierarchy(commonFC)"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:targetView.computeFCReferenceHierarchy(commonFC)"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates a new Involvement Link referencing a Functional Exchange, between the existing Involvement Function and a new Involvement Function." name="involve.exchange.and.function" label="%common.fcd.involve.exchange.and.function" precondition="aql:container.isValidFCIFunctionalExchangeAndFunction()" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementLink_AndFunction.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectExchanges" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:element.involved"/>
                  <parameters name="scope" value="aql:elementView.computeFCIFunctionalExchangeAndFunctionScope()"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="selectedExchanges"/>
                  <parameters name="wizardMessage" value="aql:'Select Functional Exchanges to involve from ' + element.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedExchanges != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedExchanges)" iteratorName="exchange">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.eContainer()">
                      <subModelOperations xsi:type="tool_1:Switch">
                        <cases conditionExpression="aql:element.involved.isFunctionSourceOfExchange(exchange)">
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FunctionalChainInvolvementFunction" referenceName="ownedFunctionalChainInvolvements" variableName="newFunction">
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="involved" valueExpression="aql:exchange.getOutgoingAbstractFunction()"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FunctionalChainInvolvementLink" referenceName="ownedFunctionalChainInvolvements" variableName="involvementLink">
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:element"/>
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="aql:newFunction"/>
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="involved" valueExpression="aql:exchange"/>
                          </subModelOperations>
                        </cases>
                        <default>
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FunctionalChainInvolvementFunction" referenceName="ownedFunctionalChainInvolvements" variableName="newFunction">
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="involved" valueExpression="aql:exchange.getIncomingAbstractFunction()"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FunctionalChainInvolvementLink" referenceName="ownedFunctionalChainInvolvements" variableName="involvementLink">
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:newFunction"/>
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="aql:element"/>
                            <subModelOperations xsi:type="tool_1:SetValue" featureName="involved" valueExpression="aql:exchange"/>
                          </subModelOperations>
                        </default>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" documentation="Creates a new Involvement referencing a Functional Chain." name="involve.functional.chain" label="%common.fcd.involve.functional.chain" precondition="aql:containerView.isValidFCIFunctionalChain()" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@containerMappings[name='FC_FunctionalChainReference']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainReference.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select functional Chain" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:containerView.computeFCIFunctionalChainScope()"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="selectedChains"/>
                  <parameters name="wizardMessage" value="aql:'Select a Functional Chain to involve in ' + container.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedChains != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:selectedChains" iteratorName="selectedChain">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FunctionalChainReference" referenceName="ownedFunctionalChainInvolvements">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="involved" valueExpression="aql:selectedChain"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Creates a new Involvement Link between two Involvements referencing the same Function." name="connect.functions" label="%common.fcd.connect.functions" precondition="aql:preSource.isValidFCILinkFunction(preSourceView, preTarget, preTargetView)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementLink_ToFunction.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceView.computeContainerFunctionalChain(targetView)">
                <subModelOperations xsi:type="tool_1:Let" variableName="commonFC" valueExpression="aql:self"/>
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FunctionalChainInvolvementLink" referenceName="ownedFunctionalChainInvolvements" variableName="involvementLink">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:source"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="aql:target"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="involved" valueExpression="aql:source.involved"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sourceView.computeFCReferenceHierarchy(commonFC)"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:targetView.computeFCReferenceHierarchy(commonFC)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:DiagramCreationDescription" name="Functional Chain Description" precondition="aql:self.isInLib()" titleExpression="aql:'[' + self.getFunctionalChainDiagramPrefix() + '] ' + self.name" diagramDescription="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool:DeleteElementDescription" name="Delete FE Involvement" precondition="service:checkDeleteConditionFCD()">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="CapellaDeleteExternalAction" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerDropDescription" name="D&amp;D Constraint From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Sequencing">
          <ownedTools xsi:type="tool:ToolGroup" documentation="Create a new Control Node." name="Create_ControlNode" label="Control Node">
            <tools xsi:type="tool_1:ToolDescription" documentation="Create a new AND Control Node." name="and" label="%common.fcd.and" precondition="aql:container.oclIsKindOf(fa::FunctionalChain) or container.oclIsKindOf(fa::FunctionalChainReference) or container.oclIsKindOf(fa::SequenceLink) or container.oclIsKindOf(fa::SequenceLinkEnd)" forceRefresh="true" iconPath="/org.polarsys.capella.core.data.res.edit/icons/full/obj16/ControlNode_And.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                  <subModelOperations xsi:type="tool_1:Switch">
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChain)">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLinkEnd)">
                      <subModelOperations xsi:type="tool_1:Let" variableName="sequenceLinkEnd" valueExpression="var:self"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sequenceLinkEnd.eContainer()">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="controlNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(sequenceLinkEnd.eContainer())">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 100, 0)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sequenceLinkEnd"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:controlNode"/>
                        </subModelOperations>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLink)">
                      <subModelOperations xsi:type="tool_1:Let" variableName="sequenceLink" valueExpression="var:self"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sequenceLink.eContainer()">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="newControlNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(sequenceLink.eContainer())">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="newSequenceLink">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:sequenceLink.source"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:newControlNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sequenceLink.sourceReferenceHierarchy"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:sequenceLink">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:newControlNode"/>
                        <subModelOperations xsi:type="tool_1:Unset" featureName="sourceReferenceHierarchy" elementExpression="aql:self.sourceReferenceHierarchy"/>
                      </subModelOperations>
                    </cases>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ToolDescription" documentation="Create a new OR Control Node." name="or" label="%common.fcd.or" precondition="aql:container.oclIsKindOf(fa::FunctionalChain) or container.oclIsKindOf(fa::FunctionalChainReference) or container.oclIsKindOf(fa::SequenceLink) or container.oclIsKindOf(fa::SequenceLinkEnd)" forceRefresh="true" iconPath="/org.polarsys.capella.core.data.res.edit/icons/full/obj16/ControlNode_Or.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                  <subModelOperations xsi:type="tool_1:Switch">
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChain)">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLinkEnd)">
                      <subModelOperations xsi:type="tool_1:Let" variableName="sequenceLinkEnd" valueExpression="var:self"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sequenceLinkEnd.eContainer()">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="controlNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(sequenceLinkEnd.eContainer())">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 100, 0)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sequenceLinkEnd"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:controlNode"/>
                        </subModelOperations>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLink)">
                      <subModelOperations xsi:type="tool_1:Let" variableName="sequenceLink" valueExpression="var:self"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sequenceLink.eContainer()">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="newControlNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(sequenceLink.eContainer())">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="newSequenceLink">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:sequenceLink.source"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:newControlNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sequenceLink.sourceReferenceHierarchy"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:sequenceLink">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:newControlNode"/>
                        <subModelOperations xsi:type="tool_1:Unset" featureName="sourceReferenceHierarchy" elementExpression="aql:self.sourceReferenceHierarchy"/>
                      </subModelOperations>
                    </cases>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ToolDescription" documentation="Create a new ITERATE Control Node." name="it" label="%common.fcd.it" precondition="aql:container.oclIsKindOf(fa::FunctionalChain) or container.oclIsKindOf(fa::FunctionalChainReference) or container.oclIsKindOf(fa::SequenceLink) or container.oclIsKindOf(fa::SequenceLinkEnd)" forceRefresh="true" iconPath="/org.polarsys.capella.core.data.res.edit/icons/full/obj16/ControlNode_Iterate.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:self">
                  <subModelOperations xsi:type="tool_1:Switch">
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChain)">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLinkEnd)">
                      <subModelOperations xsi:type="tool_1:Let" variableName="sequenceLinkEnd" valueExpression="var:self"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sequenceLinkEnd.eContainer()">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="controlNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(sequenceLinkEnd.eContainer())">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 100, 0)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sequenceLinkEnd"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:controlNode"/>
                        </subModelOperations>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLink)">
                      <subModelOperations xsi:type="tool_1:Let" variableName="sequenceLink" valueExpression="var:self"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sequenceLink.eContainer()">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="newControlNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(sequenceLink.eContainer())">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="newSequenceLink">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:sequenceLink.source"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:newControlNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sequenceLink.sourceReferenceHierarchy"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:sequenceLink">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:newControlNode"/>
                        <subModelOperations xsi:type="tool_1:Unset" featureName="sourceReferenceHierarchy" elementExpression="aql:self.sourceReferenceHierarchy"/>
                      </subModelOperations>
                    </cases>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" documentation="Create a new Control Node." name="Create_ControlNodeConstruct" label="Control Node Construct">
            <tools xsi:type="tool_1:ToolDescription" documentation="Create a new AND Control Node." name="and.construct" label="%common.fcd.and.construct" precondition="aql:container.oclIsKindOf(fa::FunctionalChain) or container.oclIsKindOf(fa::FunctionalChainReference) or container.oclIsKindOf(fa::SequenceLink) or container.oclIsKindOf(fa::SequenceLinkEnd)" forceRefresh="true" iconPath="/org.polarsys.capella.core.data.res.edit/icons/full/obj16/ControlNode_And.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                  <subModelOperations xsi:type="tool_1:Switch">
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChain)">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:targetNode"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:targetNode"/>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLinkEnd)">
                      <subModelOperations xsi:type="tool_1:Let" variableName="commonFC" valueExpression="aql:self.eContainer()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:commonFC">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 100, 0)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 200, 0)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="incomingSequenceLink">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:element"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        </subModelOperations>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLink)">
                      <subModelOperations xsi:type="tool_1:Let" variableName="commonFC" valueExpression="aql:self.eContainer()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:commonFC">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView, -50, 0)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView, 50, 0)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="outgoingSequenceLink">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:targetNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="aql:element.target"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:element.targetReferenceHierarchy"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool_1:Unset" featureName="targetReferenceHierarchy" elementExpression="aql:self.targetReferenceHierarchy"/>
                      </subModelOperations>
                    </cases>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ToolDescription" documentation="Create a new AND Control Node." name="or.construct" label="%common.fcd.or.construct" precondition="aql:container.oclIsKindOf(fa::FunctionalChain) or container.oclIsKindOf(fa::FunctionalChainReference) or container.oclIsKindOf(fa::SequenceLink) or container.oclIsKindOf(fa::SequenceLinkEnd)" forceRefresh="true" iconPath="/org.polarsys.capella.core.data.res.edit/icons/full/obj16/ControlNode_Or.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                  <subModelOperations xsi:type="tool_1:Switch">
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChain)">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:targetNode"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:targetNode"/>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLinkEnd)">
                      <subModelOperations xsi:type="tool_1:Let" variableName="commonFC" valueExpression="aql:self.eContainer()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:commonFC">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 100, 0)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 200, 0)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="incomingSequenceLink">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:element"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        </subModelOperations>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLink)">
                      <subModelOperations xsi:type="tool_1:Let" variableName="commonFC" valueExpression="aql:self.eContainer()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:commonFC">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView, -50, 0)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView, 50, 0)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="outgoingSequenceLink">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:targetNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="aql:element.target"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:element.targetReferenceHierarchy"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool_1:Unset" featureName="targetReferenceHierarchy" elementExpression="aql:self.targetReferenceHierarchy"/>
                      </subModelOperations>
                    </cases>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ToolDescription" documentation="Create a new AND Control Node." name="it.construct" label="%common.fcd.it.construct" precondition="aql:container.oclIsKindOf(fa::FunctionalChain) or container.oclIsKindOf(fa::FunctionalChainReference) or container.oclIsKindOf(fa::SequenceLink) or container.oclIsKindOf(fa::SequenceLinkEnd)" forceRefresh="true" iconPath="/org.polarsys.capella.core.data.res.edit/icons/full/obj16/ControlNode_Iterate.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                  <subModelOperations xsi:type="tool_1:Switch">
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChain)">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:targetNode"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:targetNode"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLinkEnd)">
                      <subModelOperations xsi:type="tool_1:Let" variableName="commonFC" valueExpression="aql:self.eContainer()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:commonFC">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:elementView.eContainer()">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 100, 0)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:elementView.eContainer()">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 200, 0)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:targetNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="incomingSequenceLink">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:element"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        </subModelOperations>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLink)">
                      <subModelOperations xsi:type="tool_1:Let" variableName="commonFC" valueExpression="aql:self.eContainer()"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:commonFC">
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView, -50, 0)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                          <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView, 50, 0)"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:targetNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="outgoingSequenceLink">
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:targetNode"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="aql:element.target"/>
                          <subModelOperations xsi:type="tool_1:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:element.targetReferenceHierarchy"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool_1:Unset" featureName="targetReferenceHierarchy" elementExpression="aql:self.targetReferenceHierarchy"/>
                      </subModelOperations>
                    </cases>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Create a new Sequence Link." name="sequence.link" label="%common.fcd.sequence.link" precondition="aql:preSource.isValidSequenceLink(preTarget)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceView.computeContainerFunctionalChain(targetView)">
                <subModelOperations xsi:type="tool_1:Let" variableName="commonFC" valueExpression="aql:self"/>
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:source"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:target"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sourceView.computeFCReferenceHierarchy(commonFC)"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:targetView.computeFCReferenceHierarchy(commonFC)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Insert a new Involvement Function referencing the selected Function between two Sequence Links." name="involve.function.on.sequence.link" label="%common.fcd.involve.function.on.sequence.link" precondition="aql:containerView.isValidFCInvolveFunction() and container.oclIsKindOf(fa::SequenceLink)" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementFunction.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool_1:Let" variableName="selectedSequenceLink" valueExpression="var:self"/>
                <subModelOperations xsi:type="tool_1:Let" variableName="functionalChain" valueExpression="aql:self.eContainer()"/>
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select Function" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:functionalChain"/>
                  <parameters name="scope" value="aql:functionalChain.computeFCIFunctionScope()"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="selectedFunctions"/>
                  <parameters name="wizardMessage" value="aql:'Select a Function to involve in ' + functionalChain.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedFunctions != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:selectedFunctions" iteratorName="selectedFunction">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:functionalChain">
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FunctionalChainInvolvementFunction" referenceName="ownedFunctionalChainInvolvements" variableName="function">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="involved" valueExpression="aql:selectedFunction"/>
                        <subModelOperations xsi:type="tool:CreateView" mapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_AbstractFunction']" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(functionalChain)">
                          <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView)"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="newSequenceLink">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:function"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="aql:selectedSequenceLink.target"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:selectedSequenceLink.targetReferenceHierarchy"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:selectedSequenceLink">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:function"/>
                      <subModelOperations xsi:type="tool_1:Unset" featureName="targetReferenceHierarchy" elementExpression="aql:self.targetReferenceHierarchy"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Advanced Tools">
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Creates a new Involvement Link referencing a Functional Exchange with a linked Sequence Link." name="involve.exchange.with.sequence.link" label="%common.fcd.involve.exchange.with.sequence.link" precondition="aql:preSource.isValidFCILinkExchange(preTarget)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementLink_ToExchange.gif">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="select Value" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="aql:source"/>
                    <parameters name="scope" value="aql:source.computeFCILinkScope(target)"/>
                    <parameters name="multiple" value="false"/>
                    <parameters name="resultVariable" value="selectedValue"/>
                    <parameters name="wizardMessage" value="Select a value to involve."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:selectedValue != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:sourceView.computeContainerFunctionalChain(targetView)">
                      <subModelOperations xsi:type="tool_1:Let" variableName="commonFC" valueExpression="aql:self"/>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="FunctionalChainInvolvementLink" referenceName="ownedFunctionalChainInvolvements" variableName="involvementLink">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="aql:source"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="aql:target"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="involved" valueExpression="aql:selectedValue"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sourceView.computeFCReferenceHierarchy(commonFC)"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:targetView.computeFCReferenceHierarchy(commonFC)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:source"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:target"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sourceView.computeFCReferenceHierarchy(commonFC)"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:targetView.computeFCReferenceHierarchy(commonFC)"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="links" valueExpression="var:involvementLink"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:EdgeCreationDescription" documentation="Associate a Sequence Link with a Involvement Link referencing a Functional Exchange" name="associate.sequence.link.with.exchange" label="%common.fcd.associate.sequence.link.with.exchange" precondition="aql:preSource.isValidLinks(preTarget)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink_InvolvementLink']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementLink_ToExchange.gif" extraSourceMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']" extraTargetMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink']">
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:source">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(fa::SequenceLink)">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="links" valueExpression="aql:target"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChainInvolvementLink)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="links" valueExpression="aql:source"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup">
            <tools xsi:type="tool_1:ToolDescription" documentation="Create a new Involvement Link referencing a Functional Exchange and associate it with the selected Sequence Link" name="involve.exchange.from.sequence.link" label="%common.fcd.involve.exchange.from.sequence.link" precondition="aql:container.oclIsKindOf(fa::SequenceLink)" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementLink_ToExchange.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                  <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectOrCreateFunctionalExchangeFromSequenceLink" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectOrCreateFunctionalExchangeWizard">
                    <parameters name="context" value="aql:self"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ToolDescription" documentation="Create a new Sequence Link and associate it with the selected Involvement Link" name="sequence.link.from.exchange" label="%common.fcd.sequence.link.from.exchange" precondition="aql:container.oclIsKindOf(fa::FunctionalChainInvolvementLink) and not container.involved.oclIsKindOf(fa::AbstractFunction)" forceRefresh="true" iconPath="/org.polarsys.capella.core.data.res.edit/icons/full/obj16/SequenceLink.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.accelerateOnFCILEdge()"/>
              </initialOperation>
            </tools>
          </ownedTools>
        </toolSections>
        <toolSections name="Common" reusedTools="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']">
          <ownedTools xsi:type="tool:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%common.fcd.constraint" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool_1:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%common.fcd.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool_1:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%common.fcd.constraints" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool_1:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool_1:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool_1:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool_1:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_3:CrossTableDescription" name="State And Mode - Matrix" label="State Machine and Capability Function Matrix" preconditionExpression="aql:self->filter(capellacore::ModellingBlock)->size() > 0 or self->filter(capellacore::ModellingArchitecture)->size() > 0" domainClass="capellacore.Namespace">
      <ownedLineMappings name="SAM Components" domainClass="Component" semanticCandidatesExpression="aql:self.getFirstComponents()" headerLabelExpression="feature:name">
        <ownedSubLines name="SAM Sub Components" reusedSubLines="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='SAM%20Components']/@ownedSubLines[name='SAM%20State%20Machine'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='SAM%20Components']/@ownedSubLines[name='SAM%20Sub%20Components']" reusedInMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='SAM%20Components']/@ownedSubLines[name='SAM%20Sub%20Components']" domainClass="Component" semanticCandidatesExpression="aql:self.getSubComponentsWithStateMachine()" headerLabelExpression="feature:name">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <ownedSubLines name="SAM State Machine" reusedInMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='SAM%20Components']/@ownedSubLines[name='SAM%20Sub%20Components']" domainClass="StateMachine" semanticCandidatesExpression="feature:ownedStateMachines" headerLabelExpression="feature:name">
          <ownedSubLines name="SAM Sub States And Modes 1" domainClass="IState" semanticCandidatesExpression="aql:self.ownedRegions.ownedStates" headerLabelExpression="feature:name">
            <ownedSubLines name="SAM Sub State and Mode" domainClass="IState" semanticCandidatesExpression="aql:self.ownedRegions.ownedStates" headerLabelExpression="feature:name">
              <delete name="No delete" precondition="false">
                <variables name="element" documentation="The currently edited element."/>
                <variables name="root" documentation="The semantic element corresponding to the current table."/>
              </delete>
            </ownedSubLines>
            <delete name="No delete" precondition="false">
              <variables name="element" documentation="The currently edited element."/>
              <variables name="root" documentation="The semantic element corresponding to the current table."/>
            </delete>
          </ownedSubLines>
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedColumnMappings name="SAM FunctionalChains column" headerLabelExpression="feature:name" domainClass="FunctionalChain" semanticCandidatesExpression="aql:self.getAllFunctionalChains()">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedColumnMappings>
      <ownedColumnMappings name="SAM Functions column" headerLabelExpression="feature:name" domainClass="AbstractFunction" semanticCandidatesExpression="aql:self.getAbstractFunctionForStateModeMatrix()">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedColumnMappings>
      <ownedColumnMappings name="SAM Capability Column" domainClass="AbstractCapability" semanticCandidatesExpression="aql:self.getCapabilitiesForStateMatrix()">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedColumnMappings>
      <intersection name="SAM FunctionalChains Active in State" lineMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='SAM%20Components']/@ownedSubLines[name='SAM%20State%20Machine']/@ownedSubLines[name='SAM%20Sub%20States%20And%20Modes%201'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='SAM%20Components']/@ownedSubLines[name='SAM%20State%20Machine']/@ownedSubLines[name='SAM%20Sub%20States%20And%20Modes%201']/@ownedSubLines[name='SAM%20Sub%20State%20and%20Mode']" columnMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='State%20And%20Mode%20-%20Matrix']/@ownedColumnMappings.0" labelExpression="aql:columnSemantic.displayCharX(lineSemantic)" columnFinderExpression="aql:self.getAllFunctionalChainsActiveInStates(self)">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column (only available for Intersection Mapping)."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic">
            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:arg0 = '' and columnSemantic.availableInStates->includes(lineSemantic)">
              <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:columnSemantic.inActiveAnElement(lineSemantic)"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="SAM Active in States" forceRefresh="true">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic">
            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:arg0 = 'X'">
              <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:columnSemantic.activeAnElement(lineSemantic)"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
      <intersection name="SAM Functions Active in State" lineMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='SAM%20Components']/@ownedSubLines[name='SAM%20State%20Machine']/@ownedSubLines[name='SAM%20Sub%20States%20And%20Modes%201'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='SAM%20Components']/@ownedSubLines[name='SAM%20State%20Machine']/@ownedSubLines[name='SAM%20Sub%20States%20And%20Modes%201']/@ownedSubLines[name='SAM%20Sub%20State%20and%20Mode']" columnMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='State%20And%20Mode%20-%20Matrix']/@ownedColumnMappings.1" labelExpression="aql:columnSemantic.displayCharX(lineSemantic)" columnFinderExpression="aql:self.getAllFunctionsActiveInStates(self)">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column (only available for Intersection Mapping)."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic">
            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:arg0 = '' and columnSemantic.availableInStates->includes(lineSemantic)">
              <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:columnSemantic.inActiveAnElement(lineSemantic)"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="SAM Active in States" forceRefresh="true">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic">
            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:arg0 = 'X'">
              <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:columnSemantic.activeAnElement(lineSemantic)"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
      <intersection name="SAM Capabilities Active in State" lineMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='SAM%20Components']/@ownedSubLines[name='SAM%20State%20Machine']/@ownedSubLines[name='SAM%20Sub%20States%20And%20Modes%201'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='SAM%20Components']/@ownedSubLines[name='SAM%20State%20Machine']/@ownedSubLines[name='SAM%20Sub%20States%20And%20Modes%201']/@ownedSubLines[name='SAM%20Sub%20State%20and%20Mode']" columnMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='State%20And%20Mode%20-%20Matrix']/@ownedColumnMappings.2" labelExpression="aql:columnSemantic.displayCharX(lineSemantic)" columnFinderExpression="aql:self.getCapabilityFromStateAndMode(self)">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column (only available for Intersection Mapping)."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic">
            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:lineSemantic.oclIsKindOf(fa::FunctionalChain) or lineSemantic.oclIsKindOf(interaction::AbstractCapability)">
              <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:arg0 = '' and lineSemantic.availableInStates->includes(columnSemantic)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic.inActiveAnElement(columnSemantic)"/>
              </subModelOperations>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="SAM Active in States" forceRefresh="true">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic">
            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:arg0 = 'X'">
              <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:columnSemantic.activeAnElement(lineSemantic)"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_3:CrossTableDescription" name="Contextual State And Mode - Matrix" label="Capability Function and State Machine Matrix" domainClass="StateMachine">
      <ownedLineMappings name="CSAM Root Function" reusedSubLines="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20Function']/@ownedSubLines[name='CSAM%20Sub%20Functions']/@ownedSubLines[name='CSAM%20function%20package']" domainClass="AbstractFunction" semanticCandidatesExpression="aql:self.ownedRegions.getRootFunction()" headerLabelExpression="feature:name">
        <ownedSubLines name="CSAM Sub Functions" reusedSubLines="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20Function']/@ownedSubLines[name='CSAM%20Sub%20FunctionalChains%201'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20Function']/@ownedSubLines[name='CSAM%20Sub%20Functions']" reusedInMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20Function']/@ownedSubLines[name='CSAM%20Sub%20Functions']/@ownedSubLines[name='CSAM%20function%20package'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20Function']/@ownedSubLines[name='CSAM%20Sub%20Functions']" domainClass="AbstractFunction" semanticCandidatesExpression="feature:eContents" headerLabelExpression="feature:name">
          <ownedSubLines name="CSAM function package" reusedSubLines="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20Function']/@ownedSubLines[name='CSAM%20Sub%20Functions'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20Function']/@ownedSubLines[name='CSAM%20Sub%20Functions']/@ownedSubLines[name='CSAM%20function%20package']" reusedInMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20Function'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20Function']/@ownedSubLines[name='CSAM%20Sub%20Functions']/@ownedSubLines[name='CSAM%20function%20package']" domainClass="FunctionPkg" semanticCandidatesExpression="feature:eContents" headerLabelExpression="feature:name"/>
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <ownedSubLines name="CSAM Sub FunctionalChains 1" reusedInMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20Function']/@ownedSubLines[name='CSAM%20Sub%20Functions']" domainClass="FunctionalChain" semanticCandidatesExpression="feature:eContents" headerLabelExpression="feature:name">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedLineMappings name="CSAM Root AbstractCapPkg" domainClass="AbstractCapabilityPkg" semanticCandidatesExpression="aql:self.ownedRegions.getFirstAbstractCapPkg()" headerLabelExpression="feature:name">
        <ownedSubLines name="CSAM Sub AbstractCapPkg" reusedSubLines="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20AbstractCapPkg']/@ownedSubLines[name='CSAM%20Sub%20AbstractCap'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20AbstractCapPkg']/@ownedSubLines[name='CSAM%20Sub%20AbstractCapPkg']" reusedInMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20AbstractCapPkg']/@ownedSubLines[name='CSAM%20Sub%20AbstractCapPkg']" domainClass="AbstractCapabilityPkg" semanticCandidatesExpression="feature:eContents" headerLabelExpression="feature:name">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <ownedSubLines name="CSAM Sub AbstractCap" reusedInMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20AbstractCapPkg']/@ownedSubLines[name='CSAM%20Sub%20AbstractCapPkg']" domainClass="AbstractCapability" semanticCandidatesExpression="feature:eContents" headerLabelExpression="feature:name">
          <ownedSubLines name="CSAM Sub FunctionalChains 2" domainClass="FunctionalChain" semanticCandidatesExpression="feature:eContents" headerLabelExpression="feature:name">
            <delete name="No delete" precondition="false">
              <variables name="element" documentation="The currently edited element."/>
              <variables name="root" documentation="The semantic element corresponding to the current table."/>
            </delete>
          </ownedSubLines>
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedColumnMappings name="CSAM State and Mode" headerLabelExpression="feature:name" domainClass="State" semanticCandidatesExpression="aql:self.ownedRegions.getInvolvedStatesRecursively()">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedColumnMappings>
      <intersection name="CSAM Capabilities Active in State" lineMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20AbstractCapPkg']/@ownedSubLines[name='CSAM%20Sub%20AbstractCap']" columnMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedColumnMappings.0" labelExpression="aql:lineSemantic.displayCharX(columnSemantic)" columnFinderExpression="aql:self.getAvailableStateAndMode()">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column (only available for Intersection Mapping)."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic">
            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:lineSemantic.oclIsKindOf(fa::FunctionalChain) or lineSemantic.oclIsKindOf(interaction::AbstractCapability)">
              <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:arg0 = '' and lineSemantic.availableInStates->includes(columnSemantic)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic.inActiveAnElement(columnSemantic)"/>
              </subModelOperations>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="SAM Active in States" forceRefresh="true">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic">
            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:arg0 = 'X'">
              <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic.activeAnElement(columnSemantic)"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
      <intersection name="CSAM FunctionalChains Active in State" lineMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20Function']/@ownedSubLines[name='CSAM%20Sub%20FunctionalChains%201'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20AbstractCapPkg']/@ownedSubLines[name='CSAM%20Sub%20AbstractCap']/@ownedSubLines[name='CSAM%20Sub%20FunctionalChains%202']" columnMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedColumnMappings.0" labelExpression="aql:lineSemantic.displayCharX(columnSemantic)" columnFinderExpression="aql:self.getAvailableStateAndMode()">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column (only available for Intersection Mapping)."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic">
            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:lineSemantic.oclIsKindOf(fa::FunctionalChain) or lineSemantic.oclIsKindOf(interaction::AbstractCapability)">
              <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:arg0 = '' and lineSemantic.availableInStates->includes(columnSemantic)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic.inActiveAnElement(columnSemantic)"/>
              </subModelOperations>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="SAM Active in States" forceRefresh="true">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic">
            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:arg0 = 'X'">
              <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic.activeAnElement(columnSemantic)"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
      <intersection name="CSAM Functions Active in State" lineMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20Function']/@ownedSubLines[name='CSAM%20Sub%20Functions'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedLineMappings[name='CSAM%20Root%20Function']" columnMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20State%20And%20Mode%20-%20Matrix']/@ownedColumnMappings.0" labelExpression="aql:lineSemantic.displayCharX(columnSemantic)" columnFinderExpression="aql:self.getAvailableStateAndMode()">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column (only available for Intersection Mapping)."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic">
            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:lineSemantic.oclIsKindOf(fa::FunctionalChain) or lineSemantic.oclIsKindOf(interaction::AbstractCapability)">
              <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:arg0 = '' and lineSemantic.availableInStates->includes(columnSemantic)">
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic.inActiveAnElement(columnSemantic)"/>
              </subModelOperations>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="SAM Active in States" forceRefresh="true">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic">
            <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:arg0 = 'X'">
              <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:lineSemantic.activeAnElement(columnSemantic)"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_3:CrossTableDescription" name="Modes and States Reference Matrix" domainClass="StateMachine">
      <ownedLineMappings name="States and Modes" reusedSubLines="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20and%20States%20Reference%20Matrix']/@ownedLineMappings[name='States%20and%20Modes']" reusedInMappings="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20and%20States%20Reference%20Matrix']/@ownedLineMappings[name='States%20and%20Modes']" domainClass="IState" semanticCandidatesExpression="aql:self.ownedRegions.ownedStates"/>
      <ownedColumnMappings name="Represented states and modes" domainClass="IState" semanticCandidatesExpression="aql:self.getAllReferencedStatesInSM()"/>
      <intersection name="involded on" lineMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20and%20States%20Reference%20Matrix']/@ownedLineMappings[name='States%20and%20Modes']" columnMapping="//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Modes%20and%20States%20Reference%20Matrix']/@ownedColumnMappings.0" labelExpression="aql:lineSemantic.displayCharX(columnSemantic)" columnFinderExpression="aql:self.getStateReferenced()"/>
    </ownedRepresentations>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sequencediag.ScenarioService"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sequencediag.InteractionAspectService"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sequencediag.ScenarioContraintsService"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.CapellaServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.StateMachineServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.ModeStateMachineServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.LogicalServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.InformationServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.ComBdhHelperServiceWrapper"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.FunctionalChainServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.DFScenarioServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.FaServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.SequenceDiagramServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.CsServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.DragAndDropServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.DiagramServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.IBServices"/>
    <ownedJavaExtensions qualifiedClassName="org.eclipse.sirius.common.tools.api.interpreter.StandardServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.data.information.util.PropertyNamingHelper"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.TitleBlockServices"/>
  </ownedViewpoints>
  <userColorsPalettes name="Migration Palette">
    <entries xsi:type="description:UserFixedColor" red="150" green="177" blue="218" name="_CAP_Component_Blue"/>
    <entries xsi:type="description:UserFixedColor" red="195" green="230" blue="255" name="_CAP_Component_Blue_min"/>
    <entries xsi:type="description:UserFixedColor" red="74" green="74" blue="151" name="_CAP_Component_Border_Blue"/>
    <entries xsi:type="description:UserFixedColor" red="0" green="0" blue="0" name="_CAP_Component_Label_Blue"/>
    <entries xsi:type="description:UserFixedColor" red="197" green="255" blue="166" name="_CAP_xDFB_Function_Green"/>
    <entries xsi:type="description:UserFixedColor" red="77" green="137" blue="20" name="_CAP_xDFB_Function_Border_Green"/>
    <entries xsi:type="description:UserFixedColor" red="244" green="255" blue="224" name="_CAP_xDFB_Function_Green_min"/>
    <entries xsi:type="description:UserFixedColor" red="0" green="0" blue="0" name="_CAP_xDFB_Function_Green_Label"/>
    <entries xsi:type="description:UserFixedColor" red="9" green="92" blue="46" name="_CAP_xAB_Function_Border_Green"/>
    <entries xsi:type="description:UserFixedColor" red="9" green="92" blue="46" name="_CAP_xAB_Function_Label_Green"/>
    <entries xsi:type="description:UserFixedColor" red="223" green="223" blue="223" name="_CAP_xBD_ControlNode"/>
    <entries xsi:type="description:UserFixedColor" red="198" green="230" blue="255" name="_CAP_Actor_Blue"/>
    <entries xsi:type="description:UserFixedColor" red="218" green="253" blue="255" name="_CAP_Actor_Blue_min"/>
    <entries xsi:type="description:UserFixedColor" red="74" green="74" blue="151" name="_CAP_Actor_Border_Blue"/>
    <entries xsi:type="description:UserFixedColor" red="0" green="0" blue="0" name="_CAP_Actor_Blue_label"/>
    <entries xsi:type="description:UserFixedColor" red="255" green="252" blue="183" name="_CAP_Node_Yellow"/>
    <entries xsi:type="description:UserFixedColor" red="255" green="255" blue="220" name="_CAP_Node_Yellow_min"/>
    <entries xsi:type="description:UserFixedColor" red="123" green="105" blue="79" name="_CAP_Node_Yellow_Border"/>
    <entries xsi:type="description:UserFixedColor" red="0" green="0" blue="0" name="_CAP_Node_Yellow_Label"/>
    <entries xsi:type="description:UserFixedColor" red="255" green="244" blue="119" name="_CAP_PhysicalPort_Yellow"/>
    <entries xsi:type="description:UserFixedColor" red="197" green="255" blue="166" name="_CAP_xAB_Function_Green"/>
    <entries xsi:type="description:UserFixedColor" red="240" green="221" blue="221" name="_CAP_Interface_Pink"/>
    <entries xsi:type="description:UserFixedColor" red="232" green="224" blue="210" name="_CAP_Class_Brown"/>
    <entries xsi:type="description:UserFixedColor" red="0" green="0" blue="0" name="_CAP_Association_Color"/>
    <entries xsi:type="description:UserFixedColor" red="232" green="224" blue="210" name="_CAP_Datatype_LightBrown"/>
    <entries xsi:type="description:UserFixedColor" red="103" green="103" blue="103" name="_CAP_Datatype_Border_Gray"/>
    <entries xsi:type="description:UserFixedColor" red="225" green="223" blue="215" name="_CAP_Datatype_Gray"/>
    <entries xsi:type="description:UserFixedColor" red="123" green="105" blue="79" name="_CAP_Class_Border_Brown"/>
    <entries xsi:type="description:UserFixedColor" red="254" green="253" blue="250" name="_CAP_Value_LightBrown"/>
    <entries xsi:type="description:UserFixedColor" red="228" green="228" blue="228" name="_CAP_State_Gray"/>
    <entries xsi:type="description:UserFixedColor" red="165" green="182" blue="180" name="_CAP_Mode_Gray"/>
    <entries xsi:type="description:UserFixedColor" red="0" green="0" blue="0" name="_CAP_StateTransition_Color"/>
    <entries xsi:type="description:UserFixedColor" red="117" green="117" blue="117" name="_CAP_StateMode_Border_Gray"/>
    <entries xsi:type="description:UserFixedColor" red="168" green="168" blue="168" name="_CAP_ChoicePseudoState_Color"/>
    <entries xsi:type="description:UserFixedColor" red="0" green="0" blue="0" name="_CAP_ChoicePseudoState_Border_Gray"/>
    <entries xsi:type="description:UserFixedColor" red="247" green="218" blue="116" name="_CAP_Activity_Orange"/>
    <entries xsi:type="description:UserFixedColor" red="255" green="255" blue="197" name="_CAP_Activity_Orange_min"/>
    <entries xsi:type="description:UserFixedColor" red="91" green="64" blue="64" name="_CAP_Activity_Border_Orange"/>
    <entries xsi:type="description:UserFixedColor" red="91" green="64" blue="64" name="_CAP_xAB_Activity_Label_Orange"/>
    <entries xsi:type="description:UserFixedColor" red="0" green="0" blue="0" name="_CAP_xDF_Activity_Label_Orange"/>
    <entries xsi:type="description:UserFixedColor" red="250" green="239" blue="203" name="_CAP_Operational_Process_Reference_Orange"/>
    <entries xsi:type="description:UserFixedColor" red="221" green="221" blue="200" name="_CAP_Entity_Gray"/>
    <entries xsi:type="description:UserFixedColor" red="249" green="248" blue="245" name="_CAP_Entity_Gray_min"/>
    <entries xsi:type="description:UserFixedColor" red="69" green="69" blue="69" name="_CAP_Entity_Gray_border"/>
    <entries xsi:type="description:UserFixedColor" red="0" green="0" blue="0" name="_CAP_Entity_Gray_label"/>
    <entries xsi:type="description:UserFixedColor" red="124" green="61" blue="61" name="_CAP_Interface_Border_Reddish"/>
    <entries xsi:type="description:UserFixedColor" red="250" green="250" blue="250" name="_CAP_InterfaceDataPackage_LightGray"/>
    <entries xsi:type="description:UserFixedColor" red="246" green="235" blue="235" name="_CAP_ExchangeItem_Pinkkish"/>
    <entries xsi:type="description:UserFixedColor" red="214" green="197" blue="171" name="_CAP_Unit_LightBrown"/>
    <entries xsi:type="description:UserFixedColor" red="203" green="174" blue="200" name="_CAP_OperationalRole_Purple"/>
    <entries xsi:type="description:UserFixedColor" red="242" green="242" blue="242" name="_CAP_CombinedFragment_Gray"/>
    <entries xsi:type="description:UserFixedColor" red="242" green="238" blue="225" name="_CAP_ConfigurationItem_Gray"/>
    <entries xsi:type="description:UserFixedColor" red="249" green="248" blue="245" name="_CAP_ConfigurationItem_Gray_min"/>
    <entries xsi:type="description:UserFixedColor" red="148" green="199" blue="97" name="_CAP_FCinFCD_Green"/>
    <entries xsi:type="description:UserFixedColor" red="208" green="208" blue="208" name="_CAP_MSM_State_Gray"/>
    <entries xsi:type="description:UserFixedColor" red="239" green="239" blue="239" name="_CAP_MSM_State_Gray_min"/>
    <entries xsi:type="description:UserFixedColor" red="195" green="208" blue="208" name="_CAP_MSM_Mode_Gray"/>
    <entries xsi:type="description:UserFixedColor" red="234" green="239" blue="239" name="_CAP_MSM_Mode_Gray_min"/>
    <entries xsi:type="description:UserFixedColor" red="128" green="128" blue="128" name="_CAP_Lifeline_Gray"/>
    <entries xsi:type="description:UserFixedColor" red="233" green="243" blue="222" name="_CAP_FCD"/>
    <entries xsi:type="description:UserFixedColor" red="205" green="205" blue="205" name="_CAP_Unset_Gray"/>
    <entries xsi:type="description:UserFixedColor" red="234" green="234" blue="234" name="_CAP_Unset_Gray_min"/>
    <entries xsi:type="description:UserFixedColor" red="128" green="128" blue="128" name="_CAP_Unset_Gray_Border"/>
    <entries xsi:type="description:UserFixedColor" red="0" green="0" blue="0" name="_CAP_Unset_Gray_Label"/>
    <entries xsi:type="description:UserFixedColor" red="230" green="230" blue="230" name="_CAP_TitleBlock_Gray"/>
  </userColorsPalettes>
</description:Group>
