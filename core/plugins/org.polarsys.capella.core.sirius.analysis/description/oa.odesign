<?xml version="1.0" encoding="ASCII"?>
<description:Group xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:description="http://www.eclipse.org/sirius/description/1.1.0" xmlns:description_1="http://www.eclipse.org/sirius/table/description/1.1.0" xmlns:description_2="http://www.eclipse.org/sirius/diagram/description/1.1.0" xmlns:description_3="http://www.eclipse.org/sirius/diagram/sequence/description/2.0.0" xmlns:filter="http://www.eclipse.org/sirius/diagram/description/filter/1.1.0" xmlns:style="http://www.eclipse.org/sirius/diagram/description/style/1.1.0" xmlns:tool="http://www.eclipse.org/sirius/description/tool/1.1.0" xmlns:tool_1="http://www.eclipse.org/sirius/diagram/description/tool/1.1.0" xmlns:tool_2="http://www.eclipse.org/sirius/diagram/sequence/description/tool/2.0.0" version="12.0.0.2017041100">
  <ownedViewpoints name="Operational Analysis" label="%oa" modelFileExtension="melodymodeller">
    <ownedRepresentations xsi:type="description_1:CrossTableDescription" name="Operational Activities - Requirements" domainClass="OperationalAnalysis">
      <ownedLineMappings name="Operational Activity" domainClass="OperationalActivity" semanticCandidatesExpression="aql:self.getTableRootAbstractFunctions()" headerLabelExpression="feature:name">
        <ownedSubLines name="Sub Operational Activity" reusedSubLines="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']/@ownedLineMappings[name='Operational%20Activity']/@ownedSubLines[name='Sub%20Operational%20Activity%20Pkg'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']/@ownedLineMappings[name='Operational%20Activity']/@ownedSubLines[name='Sub%20Operational%20Activity']" reusedInMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']/@ownedLineMappings[name='Operational%20Activity']/@ownedSubLines[name='Sub%20Operational%20Activity'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']/@ownedLineMappings[name='FunctionPkgs'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']/@ownedLineMappings[name='Operational%20Activity']/@ownedSubLines[name='Sub%20Operational%20Activity%20Pkg']" domainClass="OperationalActivity" semanticCandidatesExpression="aql:self.getOwnedAbstractFunctions()" headerLabelExpression="feature:name">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <ownedSubLines name="Sub Operational Activity Pkg" reusedSubLines="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']/@ownedLineMappings[name='Operational%20Activity']/@ownedSubLines[name='Sub%20Operational%20Activity'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']/@ownedLineMappings[name='Operational%20Activity']/@ownedSubLines[name='Sub%20Operational%20Activity%20Pkg']" reusedInMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']/@ownedLineMappings[name='Operational%20Activity']/@ownedSubLines[name='Sub%20Operational%20Activity'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']/@ownedLineMappings[name='Operational%20Activity']/@ownedSubLines[name='Sub%20Operational%20Activity%20Pkg'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']/@ownedLineMappings[name='FunctionPkgs']" domainClass="FunctionPkg" semanticCandidatesExpression="aql:self.getOwnedAbstractFunctionPkgs()" headerLabelExpression="feature:name">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedLineMappings name="FunctionPkgs" reusedSubLines="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']/@ownedLineMappings[name='Operational%20Activity']/@ownedSubLines[name='Sub%20Operational%20Activity'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']/@ownedLineMappings[name='Operational%20Activity']/@ownedSubLines[name='Sub%20Operational%20Activity%20Pkg']" domainClass="FunctionPkg" semanticCandidatesExpression="aql:self.getTableRootAbstractFunctionPkgs()">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedColumnMappings name="Requirements 3" headerLabelExpression="aql:self.getRequirementElementLabel()" domainClass="Requirement">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedColumnMappings>
      <intersection name="Trace 3" canEdit="true" lineMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']/@ownedLineMappings[name='Operational%20Activity'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']/@ownedLineMappings[name='Operational%20Activity']/@ownedSubLines[name='Sub%20Operational%20Activity']" columnMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activities%20-%20Requirements']/@ownedColumnMappings.0" labelExpression="X" useDomainClass="true" columnFinderExpression="feature:targetElement" lineFinderExpression="feature:sourceElement" domainClass="RequirementsTrace">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool:If" conditionExpression="aql:arg0 = '' and lineSemantic.ownedTraces->filter(requirement::RequirementsTrace)->select(x | x.targetElement = columnSemantic and x.sourceElement = lineSemantic)->size() > 0">
            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:lineSemantic.ownedTraces->filter(requirement::RequirementsTrace)->select(x | x.targetElement = columnSemantic and x.sourceElement = lineSemantic)->first()">
              <subModelOperations xsi:type="tool:RemoveElement"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="TR3" forceRefresh="true">
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="aql:lineSemantic">
            <subModelOperations xsi:type="tool:If" conditionExpression="aql:arg0 = 'X'">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="RequirementsTrace" referenceName="ownedTraces">
                <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="aql:lineSemantic"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="aql:columnSemantic"/>
              </subModelOperations>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="Operational Entity Breakdown" label="%oa.oebd" titleExpression="aql:'[OEBD] ' + self.name" domainClass="Namespace" preconditionExpression="aql:self.oclIsKindOf(oa::Entity) or self.oclIsKindOf(oa::EntityPkg)">
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraints%20From%20Project%20Explorer']"/>
      <dropDescriptions href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/ContextArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/EPBSArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaModeller.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/OperationalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/PhysicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/SharedModel.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%oa.oebd.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:self.isDiagramTitleBlock()">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <layout xsi:type="description_2:OrderedTreeLayout" childrenExpression="aql:self.ownedPartitions.abstractType" nodeMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@nodeMappings[name='OEB_OperationalEntities']"/>
      <defaultLayer name="default layer">
        <nodeMappings name="OEB_OperationalEntities" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Rename%20OEB']" semanticCandidatesExpression="service:getOEBScopeBreakdown()" semanticElements="" domainClass="Component">
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Entity%20Breakdown']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Entity%20Blank']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Role%20Blank']"/>
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']"/>
            <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']"/>
            <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.isActor() and self.human = true">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/Actor.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self = container">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="containedIn Mapping" label="OEB_Link" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20containment']" semanticCandidatesExpression="aql:self.eAllContents()" semanticElements="aql:self.eContainerOrSelf(oa::OperationalAnalysis).eAllContents()->filter(cs::Part)->select(x | x.abstractType = self)" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@nodeMappings[name='OEB_OperationalEntities']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@nodeMappings[name='OEB_OperationalEntities']" targetFinderExpression="service:getLogicalParent()" sourceFinderExpression="feature:type" domainClass="cs.Part" reconnections="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='changeContainer']">
          <style routingStyle="tree" foldingStyle="TARGET">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']"/>
        <toolSections name="Entities">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Operational Entity in the target Entity" name="operational.entity" label="%oa.oebd.operational.entity" precondition="aql:containerView.isValidCreationCBComponent()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@nodeMappings[name='OEB_OperationalEntities']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Entity.gif" extraMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@nodeMappings[name='OEB_OperationalEntities']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.createComponent()">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self"/>
                  <parameters name="containerViewExpression" value="aql:containerView.getDiagramContainer()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Operational Actor in the target Entity" name="operational.actor" label="%oa.oebd.operational.actor" precondition="aql:containerView.isValidCreationCBActor()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@nodeMappings[name='OEB_OperationalEntities']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/OperationalActor.gif" extraMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@nodeMappings[name='OEB_OperationalEntities']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.createActor()">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self"/>
                  <parameters name="containerViewExpression" value="aql:containerView.getDiagramContainer()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Sets the target Operational Entity as the new container of the source Operational Entity" name="contained.in" label="%oa.oebd.contained.in" precondition="aql:preSource.isValidDndCBComponent(preTargetView)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@edgeMappings[name='containedIn%20Mapping']" iconPath="/org.polarsys.capella.core.sirius.analysis/description/images/containedIn.png">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source.dndCBComponent(source.eContainer(),target)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="changeContainer" precondition="aql:not (target.isActor()) and element.isValidDndCBComponent(targetView)" forceRefresh="true">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element.dndCBComponent(source,target)"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="delete containment" forceRefresh="true">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.sourceNode.target.dndCBComponent(elementView.sourceNode.target.eContainer(),containerView.target)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="capellaElement" forceRefresh="true">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CapellaDeleteExternalAction" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="Rename OEB" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Constraints From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" dragSource="PROJECT_EXPLORER">
            <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%oa.oebd.constraint" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%oa.oebd.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%oa.oebd.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV']"/>
          <reusedTools xsi:type="tool_1:ContainerDropDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
          <reusedTools xsi:type="tool:PopupMenu" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu']"/>
          <reusedTools xsi:type="tool:ToolDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']"/>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="Operational Activity Interaction Blank" label="%oa.oaib" titleExpression="aql:'[OAIB] ' + self.name" domainClass="AbstractFunctionalChainContainer" preconditionExpression="aql:self.oclIsKindOf(oa::OperationalActivity) or self.oclIsKindOf(oa::OperationalCapability)">
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20DF%20AbstractFunction']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20OperationalActivity%20From%20Project%20Explorer']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraints%20From%20Project%20Explorer']"/>
      <dropDescriptions href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/ContextArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/EPBSArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaModeller.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/OperationalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/PhysicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/SharedModel.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.interactions.filter" label="%oa.oaib.hide.interactions.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@edgeMappings[name='OAIB%20Interaction']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.filter" label="%oa.oaib.show.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" semanticConditionExpression="">
          <mappings xsi:type="description_2:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Data%20Flow%20Blank']/@defaultLayer/@nodeMappings[name='SDFB_Dummy']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.parameters.filter" label="%oa.oaib.show.exchange.items.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.exchange.items.filter" label="%oa.oaib.show.functional.exchanges.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.parameters.filter" label="%oa.oaib.show.functional.exchanges.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.exchange.items.parameters.filter" label="%oa.oaib.show.functional.exchanges.exchange.items.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.interactions.names.filter" label="%oa.oaib.hide.interactions.names.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='CA%20Dummy']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%oa.oaib.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:self.isDiagramTitleBlock()">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <defaultLayer name="default layer">
        <nodeMappings name="OAIB_OperationalProcessEnd" detailDescriptions="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Process%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Process%20Description']" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="" createElements="false" semanticElements="" domainClass="OperationalProcess">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getFunctionalChainLabel(diagram)" sizeComputationExpression="1" resizeKind="NSEW" width="2" height="2">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="OAIB_Dummy" semanticCandidatesExpression="ocl:Set {}" domainClass="EObject"/>
        <edgeMappings name="OAIB Interaction" preconditionExpression="aql:self.getInteractionSourceInDiagram(diagram) != self.getInteractionTargetInDiagram(diagram)" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="service:diagram.getDFFunctionalExchangeSemanticCandidates" semanticElements="var:self" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@containerMappings[name='OAIB%20Operational%20Activity']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@containerMappings[name='OAIB%20Operational%20Activity']" targetFinderExpression="service:getInteractionTargetInDiagram(diagram)" sourceFinderExpression="service:getInteractionSourceInDiagram(diagram)" domainClass="FunctionalExchange" useDomainElement="true" reconnections="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='OAIB%20Reconnect%20Exchanges']">
          <style>
            <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
            <centerLabelStyleDescription labelExpression="aql:self.getFunctionalExchangeLabel(diagram)">
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="OAIB Operational Activity" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="" createElements="false" semanticElements="" domainClass="OperationalActivity" dropDescriptions="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20DF%20AbstractFunction'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20OperationalActivity%20From%20Project%20Explorer']" reusedContainerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@containerMappings[name='OAIB%20Operational%20Activity']">
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Activity%20Breakdown']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Activity%20Interaction%20Blank']"/>
          <style xsi:type="style:FlatContainerStyleDescription" arcWidth="18" arcHeight="18" borderSizeComputationExpression="1" labelExpression="aql:view.computeFunctionLabel()" roundedCorner="true" backgroundStyle="GradientTopToBottom">
            <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
            <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xDF_Activity_Label_Orange']"/>
            <backgroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange_min']"/>
            <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange']"/>
          </style>
        </containerMappings>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']"/>
        <toolSections name="Activities">
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Operational Activity " name="function" label="%oa.oaib.function" precondition="aql:containerView.isValidCreationDFFunction()" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@containerMappings[name='OAIB%20Operational%20Activity']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getDFTarget()">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.isFunction()">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createFunction()">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.allocateToCapability(containerView)"/>
                    <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="scope" value="aql:self"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a new Interaction between the source and target Operational Activities" name="functional.exchange" label="%oa.oaib.functional.exchange" precondition="aql:self.isValidCreationFunctionalExchange(preSource,preTarget)" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@edgeMappings[name='OAIB%20Interaction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalExchange_OA.gif" connectionStartPrecondition="aql:self.isValidCreationFunctionalExchange(preSource)">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source.createDFFunctionalExchange(sourceView,targetView)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert/Remove Operational Activities. Create or delete graphical objects corresponding to already existing Operational Activities. Removing an Operational Activity graphical object from the diagram does not delete the Operational Activity from the model. This tool does not modify the semantic model." name="functions" label="%oa.oaib.functions" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="visibleFunctions" computationExpression="aql:self.void2Null(elementView.getDisplayedAbstractFunctions())"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="visibleFunctionViews" computationExpression="aql:self.void2Null(elementView.getDisplayedAbstractFunctionViews())"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectFunctions" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(elementView.getAvailableAbstractFunctionsToInsertInDataFlowBlank())"/>
                  <parameters name="resultVariable" value="selectedFunctions"/>
                  <parameters name="wizardMessage" value="aql:'Select Functions and ControlNodes to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:visibleFunctions"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedFunctions = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="ShowHideFunctions" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.ShowHideFunctions">
                    <parameters name="view" value="aql:elementView"/>
                    <parameters name="selected functions" value="aql:self.void2Null(selectedFunctions)"/>
                    <parameters name="visible functions" value="aql:visibleFunctions"/>
                    <parameters name="visible function views" value="aql:visibleFunctionViews"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert/Remove Interactions. Create or delete graphical objects corresponding to already existing Interactions and the corresponding source/target Operational Activities if they are not present on the diagram yet. Removing an Interaction graphical object from the diagram does not delete the Interaction from the model. This tool does not modify the semantic model." name="functional.exchanges" label="%oa.oaib.functional.exchanges" precondition="aql:(elementView.target->filter(fa::AbstractFunction)->size() > 0) and (elementView->filter(diagram::DDiagram)->size() = 0)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="displayedExchanges" computationExpression="aql:self.void2Null(elementView.getDisplayedFunctionalExchanges())"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="scope" computationExpression="aql:self.getAvailableFunctionalExchangesToInsert()"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectExchanges" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:element"/>
                  <parameters name="scope" value="aql:scope"/>
                  <parameters name="initialSelection" value="aql:displayedExchanges"/>
                  <parameters name="resultVariable" value="selectedExchanges"/>
                  <parameters name="wizardMessage" value="aql:'Select Functional Exchanges to show in ' + element.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedExchanges != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.showDFFunctionalExchange(scope,selectedExchanges)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Insert/Remove Operational Processes. Create or delete graphical objects corresponding to already existing Operational Processes. Removing an Operational Process graphical object from the diagram does not delete the Operational Process from the model. This tool does not modify the semantic model." name="functional.chains" label="%oa.oaib.functional.chains" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@nodeMappings[name='OAIB_OperationalProcessEnd']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool:AcceleoVariable" name="ownedElements" computationExpression="aql:containerView.getSetOfDiagramElements()"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="initialSelection" computationExpression="aql:self.void2Null(containerView.getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.visible and getNodesAndNodeListElement.target->filter(fa::FunctionalChain)->size() > 0).target)"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="aql:containerView.getDiagramContainer()"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectFunctionalChains" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.getFunctionalChainsToInsert(containerView,container.getAllFunctionalChain())"/>
                  <parameters name="initialSelection" value="aql:initialSelection"/>
                  <parameters name="resultVariable" value="selectedFunctionalChains"/>
                  <parameters name="wizardMessage" value="aql:'Select Operartional Processes to show  in ' + container.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedFunctionalChains = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:initialSelection">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedFunctionalChains->includes(i))">
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:diagram.target.oclIsKindOf(interaction::AbstractCapability)">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:diagram.target.removeFunctionalChainAbstractCapabilityInvolvement(i)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(self.makeDiff(selectedFunctionalChains, initialSelection))">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:diagram.target.oclIsKindOf(interaction::AbstractCapability)">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:diagram.target.createFunctionalChainAbstractCapabilityInvolvement(i)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i">
                      <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@nodeMappings[name='OAIB_OperationalProcessEnd']" containerViewExpression="aql:containerView"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="capellaElement">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CapellaDeleteExternalAction" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="DnD DF AbstractFunction" precondition="aql:element.isValidDndDFBAbstractFunction(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@containerMappings[name='OAIB%20Operational%20Activity']" moveEdges="true">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element.dndDFAbstractFunction(oldSemanticContainer,newSemanticContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D OperationalActivity From Project Explorer" precondition="aql:element.oclIsKindOf(oa::OperationalActivity) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@containerMappings[name='OAIB%20Operational%20Activity']" dragSource="PROJECT_EXPLORER" moveEdges="true">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (newContainerView.getDiagramContainer().target.oclIsKindOf(fa::AbstractFunction))">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:newContainerView.getDiagramContainer().target">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="AbstractFunctionAbstractCapabilityInvolvement" referenceName="ownedAbstractFunctionAbstractCapabilityInvolvements" variableName="involvement">
                      <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="aql:self.void2Null(element)"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Constraints From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" dragSource="PROJECT_EXPLORER">
            <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="OAIB Reconnect Exchanges" precondition="aql:element.isFunctionalExchangeReconnectable(sourceView.getDiagramContainer(),source,target)" reconnectionKind="RECONNECT_BOTH">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element.reconnectFunctionalExchange(source,target)"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="name" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:PopupMenu" name="operational.process.menu" label="%oa.oaib.operational.process.menu">
            <menuItemDescription xsi:type="tool:OperationAction" name="operational.process" label="%oa.oaib.operational.process" precondition="aql:self.isValidFunctionalChainSelection(views)" forceRefresh="true">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createFunctionalChain(views)">
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChain)">
                    <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@nodeMappings[name='OAIB_OperationalProcessEnd']" containerViewExpression="aql:views->first().getDiagramContainer()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
          </ownedTools>
        </toolSections>
        <toolSections name="Accelerators">
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert all the Activities available in a given Mode / State. This tool does not modify the semantic model." name="activities.from.mode.state" label="%oa.oaib.activities.from.mode.state" precondition="aql:elementView.isValidDFInsertStateModes()" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Mode.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectStates" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:self.void2Null(element)"/>
                  <parameters name="scope" value="aql:elementView.getDFInsertStateModesScope()"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="elements"/>
                  <parameters name="wizardMessage" value="Select States/Modes to display all its available functions."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (elements = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.showDFStateModes(elements)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert all the Activities and Interactions contributing to a given Scenario. This tool does not modify the semantic model." name="elements.from.scenario" label="%oa.oaib.elements.from.scenario" precondition="aql:elementView.isValidDFInsertScenarios()" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Scenario.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectElements" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:self.void2Null(element)"/>
                  <parameters name="scope" value="aql:elementView.getDFInsertScenariosScope()"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="elements"/>
                  <parameters name="wizardMessage" value="Select Scenarios to display all involved elements."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (elements = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.showDFScenarios(elements)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Insert all the Operational Activities and Interactions contributing to a given Operational Process." name="operational.process.elements" label="%oa.oaib.operational.process.elements" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@containerMappings[name='OAIB%20Operational%20Activity']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChain.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool:AcceleoVariable" name="scope" computationExpression="aql:container.getAllFunctionalChain()"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="aql:containerView.getDiagramContainer()"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectFunctions" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:scope"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="selectedFunctionalChains"/>
                  <parameters name="wizardMessage" value="aql:'Select Operational Processes to display all involved elements  in ' + container.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedFunctionalChains = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="showHideRelatedElements" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.ShowHideRelatedElements">
                    <parameters name="view" value="aql:containerView"/>
                    <parameters name="chains" value="aql:selectedFunctionalChains"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:diagram.target.oclIsKindOf(interaction::AbstractCapability)">
                    <subModelOperations xsi:type="tool:For" expression="aql:selectedFunctionalChains">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:diagram.target.createFunctionalChainAbstractCapabilityInvolvement(i)"/>
                      <subModelOperations xsi:type="tool:For" expression="aql:i.getOwnedFunctionalChainInvolvements.involved->filter(fa::AbstractFunction)" iteratorName="j">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:diagram.target.createAbstractFunctionAbstractCapabilityInvolvement(j)"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="refreshElement" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.RefreshElement">
                    <parameters name="context" value="aql:containerView.getDiagramContainer()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%oa.oaib.constraint" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%oa.oaib.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%oa.oaib.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV']"/>
          <reusedTools xsi:type="tool_1:ContainerDropDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
          <reusedTools xsi:type="tool:PopupMenu" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu']"/>
          <reusedTools xsi:type="tool:ToolDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']"/>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="Operational Entity Blank" label="%oa.oab" titleExpression="aql:'[OAB] ' + self.name" domainClass="Namespace" preconditionExpression="aql:self.oclIsKindOf(oa::Entity) or self.oclIsKindOf(oa::EntityPkg)" defaultConcern="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@concerns/@ownedConcernDescriptions.0">
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Entities%20From%20Project%20Explorer']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraints%20From%20Project%20Explorer']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20Entitiy']"/>
      <dropDescriptions href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/ContextArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/EPBSArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaModeller.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/OperationalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/PhysicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/SharedModel.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.allocated.interactions.filter" label="%oa.oab.hide.allocated.interactions.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@edgeMappings[name='OAB%20Interaction']" semanticConditionExpression="aql:self.hideAllocatedInteractions()"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.operational.activities.filter" label="%oa.oab.hide.operational.activities.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.roles.filter" label="%oa.oab.hide.roles.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subContainerMappings[name='OAB_subRoles']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.operational.actors.filter" label="%oa.oab.hide.operational.actors.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']" semanticConditionExpression="aql:not (self.isActor())"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.interactions.filter" label="%oa.oab.hide.interactions.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@edgeMappings[name='OAB%20Interaction']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.communication.means.filter" label="%oa.oab.hide.communication.means.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@edgeMappings[name='OAB_CommunicationMean']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.filter" label="%oa.oab.show.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='OAB_Dummy']" semanticConditionExpression=""/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.on.component.exchanges.filter" label="%oa.oab.show.exchange.items.on.component.exchanges.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='OAB_Dummy']" semanticConditionExpression=""/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.on.component.exchange.without.functional.exchanges.filter" label="%oa.oab.show.exchange.items.on.component.exchange.without.functional.exchanges.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='OAB_Dummy']" semanticConditionExpression=""/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.allocated.functional.exchanges.on.component.exchanges.filter" label="%oa.oab.show.allocated.functional.exchanges.on.component.exchanges.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='OAB_Dummy']" semanticConditionExpression=""/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.cross.functional.exchanges.of.reusable.components.filter" label="%oa.oab.hide.cross.functional.exchanges.of.reusable.components.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@edgeMappings[name='OAB%20Interaction']" viewConditionExpression="aql:self.target.isValidInteractionEdge(self.sourceNode,self.targetNode)"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.interactions.names.filter" label="%oa.oab.hide.interactions.names.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='CA%20Dummy']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.communication.means.names.filter" label="%oa.oab.hide.communication.means.names.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Architecture%20Blank']/@defaultLayer/@nodeMappings[name='CA%20Dummy']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%oa.oab.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.sequencing.information.filter" label="%oa.oab.hide.sequencing.information.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='FC_ControlNode'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@edgeMappings[name='OAB_FC_SequenceLink']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:self.isDiagramTitleBlock()">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <concerns>
        <ownedConcernDescriptions name="Activate filters" filters="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@filters[name='hide.sequencing.information.filter']"/>
      </concerns>
      <defaultLayer name="default layer">
        <nodeMappings name="OAB_OperationalProcessEnd" detailDescriptions="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Process%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Process%20Description']" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="" createElements="false" semanticElements="" domainClass="OperationalProcess">
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getFunctionalChainLabel(diagram)" sizeComputationExpression="1" resizeKind="NSEW" width="2" height="2">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="OAB_Dummy" semanticCandidatesExpression="ocl:Set {}" domainClass="EObject"/>
        <nodeMappings name="FC_ControlNode" semanticCandidatesExpression="aql:diagram.getAvailableControlNodes()" synchronizationLock="true" domainClass="ControlNode">
          <deletionDescription href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete']"/>
          <conditionnalStyles predicateExpression="aql:self.kind == fa::ControlNodeKind::AND">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/ControlNode_And.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.kind == fa::ControlNodeKind::OR">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/ControlNode_Or.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.kind == fa::ControlNodeKind::ITERATE">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/ControlNode_Iterate.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="OAB_CommunicationMean" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="service:diagram.getABComponentExchangeSemanticCandidates" semanticElements="var:self" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']" targetFinderExpression="aql:self.target" sourceFinderExpression="aql:self.source" domainClass="CommunicationMean" useDomainElement="true" reconnections="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Source%20Communication%20Mean'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Target%20Communication%20Mean']">
          <style targetArrow="InputFillClosedArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getComponentExchangeLabel(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="OAB Interaction" preconditionExpression="service:isValidABInteractionEdge(sourceView, targetView)" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="service:diagram.getABFunctionalExchangeSemanticCandidates" semanticElements="var:self" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']" targetFinderExpression="service:getInteractionTargetInDiagram(diagram)" sourceFinderExpression="service:getInteractionSourceInDiagram(diagram)" domainClass="FunctionalExchange" useDomainElement="true" reconnections="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.2/@ownedTools[name='OAIB%20Reconnect%20Exchanges']">
          <style targetArrow="InputFillClosedArrow">
            <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
            <centerLabelStyleDescription labelExpression="aql:self.getFunctionalExchangeLabel(diagram)">
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="OAB_FC_SequenceLink" semanticCandidatesExpression="aql:diagram.getAvailableSequenceLinks()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='FC_ControlNode']" targetFinderExpression="aql:self.getSequenceLinkTarget()" sourceFinderExpression="aql:self.getSequenceLinkSource()" domainClass="SequenceLink" useDomainElement="true">
          <deletionDescription href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete']"/>
          <style lineStyle="dash" routingStyle="manhattan">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="service:getSequenceLinkLabel(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="OAB_Entity1" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="" createElements="false" domainClass="Entity" dropDescriptions="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='change%20role%20allocation'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Entities%20From%20Project%20Explorer'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.2/@ownedTools[name='D%26D%20OperationalActivities%20From%20Project%20Explorer'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20Roles%20From%20Project%20Explorer'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20Entitiy'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20AB%20AbstractFunction%20Allocation']" reusedContainerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']">
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Entity%20Breakdown']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Entity%20Blank']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Role%20Blank']"/>
          <subNodeMappings name="OAB_Activity" preconditionExpression="service:isAllocatedFunction(container, containerView)" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" semanticCandidatesExpression="" createElements="false" domainClass="OperationalActivity">
            <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Activity%20Breakdown']"/>
            <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Activity%20Interaction%20Blank']"/>
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:view.computeFunctionLabel()" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Activity_Label_Orange']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange']"/>
            </style>
            <conditionnalStyles predicateExpression="service:isNotLeaf()">
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:view.computeFunctionLabel()" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
                <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange']"/>
              </style>
            </conditionnalStyles>
          </subNodeMappings>
          <subContainerMappings name="OAB_subRoles" preconditionExpression="aql:self.isAllocatedRole(self,container)" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='OA%20Role']" semanticCandidatesExpression="" createElements="false" domainClass="Role" dropDescriptions="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.2/@ownedTools[name='D%26D%20OperationalActivities%20From%20Project%20Explorer%20To%20Role'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DnD%20AB%20AbstractFunction%20Allocation']" reusedNodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_purple']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_OperationalRole_Purple']"/>
            </style>
          </subContainerMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom">
            <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']"/>
            <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']"/>
            <backgroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_min']"/>
            <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']"/>
          </style>
        </containerMappings>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']"/>
        <toolSections name="Entities">
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Operational Entity" name="operational.entity" label="%oa.oab.operational.entity" precondition="aql:containerView.getABTarget().isValidCreationABComponent()" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Entity.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getABTarget()">
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.oclIsKindOf(oa::Entity)">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="Entity" referenceName="ownedEntities" variableName="entity">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.oclIsKindOf(oa::EntityPkg)">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="Entity" referenceName="ownedEntities" variableName="entity">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (self.oclIsKindOf(oa::Entity)) and not (self.oclIsKindOf(oa::EntityPkg))">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.getRootEntityPkg()">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="Entity" referenceName="ownedEntities" variableName="entity">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Operational Actor" name="operational.actor" label="%oa.oab.operational.actor" precondition="aql:containerView.getABActorTarget().isValidCreationABActor()" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/OperationalActor.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getABActorTarget().createActor()">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                  <parameters name="context" value="aql:self"/>
                  <parameters name="scope" value="aql:self"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a Communication Mean" name="communication.mean" label="%oa.oab.communication.mean" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@edgeMappings[name='OAB_CommunicationMean']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source.createABComponentExchange(sourceView,targetView)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Show Hide Entity">
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Insert/Remove Operational Entities. Create or delete graphical objects corresponding to already existing Operational Entities. Removing an Operational Entity graphical object from the diagram does not delete the Operational Entity from the model. This tool does not modify the semantic model." name="operational.entities" label="%oa.oab.operational.entities" precondition="aql:not (container.isActor()) or containerView.oclIsKindOf(diagram::DDiagram)" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <variable name="container"/>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="aql:containerView.getDiagramContainer()"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="componentsInDiagram" computationExpression="aql:self.void2Null(containerView.containers.target->filter(oa::Entity)->select(x | not (x.isActor())))"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getOEBTarget()">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectSubComponent" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:containerView.getOEBTarget()"/>
                    <parameters name="scope" value="aql:self.void2Null(containerView.getAvailableEntitiesToInsert()->select(x | not (x.isActor())))"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="aql:'Select Operational Entities to show in ' + container.name + '.'"/>
                    <parameters name="initialSelection" value="aql:componentsInDiagram"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selection = 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getOEBTarget()">
                      <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(self.makeDiff(componentsInDiagram, containerView.target))">
                        <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selection->includes(i))">
                          <subModelOperations xsi:type="tool:If" conditionExpression="aql:containerView.containers->select(container | container.target = i)->size() > 0">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.containers->select(container | container.target = i)->first()">
                              <subModelOperations xsi:type="tool:DeleteView"/>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(selection)">
                        <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (componentsInDiagram->includes(i))">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i">
                            <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']" containerViewExpression="aql:diagram"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:ContainerCreationDescription" documentation="Insert/Remove Operational Actors. Create or delete graphical objects corresponding to already existing Operational Actors. Removing an Operational Actor graphical object from the diagram does not delete the Operational Actor from the model. This tool does not modify the semantic model." name="operational.actors" label="%oa.oab.operational.actors" precondition="aql:not (container.isActor()) or containerView.oclIsKindOf(diagram::DDiagram)" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <variable name="container"/>
              <viewVariable name="containerView">
                <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="aql:containerView.getDiagramContainer()"/>
                <subVariables xsi:type="tool:AcceleoVariable" name="componentsInDiagram" computationExpression="aql:self.void2Null(containerView.containers.target->filter(oa::Entity)->select(x | x.isActor()))"/>
              </viewVariable>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getOEBTarget()">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectSubComponent" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:containerView.getOEBTarget()"/>
                    <parameters name="scope" value="aql:containerView.getAvailableEntitiesToInsert()->select(x | x.isActor())"/>
                    <parameters name="resultVariable" value="selection"/>
                    <parameters name="wizardMessage" value="aql:'Select Operational Actors to show in ' + container.name + '.'"/>
                    <parameters name="initialSelection" value="aql:componentsInDiagram"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selection = 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getOEBTarget()">
                      <subModelOperations xsi:type="tool:For" expression="aql:componentsInDiagram">
                        <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selection->includes(i))">
                          <subModelOperations xsi:type="tool:If" conditionExpression="aql:containerView.containers->select(container | container.target = i)->size() > 0">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.containers->select(container | container.target = i)->first()">
                              <subModelOperations xsi:type="tool:DeleteView"/>
                            </subModelOperations>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(selection)">
                        <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (componentsInDiagram->includes(i))">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i">
                            <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']" containerViewExpression="aql:diagram"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Show/Hide Communication Means and Categories">
            <tools xsi:type="tool:ToolDescription" documentation="Insert/Remove Communication Means. Create or delete graphical objects corresponding to already existing Communication Means and the corresponding source/target Operational Entity if they are not present on the diagram yet. Removing a Communication Mean graphical object from the diagram does not delete the Communication Mean from the model. This tool does not modify the semantic model." name="communication.means" label="%oa.oab.communication.means" precondition="aql:(elementView.target->filter(cs::Component)->size() > 0) and (elementView->filter(diagram::DDiagram)->size() = 0)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="SetVariable $displayedExchanges" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                    <parameters name="context" value="aql:elementView"/>
                    <parameters name="variable" value="displayedExchanges"/>
                    <parameters name="value" value="aql:self.void2Null(elementView.getDisplayedConnections())"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectExchanges" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                    <parameters name="context" value="aql:element"/>
                    <parameters name="scope" value="aql:self.getAvailableConnectionsToInsert()"/>
                    <parameters name="initialSelection" value="aql:displayedExchanges"/>
                    <parameters name="resultVariable" value="selectedExchanges"/>
                    <parameters name="wizardMessage" value="aql:'Select Component Exchanges to show in ' + element.name + '.'"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedExchanges != 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.insertRemoveCommunicationMeans(selectedExchanges)"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="Target Communication Mean" precondition="aql:element.isValidABReconnectComponentExchangeTarget(source,target)" forceRefresh="true">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element.reconnectABComponentExchangeTarget(edgeView,sourceView,targetView)"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="Source Communication Mean" precondition="aql:element.isValidABReconnectComponentExchangeSource(source,target)" forceRefresh="true" reconnectionKind="RECONNECT_SOURCE">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element.reconnectABComponentExchangeSource(edgeView,sourceView,targetView)"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="name" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="OA Role" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="capellaElement">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CapellaDeleteExternalAction" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="delete category">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="NoDeleteElement" id="org.polarsys.capella.core.sirius.analysis.delete.NoDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="DnD AB AbstractFunction Allocation" precondition="aql:newContainer.oclIsKindOf(oa::Role) or newContainer.oclIsKindOf(cs::Component)" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']" moveEdges="true">
            <oldContainer name="oldSemanticContainer">
              <subVariables xsi:type="tool:AcceleoVariable" name="allocations" computationExpression="aql:if (oldSemanticContainer->filter(oa::Role)->size() > 0) then oldSemanticContainer.ownedActivityAllocations else oldSemanticContainer.ownedFunctionalAllocation endif"/>
            </oldContainer>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element.dndABAbstractFunctionAllocation(oldSemanticContainer,newSemanticContainer)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="change role allocation" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subContainerMappings[name='OAB_subRoles']" moveEdges="true">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:oldSemanticContainer.ownedRoleAllocations->select(ownedRoleAllocation | ownedRoleAllocation.targetElement = element)->first()">
                <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="aql:newContainerView.target" featureName="ownedRoleAllocations"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="aql:newContainerView.target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="DnD Entitiy" precondition="aql:element.isActor() or (element.oclIsKindOf(oa::Entity) and not (newViewContainer.target.isActor()))" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']" moveEdges="true">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element.dndABComponent(newContainerView)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Entities From Project Explorer" precondition="aql:element.oclIsKindOf(oa::Entity) and element.partitionableElementCanBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Constraints From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" dragSource="PROJECT_EXPLORER">
            <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Roles">
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Create a new Role and allocate it to the selected Operational Entity" name="role" label="%oa.oab.role" precondition="aql:container->filter(oa::Entity)->size() > 0" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subContainerMappings[name='OAB_subRoles']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.getRootRolePkg()">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Role" referenceName="ownedRoles" variableName="newRole">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="RoleAllocation" referenceName="ownedRoleAllocations">
                  <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="aql:newRole"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="aql:container"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates new allocation relationships between selected Roles and the target Operational Entity. The newly allocated Roles are automatically displayed on the target Operational Entity. This tool modifies the semantic model." name="manage.role.allocation" label="%oa.oab.manage.role.allocation" precondition="aql:container->filter(oa::Entity)->size() > 0" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subContainerMappings[name='OAB_subRoles']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Manage.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectRoles" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.makeDiff(container.eContainerOrSelf(capellacore::ModellingArchitecture).ownedRolePkg.ownedRoles, container.ownedRoleAllocations.targetElement)"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(container.ownedRoleAllocations.targetElement)"/>
                  <parameters name="resultVariable" value="selection"/>
                  <parameters name="wizardMessage" value="aql:'Select Roles to allocate to ' + container.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selection = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(self.makeDiff(selection, container.ownedRoleAllocations.targetElement))">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i">
                      <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subContainerMappings[name='OAB_subRoles']" containerViewExpression="aql:containerView"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="RoleAllocation" referenceName="ownedRoleAllocations" variableName="role">
                        <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="aql:container"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="aql:i"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(self.makeDiff(container.ownedRoleAllocations.targetElement, selection))">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.ownedRoleAllocations->select(ownedRoleAllocation | ownedRoleAllocation.targetElement = i)->first()">
                      <subModelOperations xsi:type="tool:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert All Allocated Roles. Create graphical objects for all Roles already allocated to all Operational Entities appearing on the diagram. This tool does not modify the semantic model." name="all.allocated.roles" label="%oa.oab.all.allocated.roles" precondition="aql:elementView.oclIsKindOf(diagram::DDiagram)" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="visibleEntities" computationExpression="aql:elementView.containers->select(container | container.target->filter(oa::Entity)->size() > 0)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:For" expression="aql:visibleEntities">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i">
                    <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(i.target.ownedRoleAllocations.targetElement)" iteratorName="j">
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (i.ownedDiagramElements.target->includes(j))">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:j">
                          <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subContainerMappings[name='OAB_subRoles']" containerViewExpression="aql:i"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Insert/Remove Allocated Roles. Create or delete graphical objects corresponding to already allocated Roles. Removing a Role graphical object from an Operational Entity does not delete the allocation relationship between this Operational Entity and the Role. This tool does not modify the semantic model" name="allocated.roles" label="%oa.oab.allocated.roles" precondition="aql:not (containerView.oclIsKindOf(diagram::DDiagram))" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subContainerMappings[name='OAB_subRoles']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectRoles" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.ownedRoleAllocations.targetElement"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(containerView.eContents()->filter(diagram::DDiagramElement)->select(x | x.visible).target->filter(oa::Role))"/>
                  <parameters name="resultVariable" value="element"/>
                  <parameters name="wizardMessage" value="aql:'Select allocated Roles to show in ' + container.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (element = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView">
                    <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(self.eContents()->filter(diagram::DDiagramElement)->select(x | x.target->filter(oa::Role)->size() > 0))">
                      <subModelOperations xsi:type="tool:DeleteView"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:containerView.eContents()->filter(diagram::DDiagramElement)->select(x | x.target = i)->size() > 0">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.eContents()->filter(diagram::DDiagramElement)->select(x | x.target = i)->first().show()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:containerView.eContents()->filter(diagram::DDiagramElement)->select(x | x.target = i)->size() = 0">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i">
                          <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subContainerMappings[name='OAB_subRoles']" containerViewExpression="aql:containerView"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Roles From Project Explorer" precondition="aql:element.oclIsKindOf(oa::Role)" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subContainerMappings[name='OAB_subRoles']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element">
              <subVariables xsi:type="tool:AcceleoVariable" name="oldAllocations" computationExpression="aql:self.void2Null(element.incomingTraces->filter(oa::RoleAllocation))"/>
            </element>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:oldAllocations->select(oldAllocation | oldAllocation.sourceElement = newSemanticContainer)->size() = 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:newSemanticContainer">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="RoleAllocation" referenceName="ownedRoleAllocations">
                      <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="aql:element"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="aql:newSemanticContainer"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Activities">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Operational Activity and allocate it to the selected Operational Entity or the selected Role." name="function" label="%oa.oab.function" precondition="aql:container->select(x | x->filter(oa::Entity)->size() > 0 or x->filter(oa::Role)->size() > 0)->size() > 0" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:container->filter(oa::Entity)->size() > 0">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="ComponentFunctionalAllocation" referenceName="ownedFunctionalAllocation" variableName="allocation"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.getRootFunction()">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="OperationalActivity" referenceName="ownedFunctions" variableName="newOA">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:allocation">
                    <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="aql:newOA"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="aql:container"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:container->filter(oa::Role)->size() > 0">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="ActivityAllocation" referenceName="ownedActivityAllocations" variableName="allocation"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.getRootFunction()">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="OperationalActivity" referenceName="ownedFunctions" variableName="newOA">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:allocation">
                    <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="aql:newOA"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="aql:container"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Create an Interaction between two Operational Activities." name="functional.exchange" label="%oa.oab.functional.exchange" precondition="aql:self.isValidCreationFunctionalExchange(preSource,preTarget)" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@edgeMappings[name='OAB%20Interaction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalExchange_OA.gif" connectionStartPrecondition="aql:self.isValidCreationFunctionalExchange(preSource)">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source.createABFunctionalExchange(sourceView,targetView)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Creates new allocation relationships between selected Operational Activity and the target Operational Entity or Role. The newly allocated Operational Activity are automatically displayed on the target Operational Entity or Role. This tool modifies the semantic model." name="manage.activity.allocation" label="%oa.oab.manage.activity.allocation" precondition="aql:container->select(x | x->filter(oa::Entity)->size() > 0 or x->filter(oa::Role)->size() > 0)->size() > 0" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Manage.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:container.oclIsKindOf(oa::Role)">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectActivities" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="aql:container.getAvailableOperationalActivityAllocations()"/>
                    <parameters name="initialSelection" value="aql:self.void2Null(container.ownedActivityAllocations.targetElement)"/>
                    <parameters name="resultVariable" value="element"/>
                    <parameters name="wizardMessage" value="aql:'Select Operational Activities to allocate to ' + container.name + '.'"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (element = 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(container.ownedActivityAllocations.targetElement)">
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (element->includes(i))">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.eContents()->filter(diagram::DNode)->select(x | x.target = i)->first()">
                          <subModelOperations xsi:type="tool:DeleteView"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.ownedActivityAllocations->select(ownedActivityAllocation | ownedActivityAllocation.targetElement = i)->first()">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.removeCapellaElement()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(element)">
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (container.ownedActivityAllocations.targetElement->includes(i))">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                          <subModelOperations xsi:type="tool:CreateInstance" typeName="ActivityAllocation" referenceName="ownedActivityAllocations">
                            <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="aql:i"/>
                            <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="aql:container"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i">
                          <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']" containerViewExpression="aql:containerView"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:container.oclIsKindOf(oa::Entity)">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectActivities" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="aql:container.getAvailableFunctionalAllocation()"/>
                    <parameters name="initialSelection" value="aql:self.void2Null(container.ownedFunctionalAllocation.targetElement)"/>
                    <parameters name="resultVariable" value="element"/>
                    <parameters name="wizardMessage" value="aql:'Select Operational Activities to allocate to ' + container.name + '.'"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (element = 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(self.makeUnion(self->filter(oa::Entity).allocatedFunctions, self->filter(oa::Role).outgoingTraces->filter(oa::ActivityAllocation).targetElement))">
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (element->includes(i))">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.eContents()->filter(diagram::DNode)->select(x | x.target = i)->first()">
                          <subModelOperations xsi:type="tool:DeleteView"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.ownedFunctionalAllocation->select(x | x.function = i)->first()">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.removeCapellaElement()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:container->filter(oa::Entity)->size() > 0">
                      <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(element)">
                        <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (container.ownedFunctionalAllocation.function->includes(i))">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                            <subModelOperations xsi:type="tool:CreateInstance" typeName="ComponentFunctionalAllocation" referenceName="ownedFunctionalAllocation">
                              <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="aql:i"/>
                              <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="aql:container"/>
                            </subModelOperations>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i">
                            <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']" containerViewExpression="aql:containerView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert/Remove Interactions. Create or delete graphical objects corresponding to already existing Interactions and the corresponding source/target Operational Activities / Roles / Operational Entities if they are not present on the diagram yet. Removing an Interaction graphical object from the diagram does not delete the Interaction from the model. This tool does not modify the semantic model." name="functional.exchanges" label="%oa.oab.functional.exchanges" precondition="aql:(elementView.target->filter(fa::AbstractFunction)->size() > 0) and (elementView->filter(diagram::DDiagram)->size() = 0)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="displayedExchanges" computationExpression="aql:self.void2Null(elementView.getDisplayedFunctionalExchanges())"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectExchanges" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:element"/>
                  <parameters name="scope" value="aql:self.getAvailableFunctionalExchangesToInsertInArchitectureBlank()"/>
                  <parameters name="initialSelection" value="aql:displayedExchanges"/>
                  <parameters name="resultVariable" value="selectedExchanges"/>
                  <parameters name="wizardMessage" value="aql:'Select Functional Exchanges to show in ' + element.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedExchanges != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(selectedExchanges)">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (displayedExchanges->includes(i))">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i.showFunctionalExchangeInArchitectureBlank2(elementView)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:displayedExchanges">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedExchanges->includes(i))">
                      <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:elementView"/>
                        <parameters name="variable" value="edgeToDelete"/>
                        <parameters name="value" value="aql:elementView.getDiagramContainer().edges->select(edge | edge.target = i)->first()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:edgeToDelete">
                        <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:elementView"/>
                          <parameters name="variable" value="sourceNode"/>
                          <parameters name="value" value="aql:edgeToDelete.sourceNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:elementView"/>
                          <parameters name="variable" value="targetNode"/>
                          <parameters name="value" value="aql:edgeToDelete.targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:sourceNode.isABorderedNode()">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sourceNode">
                          <subModelOperations xsi:type="tool:If" conditionExpression="aql:(sourceNode.getIncomingEdges()->size() = 0) and (sourceNode.getOutgoingEdges()->size() = 0)">
                            <subModelOperations xsi:type="tool:DeleteView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:targetNode.isABorderedNode()">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:targetNode">
                          <subModelOperations xsi:type="tool:If" conditionExpression="aql:(targetNode.getIncomingEdges()->size() = 0) and (targetNode.getOutgoingEdges()->size() = 0)">
                            <subModelOperations xsi:type="tool:DeleteView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Insert/Remove Operational Processes. Create or delete graphical objects corresponding to already existing Operational Processes. Removing an Operational Process graphical object from the diagram does not delete the Operational Process from the model. This tool does not modify the semantic model." name="operational.processes" label="%oa.oab.operational.processes" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='OAB_OperationalProcessEnd']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool:AcceleoVariable" name="ownedElements" computationExpression="aql:containerView.getSetOfDiagramElements()"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="initialSelection" computationExpression="aql:self.void2Null(containerView.getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.visible and getNodesAndNodeListElement.target->filter(fa::FunctionalChain)->size() > 0).target)"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectFunctionalChains" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.getFunctionalChainsToInsert(containerView,container.getAllFunctionalChain())"/>
                  <parameters name="initialSelection" value="aql:initialSelection"/>
                  <parameters name="resultVariable" value="selectedFunctionalChains"/>
                  <parameters name="wizardMessage" value="aql:'Select Operartional Processes to show in ' + container.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedFunctionalChains = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:initialSelection">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedFunctionalChains->includes(i))">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(self.makeDiff(selectedFunctionalChains, initialSelection))">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i">
                      <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='OAB_OperationalProcessEnd']" containerViewExpression="aql:containerView"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Insert/Remove Operational Activities. Create or delete graphical objects corresponding to already existing Operational Activities. Removing an Operational Activity graphical object from the diagram does not delete the Operational Activity from the model. This tool does not modify the semantic model." name="allocated.activities" label="%oa.oab.allocated.activities" precondition="aql:container->select(x | x->filter(oa::Entity)->size() > 0 or x->filter(oa::Role)->size() > 0)->size() > 0" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool:AcceleoVariable" name="visibleFunctions" computationExpression="aql:self.void2Null(containerView.ownedDiagramElements.target->filter(fa::AbstractFunction))"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:container->filter(oa::Entity)->size() > 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self">
                    <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectAllocatedFunctions" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                      <parameters name="context" value="aql:container"/>
                      <parameters name="scope" value="aql:container.getShowableAllocatedFunctions(containerView)"/>
                      <parameters name="initialSelection" value="aql:visibleFunctions"/>
                      <parameters name="resultVariable" value="selectedFunctions"/>
                      <parameters name="wizardMessage" value="aql:'Select allocated Operational Activities to show in ' + container.name + '.'"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedFunctions = 'WIZARD_CANCELED')">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.insertRemoveAllocatedFunctions(selectedFunctions)"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:container->filter(oa::Role)->size() > 0">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectOAs" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="aql:container.getShowableAllocatedOperationalActivities()"/>
                    <parameters name="initialSelection" value="aql:visibleFunctions"/>
                    <parameters name="resultVariable" value="selectedFunctions"/>
                    <parameters name="wizardMessage" value="aql:'Select allocated Operational Activities to show in ' + container.name + '.'"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedFunctions = 'WIZARD_CANCELED')">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.insertRemoveAllocatedFunctions(selectedFunctions)"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Show all activities">
            <tools xsi:type="tool:ToolDescription" documentation="Insert All Allocated Operational Activities. Create graphical objects for all Operational Activities already allocated to all Operational Entities appearing on the diagram. This tool does not modify the semantic model." name="all.allocated.activities.in.entities" label="%oa.oab.all.allocated.activities.in.entities" precondition="aql:elementView.oclIsKindOf(diagram::DDiagram) or element.oclIsKindOf(oa::Entity)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <element name="element"/>
              <elementView name="elementView">
                <subVariables xsi:type="tool:AcceleoVariable" name="visibleEntities" computationExpression="aql:elementView.getAllContainersNew()->select(x | x.target->filter(oa::Entity)->size() > 0)"/>
              </elementView>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                  <subModelOperations xsi:type="tool:For" expression="aql:visibleEntities">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i">
                      <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(i.target.ownedFunctionalAllocation.targetElement)" iteratorName="j">
                        <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (i.ownedDiagramElements.target->includes(j))">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:j">
                            <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']" containerViewExpression="aql:i"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="Insert All Allocated Operational Activities. Create graphical objects for all Operational Activities already allocated to all Roles appearing on the diagram. This tool does not modify the semantic model." name="all.allocated.activities.in.roles" label="%oa.oab.all.allocated.activities.in.roles" precondition="aql:elementView.oclIsKindOf(diagram::DDiagram) or element.oclIsKindOf(oa::Role)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <element name="element"/>
              <elementView name="elementView">
                <subVariables xsi:type="tool:AcceleoVariable" name="visibleRoles" computationExpression="aql:elementView.getAllContainersNew()->select(x | x.target->filter(oa::Role)->size() > 0)"/>
              </elementView>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                  <subModelOperations xsi:type="tool:For" expression="aql:visibleRoles">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i">
                      <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(i.target.ownedActivityAllocations.targetElement)" iteratorName="j">
                        <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (i.ownedDiagramElements.target->includes(j))">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:j">
                            <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']" containerViewExpression="aql:i"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D OperationalActivities From Project Explorer" precondition="aql:element.oclIsKindOf(fa::AbstractFunction) and (element.subFunctions->size() = 0)" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element">
              <subVariables xsi:type="tool:AcceleoVariable" name="oldAllocationBlocks" computationExpression="aql:self.void2Null(element.allocationBlocks)"/>
            </element>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:oldAllocationBlocks->size() > 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element.dndABAbstractFunctionAllocation(element.allocationBlocks->first(),newSemanticContainer)"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:oldAllocationBlocks->size() = 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:newSemanticContainer">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="ComponentFunctionalAllocation" referenceName="ownedFunctionalAllocation">
                      <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="aql:element"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="aql:newSemanticContainer"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D OperationalActivities From Project Explorer To Role" precondition="aql:element.oclIsKindOf(fa::AbstractFunction) and (element.subFunctions->size() = 0)" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element">
              <subVariables xsi:type="tool:AcceleoVariable" name="oldAllocations" computationExpression="aql:self.void2Null(element.incomingTraces->filter(oa::ActivityAllocation))"/>
            </element>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:oldAllocations->select(oldAllocation | oldAllocation.sourceElement = newSemanticContainer)->size() = 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:newSemanticContainer">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="ActivityAllocation" referenceName="ownedActivityAllocations">
                      <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="aql:element"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="aql:newSemanticContainer"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:PopupMenu" name="operational.process.menu" label="%oa.oab.operational.process.menu">
            <menuItemDescription xsi:type="tool:OperationAction" name="operational.process" label="%oa.oab.operational.process" precondition="aql:self.isValidFunctionalChainSelection(views)" forceRefresh="true">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createFunctionalChain(views)">
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChain)">
                    <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@nodeMappings[name='OAB_OperationalProcessEnd']" containerViewExpression="aql:views->first().getDiagramContainer()"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </menuItemDescription>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="OAIB Reconnect Exchanges" precondition="aql:element.isFunctionalExchangeReconnectable(sourceView.getDiagramContainer(),source,target)" reconnectionKind="RECONNECT_BOTH">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element.reconnectFunctionalExchange(source,target)"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
        </toolSections>
        <toolSections name="Accelerators">
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert all the Activities available in a given Mode / State. This tool does not modify the semantic model." name="activities.from.mode.state" label="%oa.oab.activities.from.mode.state" precondition="aql:elementView.isValidABInsertStateModes()" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Mode.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectStates" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:self.void2Null(element)"/>
                  <parameters name="scope" value="aql:elementView.getABInsertStateModesScope()"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="elements"/>
                  <parameters name="wizardMessage" value="Select States/Modes to display all its available functions."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (elements = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.showABStateModes(elements)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert all the related elements contributing to a given Scenario. &#xD;&#xA;Activities and allocating Entities might be displayed on the diagram as well if they are not yet represented. &#xD;&#xA;This tool does not modify the semantic model." name="elements.from.scenario" label="%oa.oab.elements.from.scenario" precondition="aql:elementView.isValidABInsertScenarios()" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Scenario.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectElements" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:self.void2Null(element)"/>
                  <parameters name="scope" value="aql:elementView.getABInsertScenariosScope()"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="elements"/>
                  <parameters name="wizardMessage" value="Select Scenarios to display all involved elements."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (elements = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.showABScenarios(elements)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%oa.oab.constraint" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%oa.oab.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%oa.oab.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV']"/>
          <reusedTools xsi:type="tool_1:ContainerDropDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
          <reusedTools xsi:type="tool:PopupMenu" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu']"/>
          <reusedTools xsi:type="tool:ToolDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']"/>
        </toolSections>
        <customization>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization" predicateExpression="aql:self.isDashedFunction(container.getComponentType())">
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']/@conditionnalStyles.0/@style //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@containerMappings[name='OAB_Entity1']/@subNodeMappings[name='OAB_Activity']/@style" attributeName="borderLineStyle" value="dash"/>
          </vsmElementCustomizations>
        </customization>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="Operational Activity Breakdown" label="%oa.oabd" titleExpression="aql:'[OABD] ' + self.name" domainClass="OperationalActivity">
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraints%20From%20Project%20Explorer']"/>
      <dropDescriptions href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/LogicalArchitecture.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.activity.gen/model/Activity.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CompositeStructure.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/FunctionalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Interaction.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCommon.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/CapellaCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Requirement.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/OperationalAnalysis.ecore#/"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//communication"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datatype"/>
      <metamodel href="platform:/plugin/org.polarsys.capella.core.data.gen/model/Information.ecore#//datavalue"/>
      <metamodel href="http://www.eclipse.org/emf/2002/Ecore#/"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%oa.oabd.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:self.isDiagramTitleBlock()">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <layout xsi:type="description_2:OrderedTreeLayout" childrenExpression="feature:subFunctions" nodeMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Breakdown']/@defaultLayer/@nodeMappings[name='OAB_OperationalActivity']"/>
      <defaultLayer name="default layer">
        <nodeMappings name="OAB_OperationalActivity" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20OperationalActivity']" semanticCandidatesExpression="service:getFBDSemanticAbstractFunctions()" domainClass="OperationalActivity">
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Activity%20Breakdown']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Activity%20Interaction%20Blank']"/>
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self = container">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="OAB_OperationalActivity_subFunctions" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20subFunctionLink']" semanticCandidatesExpression="aql:self.eAllContents()" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Breakdown']/@defaultLayer/@nodeMappings[name='OAB_OperationalActivity']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Breakdown']/@defaultLayer/@nodeMappings[name='OAB_OperationalActivity']" targetFinderExpression="service:getFBDParentFunction()" reconnections="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='changeContainer']">
          <style targetArrow="InputFillClosedArrow" routingStyle="tree" foldingStyle="TARGET">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']"/>
        <toolSections name="Activities">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Operational Activity in the target Operational Activity" name="operational.activity" label="%oa.oabd.operational.activity" precondition="aql:containerView.isValidCreationDFFunction()" forceRefresh="true" elementsToSelect="aql:self.selectOnlyCreatedView()" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Breakdown']/@defaultLayer/@nodeMappings[name='OAB_OperationalActivity']" extraMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Breakdown']/@defaultLayer/@nodeMappings[name='OAB_OperationalActivity']">
            <variable name="container">
              <subVariables xsi:type="tool:AcceleoVariable" name="tool" computationExpression="Operational Activity"/>
            </variable>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.createFunction()">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self"/>
                  <parameters name="containerViewExpression" value="aql:containerView.getDiagramContainer()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Sets the target Operational Activity as the new container of the source Operational Activity" name="contained.in" label="%oa.oabd.contained.in" precondition="aql:preSource.isValidDndDFBAbstractFunction(preTargetView)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Breakdown']/@defaultLayer/@edgeMappings[name='OAB_OperationalActivity_subFunctions']" iconPath="/org.polarsys.capella.core.sirius.analysis/description/images/containedIn.png">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source.dndDFBAbstractFunction(source.eContainer(),target)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="delete subFunctionLink">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.sourceNode.target.dndDFBAbstractFunction(elementView.sourceNode.target.eContainer(),containerView.target)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="capellaElement">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CapellaDeleteExternalAction" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="rename OperationalActivity" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="changeContainer" precondition="aql:element.isValidDndDFBAbstractFunction(targetView)" forceRefresh="true">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element.dndDFBAbstractFunction(source,target)"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Constraints From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" dragSource="PROJECT_EXPLORER">
            <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%oa.oabd.constraint" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%oa.oabd.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%oa.oabd.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV']"/>
          <reusedTools xsi:type="tool_1:ContainerDropDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
          <reusedTools xsi:type="tool:PopupMenu" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu']"/>
          <reusedTools xsi:type="tool:ToolDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']"/>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="Operational Role Blank" label="%oa.orb" titleExpression="aql:'[ORB] ' + self.name" domainClass="Namespace" preconditionExpression="aql:(self.oclIsKindOf(oa::Entity) and not self.isActor()) or self.oclIsKindOf(oa::EntityPkg)">
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraints%20From%20Project%20Explorer']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Role%20From%20Project%20Explorer']"/>
      <dropDescriptions href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.allocated.interactions.filter" label="%oa.orb.hide.allocated.interactions.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@edgeMappings[name='ORB%20Interaction']" semanticConditionExpression="aql:self.hideAllocatedInteractions()"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.interactions.filter" label="%oa.orb.hide.interactions.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@edgeMappings[name='ORB%20Interaction']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%oa.orb.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:self.isDiagramTitleBlock()">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <defaultLayer name="default layer">
        <edgeMappings name="ORB Interaction" preconditionExpression="aql:self.getInteractionSourceInDiagram(diagram) != self.getInteractionTargetInDiagram(diagram)" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Rename%20Interaction']" semanticCandidatesExpression="service:diagram.getDFFunctionalExchangeSemanticCandidates" semanticElements="var:self" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']/@subNodeMappings[name='ORB_OAAllocation']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']/@subNodeMappings[name='ORB_OAAllocation']" targetFinderExpression="service:getInteractionTargetInDiagram(diagram)" sourceFinderExpression="service:getInteractionSourceInDiagram(diagram)" domainClass="FunctionalExchange" useDomainElement="true" reconnections="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='OAIB%20Reconnect%20Exchanges']">
          <style targetArrow="InputFillClosedArrow">
            <strokeColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
            <centerLabelStyleDescription labelExpression="service:capellaLabelService(view, diagram)">
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="ORB_Role1" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Rename%20Interaction']" semanticCandidatesExpression="" createElements="false" domainClass="Role" dropDescriptions="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='change%20allocation'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20OperationalActivities%20From%20Project%20Explorer'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Role%20From%20Project%20Explorer']">
          <subNodeMappings name="ORB_OAAllocation" preconditionExpression="aql:container.getShowableAllocatedOperationalActivities()->includes(self)" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Rename%20Interaction']" semanticCandidatesExpression="" createElements="false" domainClass="OperationalActivity">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:view.computeFunctionLabel()" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange']"/>
            </style>
            <conditionnalStyles predicateExpression="service:isNotLeaf()">
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:view.computeFunctionLabel()" sizeComputationExpression="7" labelPosition="node" resizeKind="NSEW">
                <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
                <labelFormat>italic</labelFormat>
                <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
                <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange']"/>
              </style>
            </conditionnalStyles>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_purple']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_purple']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_OperationalRole_Purple']"/>
          </style>
        </containerMappings>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']"/>
        <toolSections name="Roles">
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Operational Role" name="operational.role" label="%oa.orb.operational.role" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.getRootRolePkg()">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Role" referenceName="ownedRoles" variableName="role">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Insert/Remove Operational Roles. Creates or deletes graphical objects corresponding to already existing Operational Roles. Removing an Operational Role graphical object from the diagram does not delete the Operational Role from the model. This tool does not modify the semantic model." name="operational.roles" label="%oa.orb.operational.roles" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool:AcceleoVariable" name="visibleRoles" computationExpression="aql:containerView.containers.target->filter(oa::Role)"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="Select Roles" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.eContainerOrSelf(oa::OperationalAnalysis).eAllContents()->filter(oa::Role), containerView.eAllContents(viewpoint::DSemanticDecorator).target))"/>
                  <parameters name="resultVariable" value="roles"/>
                  <parameters name="wizardMessage" value="aql:'Select Roles to insert into ' + container.name + '.'"/>
                  <parameters name="initialSelection" value="aql:visibleRoles"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:roles != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(self.makeDiff(roles, visibleRoles))">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i">
                      <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']" containerViewExpression="aql:containerView"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(self.makeDiff(visibleRoles, roles))">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.containers->select(container | container.target = i)->first()">
                      <subModelOperations xsi:type="tool:DeleteView"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="Rename Interaction" forceRefresh="true" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="change allocation" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']/@subNodeMappings[name='ORB_OAAllocation']" moveEdges="true">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:oldSemanticContainer">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:element.subFunctions->isEmpty()">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:oldSemanticContainer.ownedActivityAllocations->select(ownedActivityAllocation | ownedActivityAllocation.targetElement = element)->first()">
                    <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="aql:newContainerView.target" featureName="ownedActivityAllocations"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not element.subFunctions->isEmpty()">
                  <subModelOperations xsi:type="tool:For" expression="aql:element.eAllContents()->select(eAllContent | eAllContent.subFunctions->isEmpty())">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:oldSemanticContainer.ownedActivityAllocations->select(ownedActivityAllocation | ownedActivityAllocation.targetElement = i)">
                      <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="aql:newContainerView.target" featureName="ownedActivityAllocations"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="capellaElement">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="CapellaDeleteExternalAction" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Constraints From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" dragSource="PROJECT_EXPLORER">
            <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Role From Project Explorer" precondition="aql:element.oclIsKindOf(oa::Role) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']" dragSource="PROJECT_EXPLORER" moveEdges="true">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Activities">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Operational Activity allocated to the target Operational Role" name="operational.activity" label="%oa.orb.operational.activity" precondition="aql:container->select(x | x->filter(oa::Role)->size() > 0)->size() > 0" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']/@subNodeMappings[name='ORB_OAAllocation']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:container->filter(oa::Role)->size() > 0">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="ActivityAllocation" referenceName="ownedActivityAllocations" variableName="allocation"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.getRootFunction()">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="OperationalActivity" referenceName="ownedFunctions" variableName="newOA">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:allocation">
                    <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="aql:newOA"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="aql:container"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a new Interaction between the source and target Operational Activities&#xD;&#xA;" name="interaction" label="%oa.orb.interaction" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@edgeMappings[name='ORB%20Interaction']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalExchange_OA.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source.createABFunctionalExchange(sourceView,targetView)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert/Remove Operational Interactions. Creates or deletes graphical objects corresponding to already existing Operational Interactions. Removing an Operational Interaction graphical object from the diagram does not delete the Operational Interaction from the model. This tool does not modify the semantic model.&#xD;&#xA;" name="interactions" label="%oa.orb.interactions" precondition="aql:(elementView.target->filter(fa::AbstractFunction)->size() > 0) and (elementView->filter(diagram::DDiagram)->size() = 0)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="displayedExchanges" computationExpression="aql:self.void2Null(elementView.getDisplayedFunctionalExchanges())"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectExchanges" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:element"/>
                  <parameters name="scope" value="aql:self.getAvailableFunctionalExchangesToInsertInArchitectureBlank()"/>
                  <parameters name="initialSelection" value="aql:displayedExchanges"/>
                  <parameters name="resultVariable" value="selectedExchanges"/>
                  <parameters name="wizardMessage" value="aql:'Select Functional Exchanges to show in ' + element.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedExchanges != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(selectedExchanges)">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (displayedExchanges->includes(i))">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i.showFunctionalExchangeInArchitectureBlank2(elementView)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:displayedExchanges">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedExchanges->includes(i))">
                      <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                        <parameters name="context" value="aql:elementView"/>
                        <parameters name="variable" value="edgeToDelete"/>
                        <parameters name="value" value="aql:elementView.getDiagramContainer().edges->select(edge | edge.target = i)->first()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:edgeToDelete">
                        <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:elementView"/>
                          <parameters name="variable" value="sourceNode"/>
                          <parameters name="value" value="aql:edgeToDelete.sourceNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                          <parameters name="context" value="aql:elementView"/>
                          <parameters name="variable" value="targetNode"/>
                          <parameters name="value" value="aql:edgeToDelete.targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:sourceNode.isABorderedNode()">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sourceNode">
                          <subModelOperations xsi:type="tool:If" conditionExpression="aql:(sourceNode.getIncomingEdges()->size() = 0) and (sourceNode.getOutgoingEdges()->size() = 0)">
                            <subModelOperations xsi:type="tool:DeleteView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:targetNode.isABorderedNode()">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:targetNode">
                          <subModelOperations xsi:type="tool:If" conditionExpression="aql:(targetNode.getIncomingEdges()->size() = 0) and (targetNode.getOutgoingEdges()->size() = 0)">
                            <subModelOperations xsi:type="tool:DeleteView"/>
                          </subModelOperations>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Manage Operational Activity Allocation. Creates new allocation relationships between the selected Operational Activities and the target Operational Role. The newly allocated Operational Activities are automatically displayed on the target Operational Role. This tool modifies the semantic model." name="manage.activity.allocation" label="%oa.orb.manage.activity.allocation" precondition="aql:container->filter(oa::Role)->size() > 0" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']/@subNodeMappings[name='ORB_OAAllocation']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Manage.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectRoles" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:container.getAvailableOperationalActivityAllocations()"/>
                  <parameters name="initialSelection" value="aql:self.void2Null(container.ownedActivityAllocations.targetElement)"/>
                  <parameters name="resultVariable" value="element"/>
                  <parameters name="wizardMessage" value="aql:'Select Operational Activities to allocate to ' + container.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (element = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(self.outgoingTraces->filter(oa::ActivityAllocation).targetElement)">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (element->includes(i))">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.eContents()->filter(diagram::DNode)->select(x | x.target = i)->first()">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.ownedActivityAllocations->select(ownedActivityAllocation | ownedActivityAllocation.targetElement = i)->first()">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.removeCapellaElement()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(element)">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (container.ownedActivityAllocations.targetElement->includes(i))">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ActivityAllocation" referenceName="ownedActivityAllocations">
                          <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="aql:i"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="aql:container"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i">
                        <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']/@subNodeMappings[name='ORB_OAAllocation']" containerViewExpression="aql:containerView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Insert/Remove Allocated Operational Activities. Creates or deletes graphical objects corresponding to already Operational Activities. Removing an Operational Activity graphical object from an Operational Role does not delete the allocation relationship towards the Operational Activity. This tool does not modify the semantic model." name="allocated.activities" label="%oa.orb.allocated.activities" precondition="aql:not (containerView.oclIsKindOf(diagram::DDiagram))" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']/@subNodeMappings[name='ORB_OAAllocation']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView">
              <subVariables xsi:type="tool:AcceleoVariable" name="visibleFunctions" computationExpression="aql:self.void2Null(containerView.ownedDiagramElements.target->filter(fa::AbstractFunction))"/>
            </viewVariable>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectOAs" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:container.getShowableAllocatedOperationalActivities()"/>
                  <parameters name="initialSelection" value="aql:visibleFunctions"/>
                  <parameters name="resultVariable" value="selectedFunctions"/>
                  <parameters name="wizardMessage" value="aql:'Select allocated Operational Activities to show in ' + container.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedFunctions = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.insertRemoveAllocatedFunctions(selectedFunctions)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert All Allocated Operational Activities. Creates graphical objects for all Operational Activities already allocated to all Operational Roles appearing on the diagram. This tool does not modify the semantic model.&#xD;&#xA;" name="all.allocated.activities" label="%oa.orb.all.allocated.activities" precondition="aql:elementView.oclIsKindOf(diagram::DDiagram) or element.oclIsKindOf(oa::Role)" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="visibleRoles" computationExpression="aql:elementView.getAllContainersNew()->select(x | x.target->filter(oa::Role)->size() > 0)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:For" expression="aql:visibleRoles">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:i">
                    <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(i.target.ownedActivityAllocations.targetElement)" iteratorName="j">
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (i.ownedDiagramElements.target->includes(j))">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:j">
                          <subModelOperations xsi:type="tool_1:CreateView" mapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']/@subNodeMappings[name='ORB_OAAllocation']" containerViewExpression="aql:i"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D OperationalActivities From Project Explorer" precondition="aql:element.oclIsKindOf(fa::AbstractFunction) and (element.subFunctions->size() = 0)" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Role%20Blank']/@defaultLayer/@containerMappings[name='ORB_Role1']/@subNodeMappings[name='ORB_OAAllocation']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element">
              <subVariables xsi:type="tool:AcceleoVariable" name="oldAllocations" computationExpression="aql:self.void2Null(element.incomingTraces->filter(oa::ActivityAllocation))"/>
            </element>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:oldAllocations->select(oldAllocation | oldAllocation.sourceElement = newSemanticContainer)->size() = 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:newSemanticContainer">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="ActivityAllocation" referenceName="ownedActivityAllocations">
                      <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="aql:element"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="aql:newSemanticContainer"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ReconnectEdgeDescription" name="OAIB Reconnect Exchanges" precondition="aql:element.isFunctionalExchangeReconnectable(sourceView.getDiagramContainer(),source,target)" reconnectionKind="RECONNECT_BOTH">
            <source name="source"/>
            <target name="target"/>
            <sourceView name="sourceView"/>
            <targetView name="targetView"/>
            <element name="element"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element.reconnectFunctionalExchange(source,target)"/>
            </initialOperation>
            <edgeView name="edgeView"/>
          </ownedTools>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%oa.orb.constraint" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%oa.orb.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%oa.orb.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV']"/>
          <reusedTools xsi:type="tool_1:ContainerDropDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
          <reusedTools xsi:type="tool:PopupMenu" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu']"/>
          <reusedTools xsi:type="tool:ToolDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']"/>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_3:SequenceDiagramDescription" name="Operational Interaction Scenario" label="%oa.oes" titleExpression="aql:self.name.addScenarioPrefix('[OES]')" domainClass="interaction.Scenario" preconditionExpression="aql:self.isValidEntityScenario()" endsOrdering="aql:self.makeIntersection(self.getOrderedInteractionFragments(), eventEnds)" instanceRolesOrdering="aql:self.ownedInstanceRoles">
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Drop%20Component']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraints%20From%20Project%20Explorer']"/>
      <dropDescriptions href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.executions.filter" label="%oa.oes.hide.executions.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.pre.post.conditions.filter" label="%oa.oes.hide.pre.post.conditions.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='preconditionMapping'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='postconditionMapping']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.filter" label="%oa.oes.show.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelOA']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.parameters.filter" label="%oa.oes.show.exchange.items.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelOA']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.filter" label="%oa.oes.show.functional.exchanges.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.exchange.items.filter" label="%oa.oes.show.functional.exchanges.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.parameters.filter" label="%oa.oes.show.functional.exchanges.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.exchange.items.parameters.filter" label="%oa.oes.show.functional.exchanges.exchange.items.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.component.exchanges.exchange.items.filter" label="%oa.oes.show.component.exchanges.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.ce.param.filter" label="%oa.oes.show.ce.param.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.ce.ei.param.filter" label="%oa.oes.show.ce.ei.param.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.context.filter" label="%oa.oes.show.exchange.context.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.fe.exchange.context.filter" label="%oa.oes.show.fe.exchange.context.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.ce.exchange.context.filter" label="%oa.oes.show.ce.exchange.context.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%oa.oes.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        </filters>
      </filters>
      <diagramInitialisation>
        <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self">
          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="INTERACTION"/>
        </firstModelOperations>
      </diagramInitialisation>
      <defaultLayer name="Default">
        <nodeMappings xsi:type="description_3:InstanceRoleMapping" name="Instancerole Mapping OA" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20instance%20role%20OA']" semanticCandidatesExpression="aql:self.ownedInstanceRoles" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole">
          <borderedNodeMappings xsi:type="description_3:ExecutionMapping" name="default execution OA" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole" reusedBorderedNodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']/@borderedNodeMappings[name='InteractionState%20Mapping%20OA']" startingEndFinderExpression="aql:self" finishingEndFinderExpression="aql:self">
            <borderedNodeMappings xsi:type="description_3:ExecutionMapping" name="Execution OA" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" semanticCandidatesExpression="aql:self.getExecutionsFromInstanceRoleOrParentExecution()" synchronizationLock="true" domainClass="interaction.Execution" reusedBorderedNodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']" startingEndFinderExpression="aql:self.start" finishingEndFinderExpression="aql:self.finish">
              <borderedNodeMappings xsi:type="description_3:StateMapping" name="InteractionState Mapping OA" semanticCandidatesExpression="aql:self.getInteractionStatesOnExecution()" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.StateFragment" startingEndFinderExpression="aql:self.start" finishingEndFinderExpression="aql:self.finish">
                <deletionDescription href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']"/>
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.relatedAbstractFunction.name" labelPosition="node" resizeKind="NSEW" width="10" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Activity_Label_Orange']"/>
                  <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange']"/>
                </style>
                <conditionnalStyles predicateExpression="aql:not self.relatedAbstractState->isEmpty() and self.relatedAbstractState->filter(capellacommon::Mode)->size() > 0">
                  <style xsi:type="style:EllipseNodeDescription" showIcon="false" labelExpression="aql:self.relatedAbstractState.name" labelPosition="node" resizeKind="NSEW" horizontalDiameterComputationExpression="10" verticalDiameterComputationExpression="3">
                    <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateMode_Border_Gray']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Mode_Gray']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:not self.relatedAbstractState->isEmpty() and self.relatedAbstractState->filter(capellacommon::Mode)->size() = 0">
                  <style xsi:type="style:EllipseNodeDescription" showIcon="false" labelExpression="aql:self.relatedAbstractState.name" labelPosition="node" resizeKind="NSEW" horizontalDiameterComputationExpression="10" verticalDiameterComputationExpression="3">
                    <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateMode_Border_Gray']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_State_Gray']"/>
                  </style>
                </conditionnalStyles>
              </borderedNodeMappings>
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="" resizeKind="NSEW" width="1" height="3">
                <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']"/>
                <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']"/>
                <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']"/>
              </style>
              <conditionnalStyles predicateExpression="service:isFunctionalExecution()">
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="" resizeKind="NSEW" width="1" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Activity_Label_Orange']"/>
                  <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange']"/>
                </style>
              </conditionnalStyles>
            </borderedNodeMappings>
            <borderedNodeMappings xsi:type="description_3:EndOfLifeMapping" name="Lifeline deletion mapping OA" preconditionExpression="aql:self.eContainer().ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE).receivingEnd.covered->includes(self)" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20OA']" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:''" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/eol.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <borderedNodeMappings xsi:type="description_3:EndOfLifeMapping" name="endOfLifeOA" preconditionExpression="aql:not (self.eContainer().ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE).receivingEnd.covered->includes(self))" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.InstanceRole">
              <deletionDescription href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20System%20Actors']/@defaultLayer/@toolSections.0/@ownedTools[name='No%20Delete']"/>
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:''" sizeComputationExpression="1" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/handlelifeline.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="" sizeComputationExpression="" labelPosition="node" resizeKind="NSEW" width="1" height="40">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Lifeline_Gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            </style>
          </borderedNodeMappings>
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getInstanceRoleLabel()" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.abstractType->filter(cs::Component)->size() > 0 and not (self.isInternalLCForInstanceRole())">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getInstanceRoleLabel()" labelPosition="node" resizeKind="EAST_WEST" width="15" height="5">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']"/>
              <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance.abstractType->filter(cs::Component)->size() > 0 and self.isInternalLCForInstanceRole()">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getInstanceRoleLabel()" labelPosition="node" resizeKind="EAST_WEST" width="15" height="5">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.representedInstance->filter(oa::Role)->size() > 0">
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getInstanceRoleLabel()" labelPosition="node" resizeKind="EAST_WEST" width="15" height="5">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_purple']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_OperationalRole_Purple']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings xsi:type="description_3:InstanceRoleMapping" name="hideSequenceLabelOA" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20OA']" semanticCandidatesExpression="ocl:Set {}" domainClass="EObject"/>
        <nodeMappings xsi:type="description_3:ObservationPointMapping" name="ObservationPointOA" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20OA']" semanticCandidatesExpression="aql:self.makeUnion(self.ownedConstraintDurations.start, self.ownedConstraintDurations.finish)" semanticElements="service:getAssociatedSemanticElements()" domainClass="InteractionFragment">
          <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="" sizeComputationExpression="1" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/observation.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="preconditionMapping" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" semanticCandidatesExpression="aql:self.preCondition" domainClass="capellacore.Constraint">
          <style xsi:type="style:NoteDescription" showIcon="false" labelExpression="aql:'pre:' + self.getConstraintLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="postconditionMapping" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" semanticCandidatesExpression="aql:self.postCondition" domainClass="capellacore.Constraint">
          <style xsi:type="style:NoteDescription" showIcon="false" labelExpression="aql:'post:' + self.getConstraintLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </nodeMappings>
        <edgeMappings xsi:type="description_3:BasicMessageMapping" name="Basic message mapping OA" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20basic%20message%20OA']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::SYNCHRONOUS_CALL or ownedMessage.kind = interaction::MessageKind::ASYNCHRONOUS_CALL)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="aql:self.sendingEnd" receivingEndFinderExpression="aql:self.receivingEnd">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_3:ReturnMessageMapping" name="return message mapping OA" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::REPLY)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="aql:self.sendingEnd" receivingEndFinderExpression="aql:self.receivingEnd" invocationMessageFinderExpression="aql:self.getInvocationMessage()">
          <style lineStyle="dash">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_3:CreationMessageMapping" name="creation message mapping OA" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::CREATE)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="aql:self.sendingEnd" receivingEndFinderExpression="aql:self.receivingEnd">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_3:DestructionMessageMapping" name="destruction message mapping OA" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE)" semanticElements="service:getAssociatedSemanticElements()" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Lifeline%20deletion%20mapping%20OA']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="aql:self.sendingEnd" receivingEndFinderExpression="aql:self.receivingEnd">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_3:BasicMessageMapping" name="Timer message mapping OA" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::TIMER)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="aql:self.getSendingEndEvent()" receivingEndFinderExpression="aql:self.getReceivingEndEvent()">
          <deletionDescription href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']"/>
          <labelDirectEdit href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20basic%20message%20DF']"/>
          <style sourceArrow="Diamond">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="ConstraintDurationOA" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Set%20Duration']" semanticCandidatesExpression="feature:ownedConstraintDurations" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='ObservationPointOA']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='ObservationPointOA']" targetFinderExpression="aql:self.finish" sourceFinderExpression="aql:self.start" domainClass="interaction.ConstraintDuration" useDomainElement="true">
          <style xsi:type="style:BracketEdgeStyleDescription" sourceArrow="InputArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.duration">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings xsi:type="description_3:InteractionUseMapping" name="InteractionUse OA" semanticCandidatesExpression="aql:self.ownedTimeLapses->filter(interaction::InteractionUse)" semanticElements="aql:self.makeUnion(self, self.referencedScenario, self.referencedScenario.eContainerOrSelf(interaction::AbstractCapability))" domainClass="interaction.InteractionUse" startingEndFinderExpression="aql:self.start" finishingEndFinderExpression="aql:self.finish" coveredLifelinesExpression="aql:self.getCoveredFromAbstractFragment()" centerLabelExpression="aql:self.referencedScenario.name">
          <deletionDescription href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']"/>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression=" ref" labelAlignment="LEFT">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_CombinedFragment_Gray']"/>
            <labelBorderStyle href="environment:/viewpoint#//@labelBorderStyles/@labelBorderStyleDescriptions.0"/>
          </style>
        </containerMappings>
        <containerMappings xsi:type="description_3:CombinedFragmentMapping" name="CombinedFragmentOA" semanticCandidatesExpression="aql:self.ownedTimeLapses->filter(interaction::CombinedFragment)" synchronizationLock="true" domainClass="interaction.CombinedFragment" startingEndFinderExpression="aql:self.start" finishingEndFinderExpression="aql:self.finish" coveredLifelinesExpression="aql:self.getCoveredFromAbstractFragment()">
          <deletionDescription href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']"/>
          <subContainerMappings xsi:type="description_3:OperandMapping" name="OperandOA" semanticCandidatesExpression="aql:self.referencedOperands" synchronizationLock="true" domainClass="interaction.InteractionOperand" startingEndFinderExpression="aql:self.getOperandBegin()" finishingEndFinderExpression="aql:self.getOperandEnd()">
            <deletionDescription href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']"/>
            <labelDirectEdit href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Direct%20edit%20operand']"/>
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.getOperandLabel()" labelAlignment="LEFT">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_CombinedFragment_Gray']"/>
            </style>
          </subContainerMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.operator.toString()" labelAlignment="LEFT">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_CombinedFragment_Gray']"/>
            <labelBorderStyle href="environment:/viewpoint#//@labelBorderStyles/@labelBorderStyleDescriptions.0"/>
          </style>
        </containerMappings>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Scenario_ContrainedElements']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Scenario_ExchangeContext']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']"/>
        <toolSections name="tools section" label="Scenarios Elements">
          <ownedTools xsi:type="tool_1:DiagramCreationDescription" name="Entity Scenario " precondition="aql:self.isInLib()" titleExpression="aql:self.name.addScenarioPrefix('[OES]') + ' - Operational Entity Scenario'" browseExpression="aql:self.ownedScenarios->last()" diagramDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']">
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.Scenario" referenceName="ownedScenarios">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:diagramName"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramNavigationDescription" name="Existing Entity Scenario" diagramDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="component" label="%oa.oes.component" precondition="aql:self.eContainer(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ComponentInstance.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)">
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self->filter(oa::OperationalAnalysis)->size() != 0">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.ownedEntityPkg">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="Entity" referenceName="ownedEntities" variableName="component">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool:SetValue" featureName="representedInstance" valueExpression="aql:component.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="actor" label="%oa.oes.actor" precondition="aql:self.eContainer(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/OperationalActor.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)">
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self->filter(oa::OperationalAnalysis)->size() != 0">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.ownedEntityPkg">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="Entity" referenceName="ownedEntities" variableName="actor">
                        <subModelOperations xsi:type="tool:SetValue" featureName="actor" valueExpression="true"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="human" valueExpression="true"/>
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool:SetValue" featureName="representedInstance" valueExpression="aql:actor.abstractTypedElements->at(1)"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:actor.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(actor)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="role" label="%oa.oes.role" precondition="aql:self.eContainer(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Role.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)">
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self->filter(oa::OperationalAnalysis)->size() != 0">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.ownedRolePkg">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="Role" referenceName="ownedRoles" variableName="component">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool:SetValue" featureName="representedInstance" valueExpression="aql:component"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="GroupOESActorsRolesEntities">
            <tools xsi:type="tool_2:InstanceRoleCreationTool" name="components" label="%oa.oes.components" precondition="aql:self.eContainer(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="Select Function" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="aql:self.void2Null(container.getOESScopeInsertEntitiesRoles())"/>
                    <parameters name="initialSelection" value="aql:containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance"/>
                    <parameters name="wizardMessage" value=""/>
                    <parameters name="resultVariable" value="result"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(result)">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:i != 'WIZARD_CANCELED'">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                        <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance->includes(i))">
                          <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                            <subModelOperations xsi:type="tool:SetValue" featureName="representedInstance" valueExpression="aql:i"/>
                            <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:i.name"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(i.abstractType)"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles">
                    <parameters name="result" value="aql:self.void2Null(result)"/>
                    <parameters name="current" value="aql:containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole)"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
            <tools xsi:type="tool_2:InstanceRoleCreationTool" documentation="Creates a new lifeline representing an existing component or the system. This tool allows having multiple lifelines representing the same component." name="add.multiple.lifelines.for.an.existing.entity.actor" label="%oa.oes.add.multiple.lifelines.for.an.existing.entity.actor" precondition="aql:self.eContainer(ctx::SystemAnalysis)->size() = 0" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AddInstanceRole.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="Select Component" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="aql:container"/>
                    <parameters name="scope" value="service:getAllMultiInstanceRoleParts"/>
                    <parameters name="wizardMessage" value=""/>
                    <parameters name="resultVariable" value="result"/>
                    <parameters name="multiple" value="false"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:result"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:result != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                        <subModelOperations xsi:type="tool:SetValue" featureName="representedInstance" valueExpression="aql:result"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:result.name"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(result.abstractType)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <predecessor name="predecessor"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Sequence Message invoking an Operational Interaction with return branch between the Source and Target Lifelines (representing existing Operational Entities Parts). This tool opens a selection wizard to select an available existing Interaction or to create a new one between existing/new allocated  Operational Activities.&#xD;&#xA;This tool is masked as soon as a Communication Mean is displayed on the scenario. " name="component.exchange.with.return.branch" label="%oa.oes.component.exchange.with.return.branch" precondition="aql:self.allowMessageCreation2(preSource, preTarget, false, messageEndBefore, messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20OA']" extraSourceMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']" extraTargetMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']">
            <filters precondition="aql:self.target.eContainerOrSelf(interaction::Scenario).ownedEvents.operation->filter(fa::ComponentExchange)->size() > 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedInteractionFragments"/>
            </filters>
            <sourceVariable name="source">
              <subVariables xsi:type="tool:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.getScenario()">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.traceScenario(messageEndBefore)"/>
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="exchangeType" value="FE"/>
                  <parameters name="sourceIR" value="aql:sourceIR"/>
                  <parameters name="targetIR" value="aql:targetIR"/>
                  <parameters name="messageKind" value="SYNCHRONOUS_CALL"/>
                  <parameters name="resultVariable" value="result"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationReply"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationReply"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                  <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="SYNCHRONOUS_CALL"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="reply">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:self.newCallName() + '_reply'"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="REPLY"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessage(call)"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + self.newCallName()"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Send Call ' + self.newCallName()"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingReplyEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Send Call ' + self.newCallName()"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventSentOperationReply"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:reply">
                    <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingReplyEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingReplyEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + self.newCallName()"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(sendingReplyEnd)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(sendingReplyEnd)"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationReply"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:reply">
                    <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:receivingReplyEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:reply">
                  <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingReplyEnd"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingReplyEnd"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                  <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                  <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:sendingReplyEnd"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="affected" value="aql:self.void2Null(result)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Sequence Message invoking an Operational Interaction without return branch between the Source and Target Lifelines (representing existing Operational Entities Parts). This tool opens a selection wizard to select an available existing Interaction or to create a new one between existing/new allocated  Operational Activities.&#xD;&#xA;This tool is masked as soon as a Communication Mean is displayed on the scenario." name="component.exchange" label="%oa.oes.component.exchange" precondition="aql:self.allowMessageCreation2(preSource, preTarget, false, messageEndBefore, messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20OA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif">
            <filters precondition="aql:self.target.eContainerOrSelf(interaction::Scenario).ownedEvents.operation->filter(fa::ComponentExchange)->size() > 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedInteractionFragments"/>
            </filters>
            <sourceVariable name="source">
              <subVariables xsi:type="tool:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="exchangeType" value="FE"/>
                  <parameters name="sourceIR" value="aql:sourceIR"/>
                  <parameters name="targetIR" value="aql:targetIR"/>
                  <parameters name="messageKind" value="ASYNCHRONOUS_CALL"/>
                  <parameters name="resultVariable" value="result"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                  <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                  <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="endExec"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                  <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:end"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="affected" value="aql:self.void2Null(result)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Sequence Message invoking a Communication Mean with return branch between the Source and Target Lifelines representing existing Operational Entities Parts. This tool opens a selection wizard to select an available existing Communication Mean or to create a new one between these Operational Entities.&#xD;&#xA;This tool is masked as soon as an Operational Interaction is displayed on the scenario." name="functional.exchange.with.return.branch" label="%oa.oes.functional.exchange.with.return.branch" precondition="aql:preTarget.representedInstance->filter(oa::Role)->size() = 0" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20OA']" extraSourceMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']" extraTargetMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']" connectionStartPrecondition="aql:preSource.representedInstance->filter(oa::Role)->size() = 0">
            <filters precondition="aql:self.target.eContainerOrSelf(interaction::Scenario).ownedEvents.operation->filter(fa::FunctionalExchange)->size() > 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedInteractionFragments"/>
            </filters>
            <sourceVariable name="source">
              <subVariables xsi:type="tool:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.getScenario()">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.traceScenario(messageEndBefore)"/>
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="exchangeType" value="CE"/>
                  <parameters name="sourceIR" value="aql:sourceIR"/>
                  <parameters name="targetIR" value="aql:targetIR"/>
                  <parameters name="messageKind" value="SYNCHRONOUS_CALL"/>
                  <parameters name="resultVariable" value="result"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationReply"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationReply"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                  <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="SYNCHRONOUS_CALL"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="reply">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:self.newCallName() + '_reply'"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="REPLY"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessage(call)"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + self.newCallName()"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Send Call ' + self.newCallName()"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingReplyEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Send Call ' + self.newCallName()"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventSentOperationReply"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:reply">
                    <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingReplyEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingReplyEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + self.newCallName()"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(sendingReplyEnd)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(sendingReplyEnd)"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationReply"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:reply">
                    <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:receivingReplyEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:reply">
                  <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingReplyEnd"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingReplyEnd"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                  <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                  <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:sendingReplyEnd"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="affected" value="aql:self.void2Null(result)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Sequence Message invoking a Communication Mean with return branch between the Source and Target Lifelines representing existing Operational Entities Parts. This tool opens a selection wizard to select an available existing Communication Mean or to create a new one between these Operational Entities." name="functional.exchange" label="%oa.oes.functional.exchange" precondition="aql:preTarget.representedInstance->filter(oa::Role)->size() = 0" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20OA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif" connectionStartPrecondition="aql:preSource.representedInstance->filter(oa::Role)->size() = 0">
            <filters precondition="aql:self.target.eContainerOrSelf(interaction::Scenario).ownedEvents.operation->filter(fa::FunctionalExchange)->size() > 0" elementsToListen="aql:self.target.eContainerOrSelf(interaction::Scenario)">
              <listeners domainClass="interaction.Scenario" featureName="ownedInteractionFragments"/>
            </filters>
            <sourceVariable name="source">
              <subVariables xsi:type="tool:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="exchangeType" value="CE"/>
                  <parameters name="sourceIR" value="aql:sourceIR"/>
                  <parameters name="targetIR" value="aql:targetIR"/>
                  <parameters name="messageKind" value="ASYNCHRONOUS_CALL"/>
                  <parameters name="resultVariable" value="result"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                  <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                  <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="endExec"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                  <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:end"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="affected" value="aql:self.void2Null(result)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Sequence Messages">
            <tools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Create Sequence Message invoking an Operational Interaction or Communication Mean between the Source and Target Lifelines representing existing Operational Entities Parts. This tool opens a selection wizard to select an available existing Operational Interaction or Communication Mean." name="create.message" label="%oa.oes.create.message" precondition="aql:self.allowCreateMessageCreation2(preTargetView.target,preSourceView.target,messageEndBefore,messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20OA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CreateSequenceMessage.gif">
              <sourceVariable name="source">
                <subVariables xsi:type="tool:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </sourceVariable>
              <targetVariable name="target">
                <subVariables xsi:type="tool:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </targetVariable>
              <sourceViewVariable name="sourceVIew"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                    <parameters name="message" value="aql:call"/>
                    <parameters name="exchangeType" value="aql:if self.ownedEvents.operation->filter(fa::FunctionalExchange)->size() > 0 then 'FE' else 'CE' endif"/>
                    <parameters name="sourceIR" value="aql:sourceIR"/>
                    <parameters name="targetIR" value="aql:targetIR"/>
                    <parameters name="messageKind" value="CREATE"/>
                    <parameters name="resultVariable" value="result"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:result != 'CANCELED_DIALOG'">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="CREATE"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="create call"/>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(sendingEnd)"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(sendingEnd)"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                      <parameters name="message" value="aql:call"/>
                      <parameters name="affected" value="aql:self.void2Null(result)"/>
                      <parameters name="portStrategy" value="aql:portStrategy"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="messageEndAfter"/>
            </tools>
            <tools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Create Sequence Message invoking an Operational Interaction or Communication Mean between the Source and Target Lifelines representing existing Operational Entities Parts. This tool opens a selection wizard to select an available existing Operational Interaction or Communication Mean." name="delete.message" label="%oa.oes.delete.message" precondition="aql:self.allowDeleteMessageCreation2(preTargetView.target,preSourceView.target,messageEndBefore,messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20OA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/DeleteSequenceMessage.gif">
              <sourceVariable name="source">
                <subVariables xsi:type="tool:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </sourceVariable>
              <targetVariable name="target">
                <subVariables xsi:type="tool:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </targetVariable>
              <sourceViewVariable name="sourceVIew"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                    <parameters name="message" value="aql:call"/>
                    <parameters name="exchangeType" value="aql:if self.ownedEvents.operation->filter(fa::FunctionalExchange)->size() > 0 then 'FE' else 'CE' endif"/>
                    <parameters name="sourceIR" value="aql:sourceIR"/>
                    <parameters name="targetIR" value="aql:targetIR"/>
                    <parameters name="messageKind" value="DELETE"/>
                    <parameters name="resultVariable" value="result"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:result != 'CANCELED_DIALOG'">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                      <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="DELETE"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="delete call"/>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(sendingEnd)"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(sendingEnd)"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                        <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                      <parameters name="message" value="aql:call"/>
                      <parameters name="affected" value="aql:self.void2Null(result)"/>
                      <parameters name="portStrategy" value="aql:portStrategy"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="messageEndAfter"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Timers">
            <tools xsi:type="tool_2:MessageCreationTool" documentation="Create a new sequence message to arm a timer." name="arm.timer" label="%oa.oes.arm.timer" precondition="aql:preSource = preTarget" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Timer%20message%20mapping%20OA']">
              <sourceVariable name="source">
                <subVariables xsi:type="tool:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </sourceVariable>
              <targetVariable name="target">
                <subVariables xsi:type="tool:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </targetVariable>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.ArmTimerEvent" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.ArmTimerEvent" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="TIMER"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="Arm Timer"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter != null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter = null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="endExec"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:end"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="messageEndAfter"/>
            </tools>
            <tools xsi:type="tool_2:MessageCreationTool" documentation="Create a new sequence message to cancel a prieviously armed timer." name="cancel.timer" label="%oa.oes.cancel.timer" precondition="aql:preSource = preTarget" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Timer%20message%20mapping%20OA']">
              <sourceVariable name="source">
                <subVariables xsi:type="tool:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </sourceVariable>
              <targetVariable name="target">
                <subVariables xsi:type="tool:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
              </targetVariable>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.CancelTimerEvent" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.CancelTimerEvent" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="TIMER"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="Cancel Timer"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter != null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter = null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                      <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="endExec"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:end"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="messageEndAfter"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="delete capella elements OA">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="deleteCapellaElement" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteExternalAction"/>
              </firstModelOperations>
            </initialOperation>
            <hook id="org.polarsys.capella.core.sirius.analysis.delete.CapellaDeleteActionHook"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="no delete OA">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ReorderTool" name="reorder" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Timer%20message%20mapping%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUse%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']/@borderedNodeMappings[name='InteractionState%20Mapping%20OA']">
            <startingEndPredecessorAfter name="startingEndPredecessorAfter"/>
            <finishingEndPredecessorAfter name="finishingEndPredecessorAfter"/>
            <onEventMovedOperation>
              <firstModelOperations xsi:type="tool:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.actions.extensions.DoReorder" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.DoReorder">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self"/>
                <parameters name="context" value="aql:self"/>
                <parameters name="STARTING_END_PREDECESSOR" value="aql:startingEndPredecessorAfter.semanticEnd"/>
                <parameters name="FINISHING_END_PREDECESSOR" value="aql:finishingEndPredecessorAfter.semanticEnd"/>
              </firstModelOperations>
            </onEventMovedOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InteractionUseCreationTool" documentation="Creates a Reference to existing Operational Entity Scenario covering Target Lifelines representing existing Operational Entity/Actor/Role Parts." name="reference" label="%oa.oes.reference" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUse%20OA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/InteractionUse.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="select Scenario" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:self.eContainerOrSelf(interaction::Scenario)"/>
                  <parameters name="scope" value="aql:self.void2Null(self.eContainerOrSelf(interaction::Scenario).getReferenceScope())"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedScenario"/>
                  <parameters name="wizardMessage" value="Select a Scenario"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:selectedScenario != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionUse" referenceName="ownedTimeLapses" variableName="interactionUse">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="interactionUse"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="referencedScenario" valueExpression="aql:selectedScenario"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
            <coveredLifelines name="coveredLifeLines"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Operand Group">
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with the kind LOOP covering Target Lifelines representing existing Component/Actor Parts." name="loop" label="%oa.oes.loop" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentOA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentOA']/@subContainerMappings[name='OperandOA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="operand 1"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="combined fragment"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="operator" valueExpression="LOOP"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with the kind ALT covering Target Lifelines representing existing Component/Actor Parts. Operands should be added to the combined Fragment." name="alt" label="%oa.oes.alt" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentOA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentOA']/@subContainerMappings[name='OperandOA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="operand 1"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="combined fragment"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="operator" valueExpression="ALT"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with the kind PAR covering Target Lifelines representing existing Component/Actor Parts. Operands should be added to the combined Fragment." name="par" label="%oa.oes.par" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentOA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentOA']/@subContainerMappings[name='OperandOA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="operand 1"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="combined fragment"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="operator" valueExpression="PAR"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with selected kind covering Target Lifelines representing existing Component/Actor Parts. Operands should be added to the combined Fragment." name="other.combined.fragment" label="%oa.oes.other.combined.fragment" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentOA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentOA']/@subContainerMappings[name='OperandOA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="SelectElementFromListWizard" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="aql:container.eContainerOrSelf(interaction::Scenario)"/>
                    <parameters name="scope" value="aql:self.getOperators()"/>
                    <parameters name="multiple" value="false"/>
                    <parameters name="resultVariable" value="selectedOperator"/>
                    <parameters name="wizardMessage" value="Select an operator for the Combined Fragment."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:selectedOperator != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="end"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="start"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="operand 1"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="combined fragment"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:startFE"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="operator" valueExpression="aql:selectedOperator.toString()"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_2:OperandCreationTool" documentation="Creates a new Operand within the target Combined Fragment. " name="operand" label="%oa.oes.operand" precondition="aql:container.operator != 'LOOP'" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentOA']/@subContainerMappings[name='OperandOA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/InteractionOperand.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="operand"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:container.start.coveredInstanceRoles"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.getFragmentFromContained()">
                    <subModelOperations xsi:type="tool:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="rename instance role OA" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.representedInstance">
                <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="rename basic message OA" inputLabelExpression="aql:self.sendingEnd.event.operation.name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.sendingEnd.event.operation">
                <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:StateCreationTool" documentation="Create a State Fragment referencing an existing Operational Activity allocated to Target Operational Entity. This tool opens a selection wizard to select an available Operational Activity." name="allocated.function" label="%oa.oes.allocated.function" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']/@borderedNodeMappings[name='InteractionState%20Mapping%20OA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="select Function" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.void2Null(self.getFunctionsForStateAtOA(self.getCoveredFromExecOrIR(container).representedInstance))"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedFunction"/>
                  <parameters name="wizardMessage" value="Select a Function"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:selectedFunction != 'WIZARD_CANCELED' and not selectedFunction->isEmpty()">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionState">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="relatedAbstractFunction" valueExpression="aql:selectedFunction"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionStateEnd">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="relatedAbstractFunction" valueExpression="aql:selectedFunction"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(interactionState)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.StateFragment" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool:SetValue" featureName="relatedAbstractFunction" valueExpression="aql:selectedFunction"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:interactionState"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:interactionStateEnd"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="startingEndPredecessor"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:StateCreationTool" documentation="Create a State Fragment referencing an existing State/Mode of the Target Operational Entity. This tool opens a selection wizard to select an available State/Mode." name="state.mode" label="%oa.oes.state.mode" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA']/@borderedNodeMappings[name='InteractionState%20Mapping%20OA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="select State" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.getCoveredFromExecOrIR(container).representedInstance.getISStateModes()"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedState"/>
                  <parameters name="wizardMessage" value="Select a Mode/State"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:selectedState != 'WIZARD_CANCELED' and not selectedState->isEmpty()">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionState">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="relatedAbstractState" valueExpression="aql:selectedState"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionStateEnd">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="relatedAbstractState" valueExpression="aql:selectedState"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(interactionState)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.StateFragment" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool:SetValue" featureName="relatedAbstractState" valueExpression="aql:selectedState"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:interactionState"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:interactionStateEnd"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="startingEndPredecessor"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="Drop Component" precondition="aql:self.makeUnion(element->filter(information::AbstractInstance)->size(), element->filter(cs::Component)->size()) != 0" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:newSemanticContainer">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.isValidScenarioDrop(self.eContainerOrSelf(interaction::Scenario),element)">
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:element.eContainerOrSelf(capellacore::ModellingArchitecture) = newSemanticContainer.eContainerOrSelf(capellacore::ModellingArchitecture)">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:element.name"/>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:element->filter(oa::Role)->size() != 0">
                        <subModelOperations xsi:type="tool:SetValue" featureName="representedInstance" valueExpression="aql:element"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:element->filter(oa::Role)->size() = 0">
                        <subModelOperations xsi:type="tool:SetValue" featureName="representedInstance" valueExpression="aql:element.abstractTypedElements->first()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Create a new constraint duration between two interaction fragments of the sequence diagram." name="duration" label="%oa.oes.duration" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='ConstraintDurationOA']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/BracketEdgeStyle.gif" extraSourceMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='endOfLifeOA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20OA']" extraTargetMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='endOfLifeOA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']/@borderedNodeMappings[name='default%20execution%20OA']/@borderedNodeMappings[name='Execution%20OA'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20OA']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="ConstraintDuration" referenceName="ownedConstraintDurations" variableName="duration">
                  <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:self.getCorrespondingIFStart(source,target)"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:self.getCorrespondingIFFinish(target,source)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Constraints From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" dragSource="PROJECT_EXPLORER">
            <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint']"/>
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="Set Duration" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:SetValue" featureName="duration" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleReorderTool" name="IRReorder" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='Instancerole%20Mapping%20OA']">
            <predecessorBefore name="predecessorBefore"/>
            <predecessorAfter name="predecessorAfter"/>
            <instanceRoleMoved>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.actions.extensions.doIRReorder" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.doIRReorder">
                  <parameters name="PREDECESSOR_BEFORE" value="aql:predecessorBefore"/>
                  <parameters name="PREDECESSOR_AFTER" value="aql:predecessorAfter"/>
                  <parameters name="SCENARIO" value="aql:self.eContainerOrSelf(interaction::Scenario)"/>
                </subModelOperations>
              </firstModelOperations>
            </instanceRoleMoved>
          </ownedTools>
          <reusedTools xsi:type="tool:ToolDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='exchange.context']"/>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%oa.oes.constraint" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%oa.oes.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Scenario_ContrainedElements']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%oa.oes.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,false)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV']"/>
          <reusedTools xsi:type="tool_1:ContainerDropDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
          <reusedTools xsi:type="tool:PopupMenu" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu']"/>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_3:SequenceDiagramDescription" name="Activity Interaction Scenario" label="%oa.oas" titleExpression="aql:self.name.addScenarioPrefix('[OAS]')" domainClass="interaction.Scenario" preconditionExpression="aql:self.isValidActivityScenario()" endsOrdering="aql:self.makeIntersection(self.getOrderedInteractionFragments(), eventEnds)" instanceRolesOrdering="aql:self.ownedInstanceRoles">
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Drop%20Component']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraints%20From%20Project%20Explorer']"/>
      <dropDescriptions href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.executions.filter" label="%oa.oas.hide.executions.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.pre.post.conditions.filter" label="%oa.oas.hide.pre.post.conditions.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='postconditionMapping'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='preconditionMapping']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.filter" label="%oa.oas.show.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabel%20AIS']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.parameters.filter" label="%oa.oas.show.exchange.items.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabel%20AIS']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.exchange.items.filter" label="%oa.oas.show.functional.exchanges.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.parameters.filter" label="%oa.oas.show.functional.exchanges.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.exchange.items.parameters.filter" label="%oa.oas.show.functional.exchanges.exchange.items.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.context.filter" label="%oa.oas.show.exchange.context.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.fe.exchange.context.filter" label="%oa.oas.show.fe.exchange.context.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_3:InstanceRoleMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Exchanges%20Scenario']/@defaultLayer/@nodeMappings[name='hideSequenceLabelDF']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%oa.oas.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        </filters>
      </filters>
      <diagramInitialisation>
        <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self">
          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="INTERACTION"/>
        </firstModelOperations>
      </diagramInitialisation>
      <defaultLayer name="Default">
        <nodeMappings xsi:type="description_3:InstanceRoleMapping" name="InstanceRoleMaping AIS" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20instance%20role%20AIS']" semanticCandidatesExpression="aql:self.ownedInstanceRoles" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.InstanceRole">
          <borderedNodeMappings xsi:type="description_3:ExecutionMapping" name="default execution AIS" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole" reusedBorderedNodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']/@borderedNodeMappings[name='InteractionState%20Mapping%20AIS']" startingEndFinderExpression="aql:self" finishingEndFinderExpression="aql:self">
            <borderedNodeMappings xsi:type="description_3:ExecutionMapping" name="Execution AIS" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" semanticCandidatesExpression="aql:self.getExecutionsFromInstanceRoleOrParentExecution()" synchronizationLock="true" domainClass="interaction.Execution" reusedBorderedNodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']" startingEndFinderExpression="aql:self.start" finishingEndFinderExpression="aql:self.finish">
              <borderedNodeMappings xsi:type="description_3:StateMapping" name="InteractionState Mapping AIS" semanticCandidatesExpression="aql:self.getInteractionStatesOnExecution()" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.StateFragment" startingEndFinderExpression="aql:self.start" finishingEndFinderExpression="aql:self.finish">
                <deletionDescription href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='System%20Function%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']"/>
                <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.relatedAbstractFunction.name" labelPosition="node" resizeKind="NSEW" width="10" height="3">
                  <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
                  <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Activity_Label_Orange']"/>
                  <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange']"/>
                </style>
                <conditionnalStyles predicateExpression="aql:not self.relatedAbstractState->isEmpty() and self.relatedAbstractState->filter(capellacommon::Mode)->size() > 0">
                  <style xsi:type="style:EllipseNodeDescription" showIcon="false" labelExpression="aql:self.relatedAbstractState.name" labelPosition="node" resizeKind="NSEW" horizontalDiameterComputationExpression="10" verticalDiameterComputationExpression="3">
                    <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateMode_Border_Gray']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Mode_Gray']"/>
                  </style>
                </conditionnalStyles>
                <conditionnalStyles predicateExpression="aql:not self.relatedAbstractState->isEmpty() and self.relatedAbstractState->filter(capellacommon::Mode)->size() = 0">
                  <style xsi:type="style:EllipseNodeDescription" showIcon="false" labelExpression="aql:self.relatedAbstractState.name" labelPosition="node" resizeKind="NSEW" horizontalDiameterComputationExpression="10" verticalDiameterComputationExpression="3">
                    <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_StateMode_Border_Gray']"/>
                    <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                    <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_State_Gray']"/>
                  </style>
                </conditionnalStyles>
              </borderedNodeMappings>
              <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="" resizeKind="NSEW" width="1" height="3">
                <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
                <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Activity_Label_Orange']"/>
                <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange']"/>
              </style>
            </borderedNodeMappings>
            <borderedNodeMappings xsi:type="description_3:EndOfLifeMapping" name="Lifeline deletion mapping AIS" preconditionExpression="aql:self.eContainer().ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE).receivingEnd.covered->includes(self)" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20AIS']" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" domainClass="interaction.InstanceRole">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:''" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/eol.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <borderedNodeMappings xsi:type="description_3:EndOfLifeMapping" name="endOfLifeAIS" preconditionExpression="aql:not (self.eContainer().ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE).receivingEnd.covered->includes(self))" semanticCandidatesExpression="aql:self" semanticElements="service:getAssociatedSemanticElements()" domainClass="interaction.InstanceRole">
              <deletionDescription href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Package%20Dependencies']/@defaultLayer/@toolSections.0/@ownedTools[name='No%20Delete']"/>
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="aql:''" sizeComputationExpression="1" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/handlelifeline.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </borderedNodeMappings>
            <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="" sizeComputationExpression="" labelPosition="node" resizeKind="NSEW" width="1" height="40">
              <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Lifeline_Gray']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange']"/>
            </style>
          </borderedNodeMappings>
          <style xsi:type="style:SquareDescription" borderSizeComputationExpression="1" labelExpression="aql:self.getInstanceRoleLabel()" labelPosition="node" resizeKind="EAST_WEST" width="10" height="5">
            <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Border_Orange']"/>
            <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_xAB_Activity_Label_Orange']"/>
            <color xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Activity_Orange']"/>
          </style>
        </nodeMappings>
        <nodeMappings xsi:type="description_3:InstanceRoleMapping" name="hideSequenceLabel AIS" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20AIS']" semanticCandidatesExpression="ocl:Set {}" domainClass="EObject"/>
        <nodeMappings xsi:type="description_3:ObservationPointMapping" name="ObservationPoint AIS" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='no%20delete%20AIS']" semanticCandidatesExpression="aql:self.makeUnion(self.ownedConstraintDurations.start, self.ownedConstraintDurations.finish)" semanticElements="service:getAssociatedSemanticElements()" domainClass="InteractionFragment">
          <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="" sizeComputationExpression="1" labelPosition="node" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/observation.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="preconditionMapping" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" semanticCandidatesExpression="aql:self.preCondition" domainClass="capellacore.Constraint">
          <style xsi:type="style:NoteDescription" showIcon="false" labelExpression="aql:'pre:' + self.getConstraintLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="postconditionMapping" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" semanticCandidatesExpression="aql:self.postCondition" domainClass="capellacore.Constraint">
          <style xsi:type="style:NoteDescription" showIcon="false" labelExpression="aql:'post:' + self.getConstraintLabel()" sizeComputationExpression="5" labelPosition="node" resizeKind="NSEW">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </nodeMappings>
        <edgeMappings xsi:type="description_3:BasicMessageMapping" name="Basic message mapping AIS" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='rename%20basic%20message%20AIS']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::SYNCHRONOUS_CALL or ownedMessage.kind = interaction::MessageKind::ASYNCHRONOUS_CALL)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="aql:self.sendingEnd" receivingEndFinderExpression="aql:self.receivingEnd">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getDFMessageName(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_3:ReturnMessageMapping" name="return message mapping AIS" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::REPLY)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="aql:self.sendingEnd" receivingEndFinderExpression="aql:self.receivingEnd" invocationMessageFinderExpression="aql:self.getInvocationMessage()">
          <style lineStyle="dash">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_3:CreationMessageMapping" name="creation message mapping AIS" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::CREATE)" semanticElements="service:getAssociatedSemanticElements()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="aql:self.sendingEnd" receivingEndFinderExpression="aql:self.receivingEnd">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings xsi:type="description_3:DestructionMessageMapping" name="destruction message mapping AIS" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" semanticCandidatesExpression="aql:self.ownedMessages->select(ownedMessage | ownedMessage.kind = interaction::MessageKind::DELETE)" semanticElements="service:getAssociatedSemanticElements()" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Lifeline%20deletion%20mapping%20AIS']" targetFinderExpression="aql:self.getReceivingEnd()" sourceFinderExpression="aql:self.getSendingEnd()" domainClass="interaction.SequenceMessage" useDomainElement="true" sendingEndFinderExpression="aql:self.sendingEnd" receivingEndFinderExpression="aql:self.receivingEnd">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="ConstraintDuration AIS" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements%20OA']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Set%20Duration']" semanticCandidatesExpression="feature:ownedConstraintDurations" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='ObservationPoint%20AIS']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='ObservationPoint%20AIS']" targetFinderExpression="aql:self.finish" sourceFinderExpression="aql:self.start" domainClass="interaction.ConstraintDuration" useDomainElement="true">
          <style xsi:type="style:BracketEdgeStyleDescription" sourceArrow="InputArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='orange']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.duration">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='dark_gray']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings xsi:type="description_3:InteractionUseMapping" name="InteractionUse AIS" semanticCandidatesExpression="aql:self.ownedTimeLapses->filter(interaction::InteractionUse)" semanticElements="aql:self.makeUnion(self, self.referencedScenario, self.referencedScenario.eContainerOrSelf(interaction::AbstractCapability))" domainClass="interaction.InteractionUse" startingEndFinderExpression="aql:self.start" finishingEndFinderExpression="aql:self.finish" coveredLifelinesExpression="aql:self.getCoveredFromAbstractFragment()" centerLabelExpression="aql:self.referencedScenario.name">
          <deletionDescription href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']"/>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression=" ref" labelAlignment="LEFT">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_CombinedFragment_Gray']"/>
            <labelBorderStyle href="environment:/viewpoint#//@labelBorderStyles/@labelBorderStyleDescriptions.0"/>
          </style>
        </containerMappings>
        <containerMappings xsi:type="description_3:CombinedFragmentMapping" name="CombinedFragmentAIS" semanticCandidatesExpression="aql:self.ownedTimeLapses->filter(interaction::CombinedFragment)" synchronizationLock="true" domainClass="interaction.CombinedFragment" startingEndFinderExpression="aql:self.start" finishingEndFinderExpression="aql:self.finish" coveredLifelinesExpression="aql:self.getCoveredFromAbstractFragment()">
          <deletionDescription href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']"/>
          <subContainerMappings xsi:type="description_3:OperandMapping" name="OperandAIS" semanticCandidatesExpression="aql:self.referencedOperands" synchronizationLock="true" domainClass="interaction.InteractionOperand" startingEndFinderExpression="aql:self.getOperandBegin()" finishingEndFinderExpression="aql:self.getOperandEnd()">
            <deletionDescription href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Contextual%20Component%20Detailed%20Interfaces']/@defaultLayer/@toolSections.0/@ownedTools[name='delete%20capella%20elements']"/>
            <labelDirectEdit href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Direct%20edit%20operand']"/>
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:self.getOperandLabel()" labelAlignment="LEFT">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
              <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_CombinedFragment_Gray']"/>
            </style>
          </subContainerMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" showIcon="false" labelExpression="aql:' ' + self.operator.toString()" labelAlignment="LEFT">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_CombinedFragment_Gray']"/>
            <labelBorderStyle href="environment:/viewpoint#//@labelBorderStyles/@labelBorderStyleDescriptions.0"/>
          </style>
        </containerMappings>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Scenario_ContrainedElements']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Scenario_ExchangeContext']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']"/>
        <toolSections name="tools section" label="Scenario Elements">
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="activity" label="%oa.oas.activity" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/OperationalActivity.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="eContainer (&quot;BlockArchitecture&quot;)">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture)">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.ownedFunctionPkg.ownedOperationalActivities->at(1)">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="OperationalActivity" referenceName="ownedFunctions" variableName="component">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                    <subModelOperations xsi:type="tool:SetValue" featureName="representedInstance" valueExpression="aql:component"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:component.name"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(component)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleCreationTool" name="activities" label="%oa.oas.activities" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="Select Function" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.eContainerOrSelf(capellacore::ModellingArchitecture).ownedFunctionPkg.eAllContents()->filter(oa::OperationalActivity)"/>
                  <parameters name="initialSelection" value="aql:containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance"/>
                  <parameters name="wizardMessage" value=""/>
                  <parameters name="resultVariable" value="result"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(result)">
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:i != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole).representedInstance->includes(i))">
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                          <subModelOperations xsi:type="tool:SetValue" featureName="representedInstance" valueExpression="aql:i"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:i.name"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.reorderInstanceRole(instance,predecessor)"/>
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.ensureCapabilityInvolvment(i)"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles" forceRefresh="true" id="org.polarsys.capella.core.sirius.analysis.delete.RemoveInstanceRoles">
                  <parameters name="result" value="aql:self.void2Null(result)"/>
                  <parameters name="current" value="aql:containerView.eContainerOrSelf(diagram::DDiagram).eAllContents(viewpoint::DSemanticDecorator).target->filter(interaction::InstanceRole)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <predecessor name="predecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Sequence Message invoking an Interaction without return branch between the Source and Target Lifelines representing existing Operational Activities. This tool opens a selection wizard to select an available existing Interaction or to create a new one between these Operational Activities." name="interaction" label="%oa.oas.interaction" precondition="aql:self.allowMessageCreation2(preSource, preTarget, false, messageEndBefore, messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20AIS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/AsyncSequenceMessage.gif" extraSourceMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']" extraTargetMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']">
            <sourceVariable name="source">
              <subVariables xsi:type="tool:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sourceIR.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="exchangeType" value="FEF"/>
                  <parameters name="sourceIR" value="aql:sourceIR"/>
                  <parameters name="targetIR" value="aql:targetIR"/>
                  <parameters name="messageKind" value="ASYNCHRONOUS_CALL"/>
                  <parameters name="resultVariable" value="result"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.ExecutionEvent" referenceName="ownedEvents" variableName="execEvent"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                  <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="ASYNCHRONOUS_CALL"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + call.name"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Send Call ' + call.name"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                  <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.ExecutionEnd" referenceName="ownedInteractionFragments" variableName="end">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="endExec"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:execEvent"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                  <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:end"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="affected" value="aql:self.void2Null(result)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:MessageCreationTool" documentation="Creates a new Sequence Message invoking an Interaction with return branch between the Source and Target Lifelines representing existing Operational Activities. This tool opens a selection wizard to select an available existing Interaction or to create a new one between these Operational Activities." name="interaction.with.return.branch" label="%oa.oas.interaction.with.return.branch" precondition="aql:self.allowMessageCreation2(preSource, preTarget, false, messageEndBefore, messageEndAfter)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20AIS']" extraSourceMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']" extraTargetMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']">
            <sourceVariable name="source">
              <subVariables xsi:type="tool:AcceleoVariable" name="sourceIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </sourceVariable>
            <targetVariable name="target">
              <subVariables xsi:type="tool:AcceleoVariable" name="targetIR" computationExpression="aql:if (self->filter(interaction::Execution)->size() > 0) then self.covered else self endif"/>
            </targetVariable>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.getScenario()">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.traceScenario(messageEndBefore)"/>
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectServiceDialogBox" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessageDialogBox">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="exchangeType" value="FEF"/>
                  <parameters name="sourceIR" value="aql:sourceIR"/>
                  <parameters name="targetIR" value="aql:targetIR"/>
                  <parameters name="messageKind" value="SYNCHRONOUS_CALL"/>
                  <parameters name="resultVariable" value="result"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationCall"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationCall"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventSentOperation" referenceName="ownedEvents" variableName="eventSentOperationReply"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.EventReceiptOperation" referenceName="ownedEvents" variableName="eventReceiptOperationReply"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="call">
                  <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="SYNCHRONOUS_CALL"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:self.newCallName()"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null or messageEndBefore.semanticEnd = null or messageEndBefore.semanticEnd.getPreviousMessageEnd() = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessageOnBegining()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null and messageEndBefore.semanticEnd != null and messageEndBefore.semanticEnd.getPreviousMessageEnd() != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessage(messageEndBefore.semanticEnd.getPreviousMessageEnd().message)"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.SequenceMessage" referenceName="ownedMessages" variableName="reply">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:self.newCallName() + '_reply'"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="REPLY"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveMessage(call)"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + self.newCallName()"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndAfter.semanticEnd)"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndAfter.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndAfter = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationCall"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Send Call ' + self.newCallName()"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventSentOperationCall"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                    <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="sendingReplyEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Send Call ' + self.newCallName()"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:targetIR"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(receivingEnd)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(receivingEnd)"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventSentOperationReply"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:reply">
                    <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingReplyEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.MessageEnd" referenceName="ownedInteractionFragments" variableName="receivingReplyEnd">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:'Receive Call ' + self.newCallName()"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:sourceIR"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(sendingReplyEnd)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(sendingReplyEnd)"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="event" valueExpression="aql:eventReceiptOperationReply"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:reply">
                    <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:receivingReplyEnd"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:reply">
                  <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingReplyEnd"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingReplyEnd"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:call">
                  <subModelOperations xsi:type="tool:SetValue" featureName="sendingEnd" valueExpression="aql:sendingEnd"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="receivingEnd" valueExpression="aql:receivingEnd"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.Execution" referenceName="ownedTimeLapses">
                  <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:receivingEnd"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:sendingReplyEnd"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="affectService" id="org.polarsys.capella.core.sirius.analysis.affectToSequenceMessage">
                  <parameters name="message" value="aql:call"/>
                  <parameters name="affected" value="aql:self.void2Null(result)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="messageEndAfter"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:ReorderTool" name="reorder" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='creation%20message%20mapping%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='destruction%20message%20mapping%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUse%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']/@borderedNodeMappings[name='InteractionState%20Mapping%20AIS']">
            <startingEndPredecessorAfter name="startingEndPredecessorAfter"/>
            <finishingEndPredecessorAfter name="finishingEndPredecessorAfter"/>
            <onEventMovedOperation>
              <firstModelOperations xsi:type="tool:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.actions.extensions.DoReorder" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.DoReorder">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self"/>
                <parameters name="context" value="aql:self"/>
                <parameters name="STARTING_END_PREDECESSOR" value="aql:startingEndPredecessorAfter.semanticEnd"/>
                <parameters name="FINISHING_END_PREDECESSOR" value="aql:finishingEndPredecessorAfter.semanticEnd"/>
              </firstModelOperations>
            </onEventMovedOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramCreationDescription" name="Activity Scenario" precondition="aql:self.isInLib()" titleExpression="aql:self.name.addScenarioPrefix('[OAS]') + ' - Operational Activity Scenario'" browseExpression="aql:self.ownedScenarios->last()" diagramDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']">
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.Scenario" referenceName="ownedScenarios">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:diagramName"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramNavigationDescription" name="Existing Activity Scenario" diagramDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InteractionUseCreationTool" documentation="Creates a Reference to an existing Operational Activity Scenario covering Target Lifelines representing existing Operational Activities." name="reference" label="%oa.oas.reference" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='InteractionUse%20AIS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/InteractionUse.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="select Scenario" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:self.eContainerOrSelf(interaction::Scenario)"/>
                  <parameters name="scope" value="aql:self.void2Null(self.eContainerOrSelf(interaction::Scenario).getReferenceScope())"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedScenario"/>
                  <parameters name="wizardMessage" value="Select a Scenario"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:selectedScenario != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfInstanceRole()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnInstanceRole(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionUse" referenceName="ownedTimeLapses" variableName="interactionUse">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="interactionUse"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="referencedScenario" valueExpression="aql:selectedScenario"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
            <coveredLifelines name="coveredLifeLines"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Operand Group">
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with the kind LOOP (repeated part of the Scenario) and involving the covered Lifelines. " name="loop" label="%oa.oas.loop" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentAIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentAIS']/@subContainerMappings[name='OperandAIS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="operand 1"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="combined fragment"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="operator" valueExpression="LOOP"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with the kind ALT (Alternative) and involving the covered Lifelines. Operands should be added to the combined Fragment." name="alt" label="%oa.oas.alt" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentAIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentAIS']/@subContainerMappings[name='OperandAIS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="operand 1"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="combined fragment"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="operator" valueExpression="ALT"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with the kind PAR (Parallel) and involving the covered Lifelines. Operands should be added to the combined Fragment." name="par" label="%oa.oas.par" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentAIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentAIS']/@subContainerMappings[name='OperandAIS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="end"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="start"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="operand 1"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="combined fragment"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:startFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="operator" valueExpression="PAR"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
            <tools xsi:type="tool_2:CombinedFragmentCreationTool" documentation="Creates a Combined Fragment with selected kind and involving the covered Lifelines. The Kind of the Fragment has to be set using the Property Editors." name="other.combined.fragment" label="%oa.oas.other.combined.fragment" forceRefresh="true" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentAIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentAIS']/@subContainerMappings[name='OperandAIS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CombinedFragment.gif">
              <variable name="container"/>
              <viewVariable name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="SelectElementFromListWizard" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="aql:container.eContainerOrSelf(interaction::Scenario)"/>
                    <parameters name="scope" value="aql:self.getOperators()"/>
                    <parameters name="multiple" value="false"/>
                    <parameters name="resultVariable" value="selectedOperator"/>
                    <parameters name="wizardMessage" value="Select an operator for the Combined Fragment."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:selectedOperator != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="finishFE">
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="end"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:finishingEndPredecessor->isEmpty()">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:not finishingEndPredecessor->isEmpty()">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(finishingEndPredecessor.semanticEnd)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.FragmentEnd" referenceName="ownedInteractionFragments" variableName="startFE">
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="start"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="operand 1"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:coveredLifeLines"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startFE)"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.CombinedFragment" referenceName="ownedTimeLapses" variableName="combinedFragment">
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="combined fragment"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:startFE"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:finishFE"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="operator" valueExpression="aql:selectedOperator.toString()"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <startingEndPredecessor name="messageEndBefore"/>
              <finishingEndPredecessor name="finishingEndPredecessor"/>
              <coveredLifelines name="coveredLifeLines"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="rename instance role AIS" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="rename basic message AIS" inputLabelExpression="aql:self.sendingEnd.event.operation.name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.sendingEnd.event.operation">
                <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:arg0"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:OperandCreationTool" documentation="Creates a new Operand within the selected Combined Fragment. " name="operand" label="%oa.oas.operand" precondition="aql:container.operator != 'LOOP'" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@containerMappings[name='CombinedFragmentAIS']/@subContainerMappings[name='OperandAIS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/InteractionOperand.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionOperand" referenceName="ownedInteractionFragments" variableName="operand">
                  <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="operand"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:container.start.coveredInstanceRoles"/>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore = null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:messageEndBefore != null">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(messageEndBefore.semanticEnd)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.getFragmentFromContained()">
                    <subModelOperations xsi:type="tool:SetValue" featureName="referencedOperands" valueExpression="aql:operand"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="messageEndBefore"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="Drop Component" precondition="aql:element->filter(information::AbstractInstance)->size() != 0" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:newSemanticContainer">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.isValidScenarioDrop(self.eContainerOrSelf(interaction::Scenario),element)">
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:element.eContainerOrSelf(capellacore::ModellingArchitecture) = newSemanticContainer.eContainerOrSelf(capellacore::ModellingArchitecture)">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InstanceRole" referenceName="ownedInstanceRoles">
                      <subModelOperations xsi:type="tool:SetValue" featureName="representedInstance" valueExpression="aql:element"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:element.name"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:StateCreationTool" documentation="Create a State Fragment referencing an existing State/Mode of the Target Component/Actor. This tool opens a selection wizard to select an available State/Mode." name="state.mode" label="%oa.oas.state.mode" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']/@borderedNodeMappings[name='InteractionState%20Mapping%20AIS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="select State" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:self.getCoveredFromExecOrIR(container).representedInstance.getISStateModes()"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedState"/>
                  <parameters name="wizardMessage" value="Select a Mode/State"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:selectedState != 'WIZARD_CANCELED' and not selectedState->isEmpty()">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionState">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="relatedAbstractState" valueExpression="aql:selectedState"/>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnBeginingOfScenario()"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not startingEndPredecessor->isEmpty()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(startingEndPredecessor.semanticEnd)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.InteractionState" referenceName="ownedInteractionFragments" variableName="interactionStateEnd">
                    <subModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:selectedFunction.name"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="coveredInstanceRoles" valueExpression="aql:self.getCoveredFromExecOrIR(container)"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="relatedAbstractState" valueExpression="aql:selectedState"/>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.moveEndOnScenario(interactionState)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="interaction.StateFragment" referenceName="ownedTimeLapses">
                    <subModelOperations xsi:type="tool:SetValue" featureName="relatedAbstractState" valueExpression="aql:selectedState"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:interactionState"/>
                    <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:interactionStateEnd"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
            <startingEndPredecessor name="startingEndPredecessor"/>
            <finishingEndPredecessor name="finishingEndPredecessor"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Create a new constraint duration between two interaction fragments of the sequence diagram." name="duration" label="%oa.oas.duration" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='ConstraintDuration%20AIS']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/BracketEdgeStyle.gif" extraSourceMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='endOfLifeAIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']/@borderedNodeMappings[name='InteractionState%20Mapping%20AIS']" extraTargetMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='Basic%20message%20mapping%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='endOfLifeAIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']/@borderedNodeMappings[name='default%20execution%20AIS']/@borderedNodeMappings[name='Execution%20AIS']/@borderedNodeMappings[name='InteractionState%20Mapping%20AIS'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@edgeMappings[name='return%20message%20mapping%20AIS']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source.eContainerOrSelf(interaction::Scenario)">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="ConstraintDuration" referenceName="ownedConstraintDurations" variableName="duration">
                  <subModelOperations xsi:type="tool:SetValue" featureName="start" valueExpression="aql:self.getCorrespondingIFStart(source,target)"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="finish" valueExpression="aql:self.getCorrespondingIFFinish(target,source)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Constraints From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" dragSource="PROJECT_EXPLORER">
            <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint']"/>
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="Set Duration" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:SetValue" featureName="duration" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_2:InstanceRoleReorderTool" name="IRReorder" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@nodeMappings[name='InstanceRoleMaping%20AIS']">
            <predecessorBefore name="predecessorBefore"/>
            <predecessorAfter name="predecessorAfter"/>
            <instanceRoleMoved>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="org.polarsys.capella.core.sirius.analysis.actions.extensions.doIRReorder" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.doIRReorder">
                  <parameters name="PREDECESSOR_BEFORE" value="aql:predecessorBefore"/>
                  <parameters name="PREDECESSOR_AFTER" value="aql:predecessorAfter"/>
                  <parameters name="SCENARIO" value="aql:self.eContainerOrSelf(interaction::Scenario)"/>
                </subModelOperations>
              </firstModelOperations>
            </instanceRoleMoved>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DeleteElementDescription" name="no delete AIS">
            <element name="element"/>
            <elementView name="elementView"/>
            <containerView name="containerView"/>
            <initialOperation/>
          </ownedTools>
          <reusedTools xsi:type="tool:ToolDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='exchange.context']"/>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%oa.oas.constraint" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@nodeMappings[name='Scenario_Constraint']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element.scenario" label="%oa.oas.constraint.element.scenario" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Component%20Interfaces%20Scenario']/@defaultLayer/@edgeMappings[name='Scenario_ContrainedElements']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%oa.oas.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,false)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV']"/>
          <reusedTools xsi:type="tool_1:ContainerDropDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
          <reusedTools xsi:type="tool:PopupMenu" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu']"/>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="Operational Process Description" label="%oa.opd" titleExpression="aql:'[OPD] ' + self.name" domainClass="OperationalProcess" defaultConcern="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Process%20Description']/@concerns/@ownedConcernDescriptions.0">
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Process%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraints%20From%20Project%20Explorer']"/>
      <dropDescriptions href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.filter" label="%oa.opd.show.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.exchange.items.parameters.filter" label="%oa.opd.show.exchange.items.parameters.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="show.functional.exchanges.exchange.items.filter" label="%oa.opd.show.functional.exchanges.exchange.items.filter">
        <filters xsi:type="filter:MappingFilter" filterKind="COLLAPSE">
          <mappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%oa.opd.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.functional.chain.involvement.links.filter" label="%oa.opd.hide.functional.chain.involvement.links.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.sequencing.information.filter" label="%oa.opd.hide.sequencing.information.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
          <mappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink']"/>
          <mappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink_InvolvementLink']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.computed.sequencing.information.filter" label="%oa.opd.hide.computed.sequencing.information.filter">
        <filters xsi:type="filter:MappingFilter" viewConditionExpression="aql:not ((self.target.oclIsKindOf(fa::ControlNode)) and (self.controlNodeLinkedToCollapsedFCR()))">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.association.links.filter" label="%oa.opd.hide.association.links.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink_InvolvementLink']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="merge.associated.functional.exchange.involvements.and.sequence.links.without.control.node.filter" label="%oa.opd.merge.associated.functional.exchange.involvements.and.sequence.links.without.control.node.filter">
        <filters xsi:type="filter:MappingFilter" viewConditionExpression="aql:not(self.isFEWithAssociatedSL())">
          <mappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:self.isDiagramTitleBlock()">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <concerns>
        <ownedConcernDescriptions name="hideLinksByDefaultOPD" filters="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Process%20Description']/@filters[name='hide.association.links.filter']"/>
      </concerns>
      <layout xsi:type="description_2:CompositeLayout" direction="LeftToRight"/>
      <defaultLayer name="Default">
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_AbstractFunction']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_FunctionalChain']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@containerMappings[name='FC_FunctionalChainReference']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@containerMappings[name='FC_FunctionalChainReference']/@subContainerMappings[name='FC_FunctionalChainStacked']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink_InvolvementLink']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']"/>
        <toolSections name="Involvements" label="Involvements">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Involvement referencing the selected Operational Activity." name="involve.function" label="%oa.opd.involve.function" precondition="aql:containerView.isValidFCInvolveFunction()" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementFunction_OA.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_AbstractFunction']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="select Function" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:container.computeFCIFunctionScope()"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="selectedFunctions"/>
                  <parameters name="wizardMessage" value="aql:'Select Operational Activities to involve in ' + container.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:selectedFunctions != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool:For" expression="aql:selectedFunctions" iteratorName="selectedFunction">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="FunctionalChainInvolvementFunction" referenceName="ownedFunctionalChainInvolvements" variableName="function">
                        <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="aql:selectedFunction"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a new Involvement Link referencing an Interaction." name="involve.exchange" label="%oa.opd.involve.exchange" precondition="aql:preSource.isValidFCILinkExchange(preTarget)" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementLinkOA_ToExchange.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="select Value" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:source"/>
                  <parameters name="scope" value="aql:source.computeFCILinkScope(target)"/>
                  <parameters name="multiple" value="false"/>
                  <parameters name="resultVariable" value="selectedValue"/>
                  <parameters name="wizardMessage" value="Select a value to involve."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:selectedValue != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sourceView.computeContainerFunctionalChain(targetView)">
                    <subModelOperations xsi:type="tool:Let" variableName="commonFC" valueExpression="aql:self"/>
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="FunctionalChainInvolvementLink" referenceName="ownedFunctionalChainInvolvements" variableName="involvementLink">
                      <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="aql:source"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="aql:target"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="aql:selectedValue"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sourceView.computeFCReferenceHierarchy(commonFC)"/>
                      <subModelOperations xsi:type="tool:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:targetView.computeFCReferenceHierarchy(commonFC)"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates a new Involvement Link referencing an Interaction, between the existing Operational Activity and a new Operational Activity." name="involve.exchange.and.function" label="%oa.opd.involve.exchange.and.function" precondition="aql:container.isValidFCIFunctionalExchangeAndFunction()" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementLinkOA_AndFunction.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectExchanges" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:element.involved"/>
                  <parameters name="scope" value="aql:elementView.computeFCIFunctionalExchangeAndFunctionScope()"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="selectedExchanges"/>
                  <parameters name="wizardMessage" value="aql:'Select Interactions to involve from ' + element.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedExchanges != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(selectedExchanges)" iteratorName="exchange">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element.eContainer()">
                      <subModelOperations xsi:type="tool:Switch">
                        <cases conditionExpression="aql:element.involved.isFunctionSourceOfExchange(exchange)">
                          <subModelOperations xsi:type="tool:CreateInstance" typeName="FunctionalChainInvolvementFunction" referenceName="ownedFunctionalChainInvolvements" variableName="newFunction">
                            <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="aql:exchange.getOutgoingAbstractFunction()"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool:CreateInstance" typeName="FunctionalChainInvolvementLink" referenceName="ownedFunctionalChainInvolvements" variableName="involvementLink">
                            <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="aql:element"/>
                            <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="aql:newFunction"/>
                            <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="aql:exchange"/>
                          </subModelOperations>
                        </cases>
                        <default>
                          <subModelOperations xsi:type="tool:CreateInstance" typeName="FunctionalChainInvolvementFunction" referenceName="ownedFunctionalChainInvolvements" variableName="newFunction">
                            <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="aql:exchange.getIncomingAbstractFunction()"/>
                          </subModelOperations>
                          <subModelOperations xsi:type="tool:CreateInstance" typeName="FunctionalChainInvolvementLink" referenceName="ownedFunctionalChainInvolvements" variableName="involvementLink">
                            <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="aql:newFunction"/>
                            <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="aql:element"/>
                            <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="aql:exchange"/>
                          </subModelOperations>
                        </default>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Involvement referencing a Operational Process." name="involve.functional.chain" label="%oa.opd.involve.functional.chain" precondition="aql:containerView.isValidFCIFunctionalChain()" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainReference_OA.gif">
            <containerMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@containerMappings[name='FC_FunctionalChainReference']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="select functional Chain" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:container"/>
                  <parameters name="scope" value="aql:containerView.computeFCIFunctionalChainScope()"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="selectedChains"/>
                  <parameters name="wizardMessage" value="aql:'Select an Operational Process to involve in ' + container.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:selectedChains != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool:For" expression="aql:selectedChains" iteratorName="selectedChain">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="FunctionalChainReference" referenceName="ownedFunctionalChainInvolvements">
                        <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="aql:selectedChain"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a new Involvement Link between two Involvements referencing the same Operational Activity." name="connect.functions" label="%oa.opd.connect.functions" precondition="aql:preSource.isValidFCILinkFunction(preSourceView, preTarget, preTargetView)" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementLinkOA_ToFunction.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sourceView.computeContainerFunctionalChain(targetView)">
                <subModelOperations xsi:type="tool:Let" variableName="commonFC" valueExpression="aql:self"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="FunctionalChainInvolvementLink" referenceName="ownedFunctionalChainInvolvements" variableName="involvementLink">
                  <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="aql:source"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="aql:target"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="aql:source.involved"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sourceView.computeFCReferenceHierarchy(commonFC)"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:targetView.computeFCReferenceHierarchy(commonFC)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramCreationDescription" name="Operational Process Description" precondition="aql:self.isInLib()" titleExpression="aql:'[OPD] ' + self.name" diagramDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Process%20Description']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Constraints From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" dragSource="PROJECT_EXPLORER">
            <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:DeleteElementDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete%20FE%20Involvement']"/>
        </toolSections>
        <toolSections name="Sequencing">
          <ownedTools xsi:type="tool_1:ToolGroup" documentation="Create a new Control Node." name="Create_ControlNode" label="Control Node">
            <tools xsi:type="tool:ToolDescription" documentation="Create a new AND Control Node." name="and" label="%oa.opd.and" precondition="aql:container.oclIsKindOf(fa::FunctionalChain) or container.oclIsKindOf(fa::FunctionalChainReference) or container.oclIsKindOf(fa::SequenceLink) or container.oclIsKindOf(fa::SequenceLinkEnd)" forceRefresh="true" iconPath="/org.polarsys.capella.core.data.res.edit/icons/full/obj16/ControlNode_And.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self">
                  <subModelOperations xsi:type="tool:Switch">
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChain)">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes">
                        <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLinkEnd)">
                      <subModelOperations xsi:type="tool:Let" variableName="sequenceLinkEnd" valueExpression="var:self"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sequenceLinkEnd.eContainer()">
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="controlNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(sequenceLinkEnd.eContainer())">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 100, 0)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sequenceLinkEnd"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:controlNode"/>
                        </subModelOperations>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLink)">
                      <subModelOperations xsi:type="tool:Let" variableName="sequenceLink" valueExpression="var:self"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sequenceLink.eContainer()">
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="newControlNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(sequenceLink.eContainer())">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="newSequenceLink">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="aql:sequenceLink.source"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:newControlNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sequenceLink.sourceReferenceHierarchy"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="var:sequenceLink">
                        <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:newControlNode"/>
                        <subModelOperations xsi:type="tool:Unset" featureName="sourceReferenceHierarchy" elementExpression="aql:self.sourceReferenceHierarchy"/>
                      </subModelOperations>
                    </cases>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="Create a new OR Control Node." name="or" label="%oa.opd.or" precondition="aql:container.oclIsKindOf(fa::FunctionalChain) or container.oclIsKindOf(fa::FunctionalChainReference) or container.oclIsKindOf(fa::SequenceLink) or container.oclIsKindOf(fa::SequenceLinkEnd)" forceRefresh="true" iconPath="/org.polarsys.capella.core.data.res.edit/icons/full/obj16/ControlNode_Or.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self">
                  <subModelOperations xsi:type="tool:Switch">
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChain)">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes">
                        <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLinkEnd)">
                      <subModelOperations xsi:type="tool:Let" variableName="sequenceLinkEnd" valueExpression="var:self"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sequenceLinkEnd.eContainer()">
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="controlNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(sequenceLinkEnd.eContainer())">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 100, 0)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sequenceLinkEnd"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:controlNode"/>
                        </subModelOperations>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLink)">
                      <subModelOperations xsi:type="tool:Let" variableName="sequenceLink" valueExpression="var:self"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sequenceLink.eContainer()">
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="newControlNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(sequenceLink.eContainer())">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="newSequenceLink">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="aql:sequenceLink.source"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:newControlNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sequenceLink.sourceReferenceHierarchy"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="var:sequenceLink">
                        <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:newControlNode"/>
                        <subModelOperations xsi:type="tool:Unset" featureName="sourceReferenceHierarchy" elementExpression="aql:self.sourceReferenceHierarchy"/>
                      </subModelOperations>
                    </cases>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="Create a new ITERATE Control Node." name="it" label="%oa.opd.it" precondition="aql:container.oclIsKindOf(fa::FunctionalChain) or container.oclIsKindOf(fa::FunctionalChainReference) or container.oclIsKindOf(fa::SequenceLink) or container.oclIsKindOf(fa::SequenceLinkEnd)" forceRefresh="true" iconPath="/org.polarsys.capella.core.data.res.edit/icons/full/obj16/ControlNode_Iterate.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self">
                  <subModelOperations xsi:type="tool:Switch">
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChain)">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes">
                        <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLinkEnd)">
                      <subModelOperations xsi:type="tool:Let" variableName="sequenceLinkEnd" valueExpression="var:self"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sequenceLinkEnd.eContainer()">
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="controlNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(sequenceLinkEnd.eContainer())">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 100, 0)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sequenceLinkEnd"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:controlNode"/>
                        </subModelOperations>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLink)">
                      <subModelOperations xsi:type="tool:Let" variableName="sequenceLink" valueExpression="var:self"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sequenceLink.eContainer()">
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="newControlNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(sequenceLink.eContainer())">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="newSequenceLink">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="aql:sequenceLink.source"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:newControlNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sequenceLink.sourceReferenceHierarchy"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="var:sequenceLink">
                        <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:newControlNode"/>
                        <subModelOperations xsi:type="tool:Unset" featureName="sourceReferenceHierarchy" elementExpression="aql:self.sourceReferenceHierarchy"/>
                      </subModelOperations>
                    </cases>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" documentation="Create a new Control Node." name="Create_ControlNodeConstruct" label="Control Node Construct">
            <tools xsi:type="tool:ToolDescription" documentation="Create a new AND Control Node." name="and.construct" label="%oa.opd.and.construct" precondition="aql:container.oclIsKindOf(fa::FunctionalChain) or container.oclIsKindOf(fa::FunctionalChainReference) or container.oclIsKindOf(fa::SequenceLink) or container.oclIsKindOf(fa::SequenceLinkEnd)" forceRefresh="true" iconPath="/org.polarsys.capella.core.data.res.edit/icons/full/obj16/ControlNode_And.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:element">
                  <subModelOperations xsi:type="tool:Switch">
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChain)">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                        <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                        <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                        <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:targetNode"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                        <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:targetNode"/>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLinkEnd)">
                      <subModelOperations xsi:type="tool:Let" variableName="commonFC" valueExpression="aql:self.eContainer()"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="var:commonFC">
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 100, 0)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 200, 0)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="incomingSequenceLink">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:element"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        </subModelOperations>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLink)">
                      <subModelOperations xsi:type="tool:Let" variableName="commonFC" valueExpression="aql:self.eContainer()"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="var:commonFC">
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView, -50, 0)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::AND"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView, 50, 0)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="outgoingSequenceLink">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="aql:targetNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="aql:element.target"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:element.targetReferenceHierarchy"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="var:element">
                        <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool:Unset" featureName="targetReferenceHierarchy" elementExpression="aql:self.targetReferenceHierarchy"/>
                      </subModelOperations>
                    </cases>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="Create a new AND Control Node." name="or.construct" label="%oa.opd.or.construct" precondition="aql:container.oclIsKindOf(fa::FunctionalChain) or container.oclIsKindOf(fa::FunctionalChainReference) or container.oclIsKindOf(fa::SequenceLink) or container.oclIsKindOf(fa::SequenceLinkEnd)" forceRefresh="true" iconPath="/org.polarsys.capella.core.data.res.edit/icons/full/obj16/ControlNode_Or.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:element">
                  <subModelOperations xsi:type="tool:Switch">
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChain)">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                        <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                        <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                        <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:targetNode"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                        <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:targetNode"/>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLinkEnd)">
                      <subModelOperations xsi:type="tool:Let" variableName="commonFC" valueExpression="aql:self.eContainer()"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="var:commonFC">
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 100, 0)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 200, 0)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="incomingSequenceLink">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:element"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        </subModelOperations>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLink)">
                      <subModelOperations xsi:type="tool:Let" variableName="commonFC" valueExpression="aql:self.eContainer()"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="var:commonFC">
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView, -50, 0)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::OR"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView, 50, 0)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="outgoingSequenceLink">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="aql:targetNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="aql:element.target"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:element.targetReferenceHierarchy"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="var:element">
                        <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool:Unset" featureName="targetReferenceHierarchy" elementExpression="aql:self.targetReferenceHierarchy"/>
                      </subModelOperations>
                    </cases>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="Create a new AND Control Node." name="it.construct" label="%oa.opd.it.construct" precondition="aql:container.oclIsKindOf(fa::FunctionalChain) or container.oclIsKindOf(fa::FunctionalChainReference) or container.oclIsKindOf(fa::SequenceLink) or container.oclIsKindOf(fa::SequenceLinkEnd)" forceRefresh="true" iconPath="/org.polarsys.capella.core.data.res.edit/icons/full/obj16/ControlNode_Iterate.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:element">
                  <subModelOperations xsi:type="tool:Switch">
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChain)">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                        <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                        <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                        <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:targetNode"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                        <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:targetNode"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLinkEnd)">
                      <subModelOperations xsi:type="tool:Let" variableName="commonFC" valueExpression="aql:self.eContainer()"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="var:commonFC">
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:elementView.eContainer()">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 100, 0)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:elementView.eContainer()">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setRelativePositionToNode(elementView, 200, 0)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:targetNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="incomingSequenceLink">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:element"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        </subModelOperations>
                      </subModelOperations>
                    </cases>
                    <cases conditionExpression="aql:self.oclIsKindOf(fa::SequenceLink)">
                      <subModelOperations xsi:type="tool:Let" variableName="commonFC" valueExpression="aql:self.eContainer()"/>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="var:commonFC">
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="sourceNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView, -50, 0)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="ControlNode" referenceName="ownedSequenceNodes" variableName="targetNode">
                          <subModelOperations xsi:type="tool:SetValue" featureName="kind" valueExpression="aql:fa::ControlNodeKind::ITERATE"/>
                          <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(commonFC)">
                            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView, 50, 0)"/>
                            <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_ControlNode']"/>
                          </subModelOperations>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink1">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:sourceNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:targetNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink2">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:targetNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        </subModelOperations>
                        <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="outgoingSequenceLink">
                          <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="aql:targetNode"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="aql:element.target"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:element.targetReferenceHierarchy"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="var:element">
                        <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:sourceNode"/>
                        <subModelOperations xsi:type="tool:Unset" featureName="targetReferenceHierarchy" elementExpression="aql:self.targetReferenceHierarchy"/>
                      </subModelOperations>
                    </cases>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Create a new Sequence Link." name="sequence.link" label="%oa.opd.sequence.link" precondition="aql:preSource.isValidSequenceLink(preTarget)" forceRefresh="true">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sourceView.computeContainerFunctionalChain(targetView)">
                <subModelOperations xsi:type="tool:Let" variableName="commonFC" valueExpression="aql:self"/>
                <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink">
                  <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:source"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:target"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sourceView.computeFCReferenceHierarchy(commonFC)"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:targetView.computeFCReferenceHierarchy(commonFC)"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert a new Involvement Function referencing the selected Operational Activity between two Sequence Links." name="involve.function.on.sequence.link" label="%oa.opd.involve.function.on.sequence.link" precondition="aql:containerView.isValidFCInvolveFunction() and container.oclIsKindOf(fa::SequenceLink)" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementFunction_OA.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:element">
                <subModelOperations xsi:type="tool:Let" variableName="selectedSequenceLink" valueExpression="var:self"/>
                <subModelOperations xsi:type="tool:Let" variableName="functionalChain" valueExpression="aql:self.eContainer()"/>
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="select Function" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                  <parameters name="context" value="aql:functionalChain"/>
                  <parameters name="scope" value="aql:functionalChain.computeFCIFunctionScope()"/>
                  <parameters name="multiple" value="true"/>
                  <parameters name="resultVariable" value="selectedFunctions"/>
                  <parameters name="wizardMessage" value="aql:'Select a Function to involve in ' + functionalChain.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:selectedFunctions != 'WIZARD_CANCELED'">
                  <subModelOperations xsi:type="tool:For" expression="aql:selectedFunctions" iteratorName="selectedFunction">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:functionalChain">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="FunctionalChainInvolvementFunction" referenceName="ownedFunctionalChainInvolvements" variableName="function">
                        <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="aql:selectedFunction"/>
                        <subModelOperations xsi:type="tool_1:CreateView" containerViewExpression="aql:diagram.getDiagramElementDiagramIfNull(functionalChain)">
                          <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:createdView.setPositionAtMiddleOfEdge(elementView)"/>
                          <mapping xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@nodeMappings[name='FC_AbstractFunction']"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="newSequenceLink">
                        <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:function"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="aql:selectedSequenceLink.target"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:selectedSequenceLink.targetReferenceHierarchy"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="var:selectedSequenceLink">
                      <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:function"/>
                      <subModelOperations xsi:type="tool:Unset" featureName="targetReferenceHierarchy" elementExpression="aql:self.targetReferenceHierarchy"/>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup" name="Advanced Tools">
            <tools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a new Involvement Link referencing an Interaction with a linked Sequence Link." name="involve.exchange.with.sequence.link" label="%oa.opd.involve.exchange.with.sequence.link" precondition="aql:preSource.isValidFCILinkExchange(preTarget)" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementLinkOA_ToExchange.gif">
              <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']"/>
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="select Value" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementFromListWizard">
                    <parameters name="context" value="aql:source"/>
                    <parameters name="scope" value="aql:source.computeFCILinkScope(target)"/>
                    <parameters name="multiple" value="false"/>
                    <parameters name="resultVariable" value="selectedValue"/>
                    <parameters name="wizardMessage" value="Select a value to involve."/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:selectedValue != 'WIZARD_CANCELED'">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:sourceView.computeContainerFunctionalChain(targetView)">
                      <subModelOperations xsi:type="tool:Let" variableName="commonFC" valueExpression="aql:self"/>
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="FunctionalChainInvolvementLink" referenceName="ownedFunctionalChainInvolvements" variableName="involvementLink">
                        <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="aql:source"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="aql:target"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="aql:selectedValue"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sourceView.computeFCReferenceHierarchy(commonFC)"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:targetView.computeFCReferenceHierarchy(commonFC)"/>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="SequenceLink" referenceName="ownedSequenceLinks" variableName="sequenceLink">
                        <subModelOperations xsi:type="tool:SetValue" featureName="source" valueExpression="var:source"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="target" valueExpression="var:target"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="sourceReferenceHierarchy" valueExpression="aql:sourceView.computeFCReferenceHierarchy(commonFC)"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="targetReferenceHierarchy" valueExpression="aql:targetView.computeFCReferenceHierarchy(commonFC)"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="links" valueExpression="var:involvementLink"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool_1:EdgeCreationDescription" documentation="Associate a Sequence Link with an Involvement Link referencing an Interaction." name="associate.sequence.link.with.exchange" label="%oa.opd.associate.sequence.link.with.exchange" precondition="aql:preSource.isValidLinks(preTarget)" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementLinkOA_ToExchange.gif">
              <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink_InvolvementLink']"/>
              <sourceVariable name="source"/>
              <targetVariable name="target"/>
              <sourceViewVariable name="sourceView"/>
              <targetViewVariable name="targetView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:source">
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.oclIsKindOf(fa::SequenceLink)">
                    <subModelOperations xsi:type="tool:SetValue" featureName="links" valueExpression="aql:target"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.oclIsKindOf(fa::FunctionalChainInvolvementLink)">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="var:target">
                      <subModelOperations xsi:type="tool:SetValue" featureName="links" valueExpression="aql:source"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <extraSourceMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_Exchange']"/>
              <extraTargetMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Functional%20Chain%20Description']/@defaultLayer/@edgeMappings[name='FC_SequenceLink']"/>
            </tools>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ToolGroup">
            <tools xsi:type="tool:ToolDescription" documentation="Create a new Involvement Link referencing an Interaction and associate it with the selected Sequence Link." name="involve.exchange.from.sequence.link" label="%oa.opd.involve.exchange.from.sequence.link" precondition="aql:container.oclIsKindOf(fa::SequenceLink)" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/FunctionalChainInvolvementLinkOA_ToExchange.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.accelerateOnSequenceLinkEdge()"/>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ToolDescription" documentation="Create a new Sequence Link and associate it with the selected Involvement Link." name="sequence.link.from.exchange" label="%oa.opd.sequence.link.from.exchange" precondition="aql:container.oclIsKindOf(fa::FunctionalChainInvolvementLink) and not container.involved.oclIsKindOf(fa::AbstractFunction)" forceRefresh="true" iconPath="/org.polarsys.capella.core.data.res.edit/icons/full/obj16/SequenceLink.gif">
              <element name="element"/>
              <elementView name="elementView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element.accelerateOnFCILEdge()"/>
              </initialOperation>
            </tools>
          </ownedTools>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%oa.opd.constraint" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%oa.opd.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%oa.opd.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV']"/>
          <reusedTools xsi:type="tool_1:ContainerDropDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
          <reusedTools xsi:type="tool:PopupMenu" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu']"/>
          <reusedTools xsi:type="tool:ToolDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']"/>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="Operational Capabilities Blank" label="%oa.ocb" titleExpression="aql:'[OCB] ' + self.name" domainClass="OperationalCapabilityPkg">
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Entities%20From%20Project%20Explorer']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraints%20From%20Project%20Explorer']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Operational%20Capabilities%20From%20Project%20Explorer']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Entities%20From%20Project%20Explorer']"/>
      <dropDescriptions href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.communication.means.filter" label="%oa.ocb.hide.communication.means.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_CommunicationMeans']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.involvement.links.filter" label="%oa.ocb.hide.involvement.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_EntityOperationalCapabilityInvolvement']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.operational.capability.extends.filter" label="%oa.ocb.hide.operational.capability.extends.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_OC_Extends']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.operational.capability.includes.filter" label="%oa.ocb.hide.operational.capability.includes.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_OC_Include']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.operational.capability.generalizations.filter" label="%oa.ocb.hide.operational.capability.generalizations.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_OC_Generalization']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%oa.ocb.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:self.isDiagramTitleBlock()">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <defaultLayer name="Default">
        <nodeMappings name="COC_OperationalCapabilities" navigationDescriptions="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Existing%20Activity%20Scenario'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Existing%20Entity%20Scenario'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='Existing%20Contextual%20Operational%20Capabilty']" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Rename%20OEB']" createElements="false" semanticElements="" domainClass="OperationalCapability">
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Activity%20Scenario']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Entity%20Scenario%20']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Operational%20Capabilty']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Activity%20Interaction%20Blank']"/>
          <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" resizeKind="NSEW" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/OperationalCapability.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <edgeMappings name="COC_CommunicationMeans" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='Rename%20OEB']" semanticCandidatesExpression="aql:self.eContainerOrSelf(oa::OperationalAnalysis).getAllCommunicationMeans()" synchronizationLock="true" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@containerMappings[name='COC_OperationalEntities']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@containerMappings[name='COC_OperationalEntities']" targetFinderExpression="feature:target" sourceFinderExpression="feature:source" domainClass="CommunicationMean" useDomainElement="true" reconnections="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='changeContainer']">
          <style targetArrow="InputFillClosedArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.getComponentExchangeLabel(diagram)">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="COC_EntityOperationalCapabilityInvolvement" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" semanticCandidatesExpression="service:diagram.getMBCapabilityInvolvementSemanticCandidates" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='COC_OperationalCapabilities']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@containerMappings[name='COC_OperationalEntities']" targetFinderExpression="aql:self.involved" sourceFinderExpression="aql:self.involver" domainClass="EntityOperationalCapabilityInvolvement" useDomainElement="true">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="COC_OC_Extends" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" semanticCandidatesExpression="service:diagram.getMBCapabilityExtendSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='COC_OperationalCapabilities']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='COC_OperationalCapabilities']" targetFinderExpression="aql:self.extended" sourceFinderExpression="aql:self.extension" domainClass="AbstractCapabilityExtend" useDomainElement="true">
          <style lineStyle="dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="&#xab; e &#xbb;">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="COC_OC_Include" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" semanticCandidatesExpression="service:diagram.getMBCapabilityIncludeSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='COC_OperationalCapabilities']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='COC_OperationalCapabilities']" targetFinderExpression="aql:self.included" sourceFinderExpression="aql:self.inclusion" domainClass="AbstractCapabilityInclude" useDomainElement="true">
          <style lineStyle="dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="&#xab; i &#xbb;">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="COC_OC_Generalization" semanticCandidatesExpression="service:diagram.getMBCapabilityGeneralizationSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='COC_OperationalCapabilities']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='COC_OperationalCapabilities']" targetFinderExpression="aql:self.super" sourceFinderExpression="aql:self.sub" domainClass="AbstractCapabilityGeneralization" useDomainElement="true">
          <deletionDescription href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']"/>
          <style lineStyle="dot" targetArrow="InputClosedArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="COC_OperationalEntities" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Activity%20Interaction%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']" createElements="false" domainClass="Entity" dropDescriptions="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Entities%20From%20Project%20Explorer'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Entities%20From%20Project%20Explorer']" reusedContainerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@containerMappings[name='COC_OperationalEntities']">
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Entity%20Breakdown']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Entity%20Blank']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Role%20Blank']"/>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom">
            <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']"/>
            <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']"/>
            <backgroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_min']"/>
            <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']"/>
          </style>
        </containerMappings>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']"/>
        <toolSections>
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Operational Entity" name="operational.entity" label="%oa.ocb.operational.entity" precondition="aql:not (container.isActor())" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@containerMappings[name='COC_OperationalEntities']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Entity.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getOEBTarget()">
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.oclIsKindOf(oa::Entity)">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="Entity" referenceName="ownedEntities" variableName="entity">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.oclIsKindOf(oa::EntityPkg)">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="Entity" referenceName="ownedEntities" variableName="entity">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (self.oclIsKindOf(oa::Entity)) and not (self.oclIsKindOf(oa::EntityPkg))">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.getRootEntityPkg()">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="Entity" referenceName="ownedEntities" variableName="entity">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Operational Actor" name="operational.actor" label="%oa.ocb.operational.actor" precondition="aql:not (container.isActor())" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@containerMappings[name='COC_OperationalEntities']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/OperationalActor.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getOEBTarget()">
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.oclIsKindOf(oa::Entity)">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createActor()">
                      <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                        <parameters name="context" value="aql:self"/>
                        <parameters name="scope" value="aql:self"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.oclIsKindOf(oa::EntityPkg)">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createActor()">
                      <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                        <parameters name="context" value="aql:self"/>
                        <parameters name="scope" value="aql:self"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (self.oclIsKindOf(oa::Entity)) and not (self.oclIsKindOf(oa::EntityPkg))">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.getRootEntityPkg()">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createActor()">
                        <subModelOperations xsi:type="tool:ExternalJavaAction" name="CreateView" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.CreateViewAction">
                          <parameters name="context" value="aql:self"/>
                          <parameters name="scope" value="aql:self"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Operational Capability" name="operational.capability" label="%oa.ocb.operational.capability" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='COC_OperationalCapabilities']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Capability.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="OperationalCapability" referenceName="ownedOperationalCapabilities">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a new Communication Mean between two Operational Entities / Actors" name="communication.mean" label="%oa.ocb.communication.mean" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_CommunicationMeans']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source.createABComponentExchange(sourceView,targetView)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a new Involvement relationship between a source Operational Capability and a target Operational Entity / Actor" name="involvement" label="%oa.ocb.involvement" precondition="aql:not (preSource.ownedEntityOperationalCapabilityInvolvements.involved->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_EntityOperationalCapabilityInvolvement']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="EntityOperationalCapabilityInvolvement" referenceName="ownedEntityOperationalCapabilityInvolvements">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="aql:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Create a new Capability Extension relationship between the Source and Target Capabilities." name="extends" label="%oa.ocb.extends" precondition="aql:not (preSource.extends.extended->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_OC_Extends']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Extend.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="AbstractCapabilityExtend" referenceName="extends">
                  <subModelOperations xsi:type="tool:SetValue" featureName="extended" valueExpression="aql:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Create a new Capability Inclusion relationship between the Source and Target Capabilities." name="includes" label="%oa.ocb.includes" precondition="aql:not (preSource.includes.included->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_OC_Include']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Include.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="AbstractCapabilityInclude" referenceName="includes">
                  <subModelOperations xsi:type="tool:SetValue" featureName="included" valueExpression="aql:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Create a new Capability Generalization relationship between the Source and Target Super Capabilities." name="operational.capability.generalization" label="%oa.ocb.operational.capability.generalization" precondition="aql:not (self.getAllSuperCapabilities(preTarget)->includes(preSource)) and self.eAllContents()->filter(interaction::AbstractCapabilityGeneralization)->select(x | x.sub = preSource and x.super = preTarget)->size() = 0" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@edgeMappings[name='COC_OC_Generalization']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Generalization.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:CreateInstance" typeName="AbstractCapabilityGeneralization" referenceName="superGeneralizations">
                <subModelOperations xsi:type="tool:SetValue" featureName="super" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" name="operational.actors" label="%oa.ocb.operational.actors" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="visibleActors" computationExpression="aql:self.void2Null(elementView.getDisplayedContainerActors())"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="visibleActorViews" computationExpression="aql:self.void2Null(elementView.getDisplayedActorContainerViews())"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectActors" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(elementView.getOCBActors())"/>
                  <parameters name="resultVariable" value="selectedActors"/>
                  <parameters name="wizardMessage" value="aql:'Select actors to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:visibleActors"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedActors = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="ShowHideActors" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.ShowHideMCComponents">
                    <parameters name="view" value="aql:elementView"/>
                    <parameters name="selected components" value="aql:self.void2Null(selectedActors)"/>
                    <parameters name="components" value="aql:visibleActors"/>
                    <parameters name="visible component views" value="aql:visibleActorViews"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" name="operational.capabilities" label="%oa.ocb.operational.capabilities" precondition="aql:elementView->filter(diagram::DDiagram)->size() > 0" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element">
              <subVariables xsi:type="tool:AcceleoVariable" name="semanticCandidate" computationExpression="AbstractCapability"/>
            </element>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.genericSelectElements()">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (resultVariable = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.genericShowHideElements()"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" name="operational.entities" label="%oa.ocb.operational.entities" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="visibleComponents" computationExpression="aql:self.void2Null(elementView.getDisplayedContainerComponents())"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="visibleComponentViews" computationExpression="aql:self.void2Null(elementView.getDisplayedComponentContainerViews())"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectComponents" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectElementsFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(elementView.getOCBEntities())"/>
                  <parameters name="resultVariable" value="selectedComponents"/>
                  <parameters name="wizardMessage" value="aql:'Select components to show in ' + element.name + '.'"/>
                  <parameters name="initialSelection" value="aql:visibleComponents"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedComponents = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:ExternalJavaAction" name="ShowHideComponents" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.ShowHideMCComponents">
                    <parameters name="view" value="aql:elementView"/>
                    <parameters name="selected components" value="aql:self.void2Null(selectedComponents)"/>
                    <parameters name="visible components" value="aql:visibleComponents"/>
                    <parameters name="visible component views" value="aql:visibleComponentViews"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert/Remove Relationships" name="relationships" label="%oa.ocb.relationships" precondition="aql:elementView.getDiagramContainer() != elementView and (self.oclIsKindOf(oa::Entity) or self.oclIsKindOf(interaction::AbstractCapability))" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                  <parameters name="context" value="aql:element"/>
                  <parameters name="variable" value="scope"/>
                  <parameters name="value" value="aql:element.getCapabilityDiagramScopeInsertRelationship(diagram)"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectRelationships" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:scope"/>
                  <parameters name="initialSelection" value="aql:diagram.getInitialSelection(scope)"/>
                  <parameters name="resultVariable" value="selectedRelationships"/>
                  <parameters name="wizardMessage" value="aql:'Select Relationships to show in ' + element.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedRelationships != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element.showHideRelationshipInCapabilityDiagram(elementView,selectedRelationships,scope)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Entities From Project Explorer" precondition="aql:element.oclIsKindOf(oa::Entity) and element.partitionableElementCanBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@containerMappings[name='COC_OperationalEntities']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Operational Capabilities From Project Explorer" precondition="aql:element.oclIsKindOf(oa::OperationalCapability) and element.canBeDropped(newViewContainer)" forceRefresh="true" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@nodeMappings[name='COC_OperationalCapabilities']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Constraints From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" forceRefresh="true" dragSource="PROJECT_EXPLORER">
            <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%oa.ocb.constraint" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%oa.ocb.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%oa.ocb.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV']"/>
          <reusedTools xsi:type="tool_1:ContainerDropDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
          <reusedTools xsi:type="tool:PopupMenu" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu']"/>
          <reusedTools xsi:type="tool:ToolDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']"/>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:CrossTableDescription" name="Requirements - Operational Activities" preconditionExpression="aql:self.eContainerOrSelf(cs::BlockArchitecture).oclIsKindOf(oa::OperationalAnalysis)" domainClass="RequirementsPkg">
      <ownedLineMappings name="Requirements" domainClass="NamedElement" semanticCandidatesExpression="aql:self" headerLabelExpression="aql:self.getRequirementElementLabel()">
        <ownedSubLines name="Sub Requirements" reusedSubLines="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Requirements%20-%20Operational%20Activities']/@ownedLineMappings[name='Requirements']/@ownedSubLines[name='Sub%20Requirements']" reusedInMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Requirements%20-%20Operational%20Activities']/@ownedLineMappings[name='Requirements']/@ownedSubLines[name='Sub%20Requirements%20Pkg'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Requirements%20-%20Operational%20Activities']/@ownedLineMappings[name='Requirements']/@ownedSubLines[name='Sub%20Requirements']" domainClass="NamedElement" semanticCandidatesExpression="aql:self.ownedRequirements" headerLabelExpression="aql:self.getRequirementElementLabel()">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <ownedSubLines name="Sub Requirements Pkg" reusedSubLines="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Requirements%20-%20Operational%20Activities']/@ownedLineMappings[name='Requirements']/@ownedSubLines[name='Sub%20Requirements'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Requirements%20-%20Operational%20Activities']/@ownedLineMappings[name='Requirements']/@ownedSubLines[name='Sub%20Requirements%20Pkg']" reusedInMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Requirements%20-%20Operational%20Activities']/@ownedLineMappings[name='Requirements']/@ownedSubLines[name='Sub%20Requirements%20Pkg']" domainClass="NamedElement" semanticCandidatesExpression="feature:extended" headerLabelExpression="aql:self.getRequirementElementLabel()">
          <delete name="No delete" precondition="false">
            <variables name="element" documentation="The currently edited element."/>
            <variables name="root" documentation="The semantic element corresponding to the current table."/>
          </delete>
        </ownedSubLines>
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedLineMappings>
      <ownedColumnMappings name="Functions" headerLabelExpression="feature:name" domainClass="NamedElement" semanticCandidatesExpression="aql:self.getRFColumnCandidates()">
        <delete name="No delete" precondition="false">
          <variables name="element" documentation="The currently edited element."/>
          <variables name="root" documentation="The semantic element corresponding to the current table."/>
        </delete>
      </ownedColumnMappings>
      <intersection name="Trace Function" semanticElements="aql:self.makeUnion(self, self.eContainer())" lineMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Requirements%20-%20Operational%20Activities']/@ownedLineMappings[name='Requirements']/@ownedSubLines[name='Sub%20Requirements']" columnMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Requirements%20-%20Operational%20Activities']/@ownedColumnMappings.0" labelExpression="aql:self.getRFLabel(lineSemantic,columnSemantic)" useDomainClass="true" columnFinderExpression="feature:sourceElement" lineFinderExpression="feature:targetElement" semanticCandidatesExpression="aql:self.getRFColumnCandidates().outgoingTraces->select(outgoingTrace | outgoingTrace.oclIsKindOf(requirement::RequirementsTrace))" domainClass="RequirementsTrace">
        <directEdit>
          <variables name="table" documentation="The current DTable."/>
          <variables name="line" documentation="The DLine of the current DCell."/>
          <variables name="element" documentation="The currently edited element."/>
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic element of the table."/>
          <firstModelOperation xsi:type="tool:If" conditionExpression="aql:arg0 = ''">
            <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)">
              <subModelOperations xsi:type="tool:RemoveElement"/>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </directEdit>
        <create name="TR6" forceRefresh="true">
          <variables name="lineSemantic" documentation="The semantic element corresponding to the line."/>
          <variables name="columnSemantic" documentation="The semantic element corresponding to the column."/>
          <variables name="root" documentation="The semantic root element of the table."/>
          <firstModelOperation xsi:type="tool:ChangeContext" browseExpression="aql:columnSemantic">
            <subModelOperations xsi:type="tool:If" conditionExpression="aql:arg0 = 'X' and lineSemantic.incomingTraces->select(incomingTrace | incomingTrace.sourceElement = columnSemantic)->size() = 0">
              <subModelOperations xsi:type="tool:CreateInstance" typeName="RequirementsTrace" referenceName="ownedTraces">
                <subModelOperations xsi:type="tool:SetValue" featureName="sourceElement" valueExpression="aql:columnSemantic"/>
                <subModelOperations xsi:type="tool:SetValue" featureName="targetElement" valueExpression="aql:lineSemantic"/>
              </subModelOperations>
            </subModelOperations>
          </firstModelOperation>
          <mask mask="{0}"/>
        </create>
      </intersection>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:DiagramDescription" name="Contextual Operational Capability" label="%oa.coc" titleExpression="aql:'[COC] ' + self.name" domainClass="OperationalCapability">
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Entities%20From%20Project%20Explorer']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Constraints%20From%20Project%20Explorer']"/>
      <dropDescriptions href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Operational%20Capabilities%20From%20Project%20Explorer']"/>
      <dropDescriptions href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.entities.filter" label="%oa.coc.hide.entities.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@containerMappings[name='COC2_Entities']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.involvement.links.filter" label="%oa.coc.hide.involvement.links.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_EntityCapabilityInvolvement']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.operational.capability.extends.filter" label="%oa.coc.hide.operational.capability.extends.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_OC_Extends']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.operational.capability.includes.filter" label="%oa.coc.hide.operational.capability.includes.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_OC_Include']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.operational.capability.generalizations.filter" label="%oa.coc.hide.operational.capability.generalizations.filter">
        <filters xsi:type="filter:MappingFilter" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_OC_Generalization']"/>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.property.values.filter" label="%oa.coc.hide.property.values.filter">
        <filters xsi:type="filter:MappingFilter">
          <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.diagram.title.blocks.filter" label="%common.hide.diagram.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:not (self.isDiagramTitleBlock())">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <filters xsi:type="filter:CompositeFilterDescription" name="hide.element.title.blocks.filter" label="%common.hide.element.title.blocks.filter">
        <filters xsi:type="filter:MappingFilter" semanticConditionExpression="aql:self.isDiagramTitleBlock()">
          <mappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        </filters>
      </filters>
      <defaultLayer name="Default">
        <nodeMappings name="COC2_OperationalCapabilities" navigationDescriptions="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Existing%20Activity%20Scenario'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Existing%20Entity%20Scenario'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='Existing%20Contextual%20Operational%20Capabilty']" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='OA%20COC%20Direct%20Edit%20Label']" createElements="false" domainClass="OperationalCapability">
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Activity%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Activity%20Scenario']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Interaction%20Scenario']/@defaultLayer/@toolSections.0/@ownedTools[name='Entity%20Scenario%20']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="#//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='Contextual%20Operational%20Capabilty']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Activity%20Interaction%20Blank']"/>
          <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/OperationalCapability.svg">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self = container">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" labelExpression="service:capellaLabelService(view, diagram)" sizeComputationExpression="7" workspacePath="/org.polarsys.capella.core.sirius.analysis/description/images/OperationalCapability.svg">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <edgeMappings name="COC2_EntityCapabilityInvolvement" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='OA%20COC%20Direct%20Edit%20Label']" semanticCandidatesExpression="service:diagram.getMBCapabilityInvolvementSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@nodeMappings[name='COC2_OperationalCapabilities']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@containerMappings[name='COC2_Entities']" targetFinderExpression="aql:self.involved" sourceFinderExpression="aql:self.involver" domainClass="EntityOperationalCapabilityInvolvement" useDomainElement="true">
          <style>
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="COC2_OC_Extends" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='OA%20COC%20Direct%20Edit%20Label']" semanticCandidatesExpression="service:diagram.getMBCapabilityExtendSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@nodeMappings[name='COC2_OperationalCapabilities']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@nodeMappings[name='COC2_OperationalCapabilities']" targetFinderExpression="aql:self.extended" sourceFinderExpression="aql:self.extension" domainClass="AbstractCapabilityExtend" useDomainElement="true">
          <style lineStyle="dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="&#xab; e &#xbb;">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="COC2_OC_Include" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='OA%20COC%20Direct%20Edit%20Label']" semanticCandidatesExpression="service:diagram.getMBCapabilityIncludeSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@nodeMappings[name='COC2_OperationalCapabilities']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@nodeMappings[name='COC2_OperationalCapabilities']" targetFinderExpression="aql:self.included" sourceFinderExpression="aql:self.inclusion" domainClass="AbstractCapabilityInclude" useDomainElement="true">
          <style lineStyle="dot">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="&#xab; i &#xbb;">
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="COC2_OC_Generalization" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='OA%20COC%20Direct%20Edit%20Label']" semanticCandidatesExpression="service:diagram.getMBCapabilityGeneralizationSemanticCandidates" semanticElements="aql:self" sourceMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@nodeMappings[name='COC2_OperationalCapabilities']" targetMapping="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@nodeMappings[name='COC2_OperationalCapabilities']" targetFinderExpression="aql:self.super" sourceFinderExpression="aql:self.sub" domainClass="AbstractCapabilityGeneralization" useDomainElement="true">
          <deletionDescription href="context.odesign#//@ownedViewpoints[name='System%20Analysis']/@ownedRepresentations[name='Contextual%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']"/>
          <style lineStyle="dot" targetArrow="InputClosedArrow">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="COC2_Entities" deletionDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Entity%20Breakdown']/@defaultLayer/@toolSections.0/@ownedTools[name='capellaElement']" labelDirectEdit="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='OA%20COC%20Direct%20Edit%20Label']" createElements="false" domainClass="Entity" dropDescriptions="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20Entities%20From%20Project%20Explorer']" reusedContainerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@containerMappings[name='COC2_Entities']">
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Entity%20Breakdown']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Entity%20Blank']"/>
          <detailDescriptions xsi:type="tool_1:DiagramCreationDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Capella%20Architecture']/@defaultLayer/@toolSections.0/@ownedTools[name='Operational%20Role%20Blank']"/>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelExpression="service:capellaLabelService(view, diagram)" backgroundStyle="GradientTopToBottom">
            <borderColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_border']"/>
            <labelColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_label']"/>
            <backgroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray_min']"/>
            <foregroundColor xsi:type="description:UserFixedColor" href="common.odesign#//@userColorsPalettes[name='Migration%20Palette']/@entries[name='_CAP_Entity_Gray']"/>
          </style>
        </containerMappings>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
        <reusedMappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_PVGconnector']"/>
        <reusedMappings xsi:type="description_2:ContainerMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']"/>
        <reusedMappings xsi:type="description_2:EdgeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_TitleBlockEdge']"/>
        <toolSections name="tools" reusedTools="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='operational.actors'] //@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Operational%20Capabilities%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='operational.entities']">
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Operational Entity" name="operational.entity" label="%oa.coc.operational.entity" precondition="aql:not (container.isActor())" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@containerMappings[name='COC2_Entities']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Entity.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getOEBTarget()">
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.oclIsKindOf(oa::Entity)">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="Entity" referenceName="ownedEntities" variableName="entity">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.oclIsKindOf(oa::EntityPkg)">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="Entity" referenceName="ownedEntities" variableName="entity">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (self.oclIsKindOf(oa::Entity)) and not (self.oclIsKindOf(oa::EntityPkg))">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.getRootEntityPkg()">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="Entity" referenceName="ownedEntities" variableName="entity">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerCreationDescription" documentation="Creates a new Operational Actor" name="operational.actor" label="%oa.coc.operational.actor" precondition="aql:not (container.isActor())" containerMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@containerMappings[name='COC2_Entities']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/OperationalActor.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:containerView.getOEBTarget()">
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.oclIsKindOf(oa::Entity)">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="oa::Entity" referenceName="ownedEntities" variableName="entity">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()">
                        <subModelOperations xsi:type="tool:SetValue" featureName="actor" valueExpression="true"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="human" valueExpression="true"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:self.oclIsKindOf(oa::EntityPkg)">
                    <subModelOperations xsi:type="tool:CreateInstance" typeName="oa::Entity" referenceName="ownedEntities" variableName="entity">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()">
                        <subModelOperations xsi:type="tool:SetValue" featureName="actor" valueExpression="true"/>
                        <subModelOperations xsi:type="tool:SetValue" featureName="human" valueExpression="true"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (self.oclIsKindOf(oa::Entity)) and not (self.oclIsKindOf(oa::EntityPkg))">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.getRootEntityPkg()">
                      <subModelOperations xsi:type="tool:CreateInstance" typeName="oa::Entity" referenceName="ownedEntities" variableName="entity">
                        <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()">
                          <subModelOperations xsi:type="tool:SetValue" featureName="actor" valueExpression="true"/>
                          <subModelOperations xsi:type="tool:SetValue" featureName="human" valueExpression="true"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Creates a new Operational Capability." name="operational.capability" label="%oa.coc.operational.capability" nodeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@nodeMappings[name='COC2_OperationalCapabilities']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/CapabilityUseCase.gif">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container.eContainer()">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="OperationalCapability" referenceName="ownedOperationalCapabilities" variableName="capa">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Creates a new Involvement relationship between a source Operational Capability and a target Operational Entity / Actor" name="involvement" label="%oa.coc.involvement" precondition="aql:not (preSource.ownedEntityOperationalCapabilityInvolvements.involved->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_EntityCapabilityInvolvement']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="EntityOperationalCapabilityInvolvement" referenceName="ownedEntityOperationalCapabilityInvolvements">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                  <subModelOperations xsi:type="tool:SetValue" featureName="involved" valueExpression="aql:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Create a new Operational Capability Extension relationship between the Source and Target Operational Capabilities." name="extends" label="%oa.coc.extends" precondition="aql:not (preSource.extends.extended->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_OC_Extends']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Extend.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="AbstractCapabilityExtend" referenceName="extends">
                  <subModelOperations xsi:type="tool:SetValue" featureName="extended" valueExpression="aql:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Create a new Operational Capability Inclusion relationship between the Source and Target Operational Capabilities." name="includes" label="%oa.coc.includes" precondition="aql:not (preSource.includes.included->includes(preTarget))" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_OC_Include']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Include.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="AbstractCapabilityInclude" referenceName="includes">
                  <subModelOperations xsi:type="tool:SetValue" featureName="included" valueExpression="aql:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Create a new Operational Capability Generalization relationship between the Source and Target Super Operational Capabilities." name="operational.capability.generalization" label="%oa.coc.operational.capability.generalization" precondition="aql:not (self.getAllSuperCapabilities(preTarget)->includes(preSource)) and self.eAllContents()->filter(interaction::AbstractCapabilityGeneralization)->select(x | x.sub = preSource and x.super = preTarget)->size() = 0" edgeMappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@edgeMappings[name='COC2_OC_Generalization']" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Generalization.gif">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:CreateInstance" typeName="AbstractCapabilityGeneralization" referenceName="superGeneralizations">
                <subModelOperations xsi:type="tool:SetValue" featureName="super" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" name="operational.capabilities" label="%oa.coc.operational.capabilities" precondition="aql:elementView->filter(diagram::DDiagram)->size() > 0" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element">
              <subVariables xsi:type="tool:AcceleoVariable" name="semanticCandidate" computationExpression="AbstractCapability"/>
            </element>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.genericSelectElements()">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (resultVariable = 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.genericShowHideElements()"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Insert/Remove Relationships" name="relationships" label="%oa.coc.relationships" precondition="aql:elementView.getDiagramContainer() != elementView and (self.oclIsKindOf(oa::Entity) or self.oclIsKindOf(interaction::AbstractCapability))" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="setVariable" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SetVariable">
                  <parameters name="context" value="aql:element"/>
                  <parameters name="variable" value="scope"/>
                  <parameters name="value" value="aql:element.getCapabilityDiagramScopeInsertRelationship(diagram)"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectRelationships" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:scope"/>
                  <parameters name="initialSelection" value="aql:diagram.getInitialSelection(scope)"/>
                  <parameters name="resultVariable" value="selectedRelationships"/>
                  <parameters name="wizardMessage" value="aql:'Select Relationships to show in ' + element.name + '.'"/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedRelationships != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:element.showHideRelationshipInCapabilityDiagram(elementView,selectedRelationships,scope)"/>
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramCreationDescription" name="Contextual Operational Capabilty" titleExpression="aql:'[COC] ' + self.name" diagramDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']">
            <initialOperation/>
            <containerViewVariable name="containerView"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DiagramNavigationDescription" name="Existing Contextual Operational Capabilty" diagramDescription="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']">
            <containerViewVariable name="containerView"/>
            <containerVariable name="container"/>
            <representationNameVariable name="diagramName"/>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Entities From Project Explorer" precondition="aql:element.oclIsKindOf(oa::Entity) and element.partitionableElementCanBeDropped(newViewContainer)" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@containerMappings[name='COC2_Entities']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Operational Capabilities From Project Explorer" precondition="aql:element.oclIsKindOf(oa::OperationalCapability) and element.canBeDropped(newViewContainer)" mappings="//@ownedViewpoints[name='Operational%20Analysis']/@ownedRepresentations[name='Contextual%20Operational%20Capability']/@defaultLayer/@nodeMappings[name='COC2_OperationalCapabilities']" dragSource="PROJECT_EXPLORER">
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:ContainerDropDescription" name="D&amp;D Constraints From Project Explorer" precondition="aql:element.oclIsKindOf(capellacore::Constraint) and element.canBeDropped(newViewContainer)" dragSource="PROJECT_EXPLORER">
            <mappings xsi:type="description_2:NodeMapping" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <oldContainer name="oldSemanticContainer"/>
            <newContainer name="newSemanticContainer"/>
            <element name="element"/>
            <newViewContainer name="newContainerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.void2Null(element)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:DirectEditLabel" name="OA COC Direct Edit Label" inputLabelExpression="feature:name">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:SetValue" featureName="name" valueExpression="aql:arg0"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="Common">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" documentation="Create a new Constraint." name="constraint" label="%oa.coc.constraint" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/Constraint.gif">
            <nodeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_Contraint']"/>
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:container">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:containerView->filter(diagram::DDiagram)->size() = 1">
                  <subModelOperations xsi:type="tool:CreateInstance" typeName="Constraint" referenceName="ownedConstraints">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.creationService()"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" documentation="Allocate a Source Constraint to an available Target Capella Element." name="constraint.element" label="%oa.coc.constraint.element" precondition="aql:not (preSource.constrainedElements->includes(preTarget))" forceRefresh="true" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ClassCarries.gif">
            <edgeMappings href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@edgeMappings[name='DT_ContrainedElements']"/>
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:If" conditionExpression="aql:source->filter(capellacore::Constraint)->size() = 1">
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() = 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                    <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="aql:target" featureName="ownedConstraints"/>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:source.constrainedElements->size() != 0">
                  <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool:SetValue" featureName="constrainedElements" valueExpression="aql:target"/>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolDescription" documentation="Creates or deletes graphical objects corresponding to existing Constraints. Removing a Constraint graphical object does not delete this Constraint from the model. This tool does not modify the semantic model." name="constraints" label="%oa.coc.constraints" iconPath="/org.polarsys.capella.core.sirius.analysis/icons/full/obj16/ShowHide.gif">
            <element name="element"/>
            <elementView name="elementView">
              <subVariables xsi:type="tool:AcceleoVariable" name="constraintsInDiagram" computationExpression="aql:self.void2Null(self.getExistingConstraintsFromDiagram(elementView.getDiagramContainer()))"/>
              <subVariables xsi:type="tool:AcceleoVariable" name="diagram" computationExpression="aql:elementView.eContainerOrSelf(diagram::DDiagram)"/>
            </elementView>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView">
                <subModelOperations xsi:type="tool:ExternalJavaAction" name="selectedConstraints" id="org.polarsys.capella.core.sirius.analysis.actions.extensions.SelectLinksFromTransferWizard">
                  <parameters name="context" value="aql:elementView"/>
                  <parameters name="scope" value="aql:self.void2Null(self.makeDiff(self.getConstraintToInsertInDiagram(), constraintsInDiagram))"/>
                  <parameters name="initialSelection" value="aql:constraintsInDiagram"/>
                  <parameters name="resultVariable" value="selectedConstraints"/>
                  <parameters name="wizardMessage" value="Select Constraints to show."/>
                </subModelOperations>
                <subModelOperations xsi:type="tool:If" conditionExpression="aql:(selectedConstraints != 'WIZARD_CANCELED')">
                  <subModelOperations xsi:type="tool:For" expression="aql:self.void2Null(selectedConstraints)">
                    <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self.createConstraintWithConstaintedElementInDiagram(i,diagram,constraintsInDiagram,true)"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool:For" expression="aql:constraintsInDiagram">
                    <subModelOperations xsi:type="tool:If" conditionExpression="aql:not (selectedConstraints->includes(i))">
                      <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().getNodesAndNodeListElements()->select(getNodesAndNodeListElement | getNodesAndNodeListElement.target = i)->first()">
                        <subModelOperations xsi:type="tool:DeleteView"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </subModelOperations>
                <subModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:elementView.getDiagramContainer().forceRefresh()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='PV']"/>
          <reusedTools xsi:type="tool_1:ContainerDropDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='D%26D%20PV%20From%20Project%20Explorer']"/>
          <reusedTools xsi:type="tool:PopupMenu" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='select.menu']"/>
          <reusedTools xsi:type="tool:ToolDescription" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='diagram.title.block']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='ElementTitleBlock']"/>
          <reusedTools xsi:type="tool_1:ToolGroup" href="common.odesign#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.1/@ownedTools[name='Show%2FHide%20TitleBlocks']"/>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.CapellaServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.FunctionalChainServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sequencediag.ScenarioService"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sequencediag.InteractionAspectService"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.OAServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sequencediag.ScenarioContraintsService"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.SequenceDiagramServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.FaServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.RequirementServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.CsServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.DiagramServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.DFServices"/>
    <ownedJavaExtensions qualifiedClassName="org.polarsys.capella.core.sirius.analysis.ABServices"/>
  </ownedViewpoints>
</description:Group>
