<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="capellacommon" nsURI="http://www.polarsys.org/capella/core/common/1.4.0"
    nsPrefix="org.polarsys.capella.core.data.capellacommon">
  <eAnnotations source="http://www.polarsys.org/capella/2007/UML2Mapping">
    <details key="profileName" value="Capella"/>
  </eAnnotations>
  <eAnnotations source="http://www.polarsys.org/kitalpha/emde/1.0.0/extension">
    <details key="trackResourceModification" value="true"/>
    <details key="useUUIDs" value="false"/>
    <details key="useIDAttributes" value="true"/>
    <details key="extensibleProviderFactory" value="true"/>
    <details key="childCreationExtenders" value="true"/>
  </eAnnotations>
  <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
    <details key="description" value="CapellaCommon aims at defining other concepts (mainly used to solve the constraints arisen from the 4.2.1 rationale). It concretises the Activity and the State machines.&#xD;&#xA;[source: Capella study]"/>
    <details key="usage guideline" value="none"/>
    <details key="used in levels" value="operational,system,logical,physical,epbs"/>
    <details key="usage examples" value="none"/>
    <details key="constraints" value="This package depends on the model CapellaCore.ecore&#xD;&#xA;This package depends on the model Activity.ecore&#xD;&#xA;This package depends on the model StateMachine.ecore"/>
    <details key="comment/notes" value="none"/>
    <details key="reference documentation" value="none"/>
  </eAnnotations>
  <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
  <eClassifiers xsi:type="ecore:EClass" name="AbstractCapabilityPkg" abstract="true"
      eSuperTypes="CapellaCore.ecore#//Structure">
    <eAnnotations source="http://www.polarsys.org/capella/2007/BusinessInformation">
      <details key="Label" value="Aspect"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/2007/UML2Mapping">
      <details key="metaclass" value="NamedElement"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="an abstract base class for deriving packages containing Capability entities&#xD;&#xA;[source: Capella study]"/>
      <details key="usage guideline" value="n/a (Abstract)"/>
      <details key="used in levels" value="n/a"/>
      <details key="usage examples" value="n/a"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value=""/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GenericTrace" eSuperTypes="CapellaCore.ecore#//Trace">
    <eAnnotations source="http://www.polarsys.org/capella/2007/BusinessInformation">
      <details key="Label" value="GenericTrace"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/2007/UML2Mapping">
      <details key="metaclass" value="Dependency"/>
      <details key="stereotype" value="eng.GenericTrace"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/2007/ImpactAnalysis/Ignore"/>
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="a Trace relationship (in the UML sense) to which can be associated a set of key/value pairs characterizing the trace.&#xD;&#xA;[source: Capella study]"/>
      <details key="usage guideline" value="n/a (Abstract)"/>
      <details key="used in levels" value="operational, system, logical, physical, epbs"/>
      <details key="usage examples" value="n/a"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value=""/>
      <details key="explanation" value="coud be uml::Dependency, but left empty so that this element is not actually available/transformed for the end user.&#xD;&#xA;This is a feature of Capella that is not available in Capella/MAX anyway."/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="keyValuePairs" upperBound="-1"
        eType="ecore:EClass CapellaCore.ecore#//KeyValue" containment="true" resolveProxies="false">
      <eAnnotations source="http://www.polarsys.org/capella/2007/UML2Mapping">
        <details key="featureName" value="ownedComment"/>
        <details key="featureOwner" value="Element"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/2007/BusinessInformation">
        <details key="Label" value="keyValuePairs"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/2007/ImpactAnalysis/Segment"/>
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="the list of key/value pairs that characterize this trace relationship&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::Element::ownedComment"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="uml::Element::ownedComment elements on which KeyValue stereotype or any stereotype that inherits from it is applied&#xD;&#xA;Order must be computed"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1"
        eType="ecore:EClass ../../org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#//TraceableElement"
        changeable="false" volatile="true" transient="true" derived="true" resolveProxies="false">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="alias"/>
        <details key="viatra.expression" value="sourceElement"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
        eType="ecore:EClass ../../org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#//TraceableElement"
        changeable="false" volatile="true" transient="true" derived="true" resolveProxies="false">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="alias"/>
        <details key="viatra.expression" value="targetElement"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TransfoLink" eSuperTypes="#//GenericTrace">
    <eAnnotations source="http://www.polarsys.org/capella/2007/BusinessInformation">
      <details key="Label" value="TransfoLink"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/2007/UML2Mapping">
      <details key="metaclass" value="Dependency"/>
      <details key="stereotype" value="eng.TransfoLink"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/2007/ImpactAnalysis/Ignore"/>
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="specialized trace to keep track of relationships between source elements of a transformation, and destination elements.&#xD;&#xA;[source: Capella study]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical, epbs"/>
      <details key="usage examples" value="n/a"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value=""/>
      <details key="explanation" value="uml::Dependency"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="JustificationLink" eSuperTypes="#//GenericTrace">
    <eAnnotations source="http://www.polarsys.org/capella/2007/BusinessInformation">
      <details key="Label" value="JustificationLink"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/2007/ImpactAnalysis/Ignore"/>
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="specialized trace to keep track of relationships between source elements of a transformation, and destination elements.&#xD;&#xA;[source: Capella study]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical, epbs"/>
      <details key="usage examples" value="n/a"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value=""/>
      <details key="explanation" value="uml::Dependency"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CapabilityRealizationInvolvement" eSuperTypes="CapellaCore.ecore#//Involvement">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="an involvement relationship of an entity in the capability that it realizes&#xD;&#xA;[source: Capella study]"/>
      <details key="usage guideline" value="n/a (Abstract)"/>
      <details key="used in levels" value="n/a"/>
      <details key="usage examples" value="n/a"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value=""/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="involvedCapabilityRealizationInvolvedElement"
        lowerBound="1" eType="#//CapabilityRealizationInvolvedElement" changeable="false"
        volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="alias"/>
        <details key="viatra.expression" value="involved"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="(automatically computed) the involved element&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="keyword::none"/>
        <details key="explanation" value="Derived and transient"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CapabilityRealizationInvolvedElement"
      abstract="true" eSuperTypes="CapellaCore.ecore#//InvolvedElement">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="a model element involved in the realization of a Capability&#xD;&#xA;[source: Capella study]"/>
      <details key="usage guideline" value="n/a (Abstract)"/>
      <details key="used in levels" value="n/a"/>
      <details key="usage examples" value="n/a"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value=""/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="capabilityRealizationInvolvements"
        upperBound="-1" eType="#//CapabilityRealizationInvolvement" changeable="false"
        volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="the capability realization involvement relationships in which this element is referenced&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="alias"/>
        <details key="viatra.expression" value="involvingInvolvements"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="involvingCapabilityRealizations"
        upperBound="-1" eType="ecore:EClass LogicalArchitecture.ecore#//CapabilityRealization"
        changeable="false" volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="Capability realizations that involve this element"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="patternbody"/>
        <details key="viatra.expression" value="CapabilityRealizationInvolvedElement.capabilityRealizationInvolvements(self, involvements);&#xD;&#xA;CapabilityRealizationInvolvement.involver(involvements, target);"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StateMachine" eSuperTypes="CapellaCore.ecore#//CapellaElement ../../org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#//AbstractBehavior">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="State machines can be used to express the behavior of part of a system. Behavior is modeled as a traversal of a graph of&#xD;&#xA;state nodes interconnected by one or more joined transition arcs that are triggered by the dispatching of series of (event)&#xD;&#xA;occurrences. During this traversal, the state machine executes a series of activities associated with various elements of the&#xD;&#xA;state machine.&#xD;&#xA;[source: UML superstructure v2.2]&#xD;&#xA;"/>
      <details key="usage guideline" value="a state machine is created (usually through the creation of a state or mode diagram, declaring states, modes, and transitions between them) as a support to specify the dynamic behavior of an entity"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="usage examples" value="../img/usage_examples/example_statemachine.png"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::StateMachine"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedRegions" upperBound="-1"
        eType="#//Region" containment="true">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="The regions owned directly by the state machine.&#xD;&#xA;[source:UML Superstructure v2.2]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::StateMachine::region"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="Order must be computed"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedConnectionPoints"
        upperBound="-1" eType="#//Pseudostate" containment="true">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="The entry and exit Pseudostates of a composite State. These can only be entry or exit Pseudostates, and they must have different names. They can only be defined for composite States.&#xD;&#xA;[source:UML v2.5]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::StateMachine::connectionPoint"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="Order must be computed"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Region" eSuperTypes="CapellaCore.ecore#//NamedElement">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="A region is an orthogonal part of either a composite state or a state machine. It contains states and transitions.&#xD;&#xA;[source: UML superstructure v2.2]"/>
      <details key="usage guideline" value="in Capella, a Region is automatically created when creating a state/mode diagram"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="usage examples" value="n/a"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::Region"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedStates" upperBound="-1"
        eType="#//AbstractState" containment="true">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="The set of states owned by the region.&#xD;&#xA;[source:Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::Region::subvertex"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="Order must be computed"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedTransitions" upperBound="-1"
        eType="#//StateTransition" containment="true">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="The set of transitions owned by the region. Note that internal transitions are owned by a region, but applies to the&#xD;&#xA;source state.&#xD;&#xA;[source:UML Superstructure v2.2]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::Region::transition"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="Order must be computed"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="involvedStates" upperBound="-1"
        eType="#//AbstractState">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="the list of elements that are involved in this region"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="keyword::none"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="State" eSuperTypes="#//AbstractState">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="A state models a situation during which some (usually implicit) invariant condition holds. &#xD;&#xA;[source: UML superstructure v2.2]&#xD;&#xA;&#xD;&#xA;A condition of a system or element, as defined by some of its properties, which can enable system behaviors and/or structure to occur. Note: The enabled behavior may include no actions, such as associated with a wait state. Also, the condition that defines the state may be dependent on one or more previous states&#xD;&#xA;[source: UML for SE RFP]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="usage examples" value="../img/usage_examples/example_statemachine.png"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::State"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedRegions" upperBound="-1"
        eType="#//Region" containment="true">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="The regions owned directly by the state.&#xD;&#xA;[source:UML Superstructure v2.2]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::State::region"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="Order must be computed"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedConnectionPoints"
        upperBound="-1" eType="#//Pseudostate" containment="true">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="The entry and exit Pseudostates of a composite State. These can only be entry or exit Pseudostates, and they must have different names. They can only be defined for composite States.&#xD;&#xA;[source:UML v2.5]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::State::connectionPoint"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="Order must be computed"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="availableAbstractFunctions"
        upperBound="-1" eType="ecore:EClass FunctionalAnalysis.ecore#//AbstractFunction"
        changeable="false" volatile="true" transient="true" derived="true" resolveProxies="false">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="opposite"/>
        <details key="viatra.expression" value="availableInStates"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="availableFunctionalChains"
        upperBound="-1" eType="ecore:EClass FunctionalAnalysis.ecore#//FunctionalChain"
        changeable="false" volatile="true" transient="true" derived="true" resolveProxies="false">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="opposite"/>
        <details key="viatra.expression" value="availableInStates"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="availableAbstractCapabilities"
        upperBound="-1" eType="ecore:EClass Interaction.ecore#//AbstractCapability"
        changeable="false" volatile="true" transient="true" derived="true" resolveProxies="false">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="opposite"/>
        <details key="viatra.expression" value="availableInStates"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="entry" upperBound="-1"
        eType="ecore:EClass ../../org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#//AbstractEvent">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="An optional behavior that is executed whenever this state is entered regardless of the transition taken to reach the state. If&#xD;&#xA;defined, entry actions are always executed to completion prior to any internal behavior or transitions performed within the&#xD;&#xA;state.&#xD;&#xA;[source:UML Superstructure v2.2]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::State::entry"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="Multiplicity must be [0..1]"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="doActivity" upperBound="-1"
        eType="ecore:EClass ../../org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#//AbstractEvent">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="An optional behavior that is executed while being in the state. The execution starts when this state is entered, and stops&#xD;&#xA;either by itself or when the state is exited whichever comes first.&#xD;&#xA;[source:UML Superstructure v2.2]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::State::doActivity"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="Multiplicity must be [0..1]"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="exit" upperBound="-1" eType="ecore:EClass ../../org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#//AbstractEvent">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="An optional behavior that is executed whenever this state is exited regardless of which transition was taken out of the&#xD;&#xA;state. If defined, exit actions are always executed to completion only after all internal activities and transition actions have&#xD;&#xA;completed execution.&#xD;&#xA;[source:UML Superstructure v2.2]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::State::exit"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="Multiplicity must be [0..1]"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="stateInvariant" eType="ecore:EClass ../../org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#//AbstractConstraint"
        containment="true">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="Specifies conditions that are always true when this state is the current state. In protocol state machines, state invariants are&#xD;&#xA;additional conditions to the preconditions of the outgoing transitions, and to the postcondition of the incoming transitions.&#xD;&#xA;[source:UML Superstructure v2.2]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::State::stateInvariant"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Mode" eSuperTypes="#//State">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="A condition which characterizes an expected behaviour through the set of functions or elements available at a point in time."/>
      <details key="usage guideline" value="the main difference between a mode and a state, two close notions, is that the notion of mode is more intended to represent the availability level of the system (example : fully operational mode, degraded mode, maintenance mode, ...)"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="usage examples" value="../img/usage_examples/example_mode.png"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value=""/>
      <details key="explanation" value="uml::State"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FinalState" eSuperTypes="#//State">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="A special kind of state signifying that the enclosing region is completed. If the enclosing region is directly contained in a&#xD;&#xA;state machine and all other regions in the state machine also are completed, then it means that the entire state machine is&#xD;&#xA;completed.&#xD;&#xA;[source: UML superstructure v2.2]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="usage examples" value="../img/usage_examples/example_statemachine.png"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::FinalState"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AbstractState" abstract="true" eSuperTypes="CapellaCore.ecore#//NamedElement ../../org.polarsys.capella.common.data.core.gen/model/ModellingCore.ecore#//IState">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="an abstract base class to define various kinds of states (typically real states and pseudo states)&#xD;&#xA;[source: Capella study]"/>
      <details key="usage guideline" value="n/a (Abstract)"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="usage examples" value="n/a"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value=""/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedAbstractStateRealizations"
        upperBound="-1" eType="#//AbstractStateRealization" containment="true">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="the realization links that are owned/contained in this AbstractState&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="keyword::nearestpackage"/>
        <details key="explanation" value="Elements are contained in the nearest possible parent container."/>
        <details key="constraints" value="Some elements on which AbstractStateRealization stereotype or any stereotype that inherits from it is applied"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="realizedAbstractStates"
        upperBound="-1" eType="#//AbstractState" changeable="false" volatile="true"
        transient="true" derived="true" resolveProxies="false">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="patternbody"/>
        <details key="viatra.expression" value="AbstractStateRealization.realizingAbstractState(asr, self);&#xD;&#xA;AbstractStateRealization.realizedAbstractState(asr, target);&#xD;&#xA;"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="realizingAbstractStates"
        upperBound="-1" eType="#//AbstractState" changeable="false" volatile="true"
        transient="true" derived="true" resolveProxies="false">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="patternbody"/>
        <details key="viatra.expression" value="AbstractStateRealization.realizedAbstractState(asr, self);&#xD;&#xA;AbstractStateRealization.realizingAbstractState(asr, target);&#xD;&#xA;"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic">
        <details key="excludefrom" value="xmlpivot"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="outgoing" upperBound="-1"
        eType="#//StateTransition" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="opposite"/>
        <details key="viatra.expression" value="source"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="Specifies the transitions departing from this vertex.&#xD;&#xA;[source:UML Superstructure v2.2]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="keyword::none"/>
        <details key="explanation" value="Opposite reference of uml::Transition::source"/>
        <details key="constraints" value="Order must be computed"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic">
        <details key="excludefrom" value="xmlpivot"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="incoming" upperBound="-1"
        eType="#//StateTransition" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="opposite"/>
        <details key="viatra.expression" value="target"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="Specifies the transitions entering this vertex.&#xD;&#xA;[source:UML Superstructure v2.2]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="keyword::none"/>
        <details key="explanation" value="Opposite reference of uml::Transition::target"/>
        <details key="constraints" value="Order must be computed"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic">
        <details key="excludefrom" value="xmlpivot"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="involverRegions" upperBound="-1"
        eType="#//Region" changeable="false" volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="opposite"/>
        <details key="viatra.expression" value="involvedStates"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="none"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="keyword::none"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic">
        <details key="excludefrom" value="xmlpivot"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StateTransition" eSuperTypes="CapellaCore.ecore#//NamedElement CapellaCore.ecore#//Relationship">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="A transition is a directed relationship between a source vertex and a target vertex. It may be part of a compound&#xD;&#xA;transition, which takes the state machine from one state configuration to another, representing the complete response of&#xD;&#xA;the state machine to an occurrence of an event of a particular type.&#xD;&#xA;[source: UML superstructure v2.2]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="usage examples" value="../img/usage_examples/example_statemachine.png"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::Transition"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" eType="#//TransitionKind">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="specifies the type of the state transition (see TransitionKind)&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="type" value="refer to TransitionKind definition"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::Transition::kind"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="triggerDescription" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="describes the trigger associated to the transition&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="type" value=""/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value=""/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="guard" eType="ecore:EClass CapellaCore.ecore#//Constraint">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="specifies the guard of the state transition"/>
        <details key="constraints" value="none"/>
        <details key="type" value=""/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value=""/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1"
        eType="#//AbstractState">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="Designates the originating vertex (state or pseudostate) of the transition.&#xD;&#xA;[source:UML Superstructure v2.2]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::Transition::source"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
        eType="#//AbstractState">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="Designates the target vertex that is reached when the transition is taken.&#xD;&#xA;[source:UML Superstructure v2.2]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::Transition::target"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="effect" upperBound="-1"
        eType="ecore:EClass ../../org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#//AbstractEvent">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="The event to be triggered"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value=""/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="triggers" upperBound="-1"
        eType="ecore:EClass ../../org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#//AbstractEvent">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="Specifies the triggers that may fire the transition."/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::Transition::trigger"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedStateTransitionRealizations"
        upperBound="-1" eType="#//StateTransitionRealization" containment="true">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="the realization links that are owned/contained in this StateTransition&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="keyword::nearestpackage"/>
        <details key="explanation" value="Elements are contained in the nearest possible parent container."/>
        <details key="constraints" value="Some elements on which StateTransitionRealization stereotype or any stereotype that inherits from it is applied"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="realizedStateTransitions"
        upperBound="-1" eType="#//StateTransition" changeable="false" volatile="true"
        transient="true" derived="true" resolveProxies="false">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="patternbody"/>
        <details key="viatra.expression" value="StateTransitionRealization.realizingStateTransition(asr, self);&#xD;&#xA;StateTransitionRealization.realizedStateTransition(asr, target);&#xD;&#xA;"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="realizingStateTransitions"
        upperBound="-1" eType="#//StateTransition" changeable="false" volatile="true"
        transient="true" derived="true" resolveProxies="false">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="patternbody"/>
        <details key="viatra.expression" value="StateTransitionRealization.realizedStateTransition(asr, self);&#xD;&#xA;StateTransitionRealization.realizingStateTransition(asr, target);&#xD;&#xA;"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic">
        <details key="excludefrom" value="xmlpivot"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Pseudostate" abstract="true" eSuperTypes="#//AbstractState">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="A pseudostate is an abstraction that encompasses different types of transient vertices in the state machine graph.&#xD;&#xA;[source: UML superstructure v2.2]"/>
      <details key="usage guideline" value="n/a (Abstract)"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="usage examples" value="n/a"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value=""/>
      <details key="explanation" value="uml::Pseudostate"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InitialPseudoState" eSuperTypes="#//Pseudostate">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="An initial pseudostate represents a default vertex that is the source for a single transition to the default state of a composite state. There can be at most one initial vertex in a region. The outgoing transition from the initial vertex may&#xD;&#xA;have a behavior, but not a trigger or guard.&#xD;&#xA;[source: UML superstructure v2.2]"/>
      <details key="usage guideline" value="this pseudo state should be used to declare the entry point of the state machine"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="usage examples" value="../img/usage_examples/example_statemachine.png"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::Pseudostate"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="uml::Pseudostate elements for which kind is initial"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="JoinPseudoState" eSuperTypes="#//Pseudostate">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="join vertices serve to merge several transitions emanating from source vertices in different orthogonal regions. The&#xD;&#xA;transitions entering a join vertex cannot have guards or triggers&#xD;&#xA;[source: UML superstructure v2.2]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="usage examples" value="../img/usage_examples/example_joinpseudostate.png"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::Pseudostate"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="uml::Pseudostate elements for which kind is join"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ForkPseudoState" eSuperTypes="#//Pseudostate">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="fork vertices serve to split an incoming transition into two or more transitions terminating on orthogonal target vertices&#xD;&#xA;(i.e., vertices in different regions of a composite state). The segments outgoing from a fork vertex must not have guards&#xD;&#xA;or triggers.&#xD;&#xA;[source: UML superstructure v2.2]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="usage examples" value="../img/usage_examples/example_forkpseudostate.png"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::Pseudostate"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="uml::Pseudostate elements for which kind is fork"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ChoicePseudoState" eSuperTypes="#//Pseudostate">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="choice vertices which, when reached, result in the dynamic evaluation of the guards of the triggers of its outgoing&#xD;&#xA;transitions. This realizes a dynamic conditional branch. It allows splitting of transitions into multiple outgoing paths&#xD;&#xA;such that the decision on which path to take may be a function of the results of prior actions performed in the same runto-&#xD;&#xA;completion step&#xD;&#xA;[source: UML superstructure v2.2]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="usage examples" value="../img/usage_examples/example_choicepseudostate.png"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::Pseudostate"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="uml::Pseudostate elements for which kind is choice"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TerminatePseudoState" eSuperTypes="#//Pseudostate">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="Entering a terminate pseudostate implies that the execution of this state machine by means of its context object is&#xD;&#xA;terminated. The state machine does not exit any states nor does it perform any exit actions other than those associated&#xD;&#xA;with the transition leading to the terminate pseudostate&#xD;&#xA;[source: UML superstructure v2.2]&#xD;&#xA;"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="usage examples" value="../img/usage_examples/example_terminatepseudostate.png"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::Pseudostate"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="uml::Pseudostate elements for which kind is terminate"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AbstractStateRealization" eSuperTypes="CapellaCore.ecore#//Allocation">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="an AbstractStateRealization is a specific kind of allocation link between two AbstractStates (typically of different design levels, or of different nature)&#xD;&#xA;[source: Capella study]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational,system,logical,physical"/>
      <details key="usage examples" value="none"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::Realization"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="realizedAbstractState"
        lowerBound="1" eType="#//AbstractState" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="alias"/>
        <details key="viatra.expression" value="targetElement"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="destination of the realization link : the abstract state that is being realized&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="keyword::none"/>
        <details key="explanation" value="Derived and transient"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="realizingAbstractState"
        lowerBound="1" eType="#//AbstractState" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="alias"/>
        <details key="viatra.expression" value="sourceElement"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="the source of the realization link : the abstract state that is realizing another abstract state&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="keyword::none"/>
        <details key="explanation" value="Derived and transient"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StateTransitionRealization" eSuperTypes="CapellaCore.ecore#//Allocation">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="a StateTransitionRealization is a specific kind of allocation link between two StateTransitions (typically of different design levels, or of different nature)&#xD;&#xA;[source: Capella study]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational,system,logical,physical"/>
      <details key="usage examples" value="none"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::Realization"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="realizedStateTransition"
        lowerBound="1" eType="#//StateTransition" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="alias"/>
        <details key="viatra.expression" value="targetElement"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="destination of the realization link : the state transition that is being realized&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="keyword::none"/>
        <details key="explanation" value="Derived and transient"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="realizingStateTransition"
        lowerBound="1" eType="#//StateTransition" changeable="false" volatile="true"
        transient="true" derived="true">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="alias"/>
        <details key="viatra.expression" value="sourceElement"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="the source of the realization link : the state transition that is realizing another state transition&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="keyword::none"/>
        <details key="explanation" value="Derived and transient"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="TransitionKind">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="TransitionKind is an enumeration type.&#xD;&#xA;[source:UML Superstructure v2.2]"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value="uml::TransitionKind"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eLiterals name="internal">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="kind=internal implies that the transition, if triggered, occurs without exiting or entering the source state. Thus, it does not&#xD;&#xA;cause a state change. This means that the entry or exit condition of the source state will not be invoked. An internal&#xD;&#xA;transition can be taken even if the state machine is in one or more regions nested within this state.&#xD;&#xA;[source:UML Superstructure v2.2]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::TransitionKind::internal"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="local" value="1">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="kind=local implies that the transition, if triggered, will not exit the composite (source) state, but it will apply to any state&#xD;&#xA;within the composite state, and these will be exited and entered.&#xD;&#xA;[source:UML Superstructure v2.2]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::TransitionKind::local"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="external" value="2">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="kind=external implies that the transition, if triggered, will exit the composite (source) state.&#xD;&#xA;[source:UML Superstructure v2.2]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::TransitionKind::external"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ShallowHistoryPseudoState" eSuperTypes="#//Pseudostate">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="Shallow history represents the most recent active substate of its containing state (but not the substates of that substate).&#xD;&#xA;A composite state can have at most one shallow history vertex. A transition coming into the shallow history vertex is&#xD;&#xA;equivalent to a transition coming into the most recent active substate of a state. At most one transition may originate&#xD;&#xA;from the history connector to the default shallow history state. This transition is taken in case the composite state had&#xD;&#xA;never been active before. The entry action of the state represented by the shallow history is performed.&#xD;&#xA;[source: UML superstructure v2.4]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::Pseudostate"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="uml::Pseudostate elements for which kind is shallowHistory"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DeepHistoryPseudoState" eSuperTypes="#//Pseudostate">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="Deep history represents the most recent active configuration of the composite state that directly contains this&#xD;&#xA;pseudostate (e.g., the state configuration that was active when the composite state was last exited). A composite state&#xD;&#xA;can have at most one deep history vertex. At most one transition may originate from the history connector to the default&#xD;&#xA;deep history state. This transition is taken in case the composite state had never been active before. Entry actions of&#xD;&#xA;states entered on the implicit direct path from the deep history to the innermost state(s) represented by a deep history&#xD;&#xA;are performed. The entry action is preformed only once for each state in the active state configuration being restored.&#xD;&#xA;[source: UML superstructure v2.4]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::Pseudostate"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="uml::Pseudostate elements for which kind is deepHistory"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EntryPointPseudoState" eSuperTypes="#//Pseudostate">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="An entry point pseudostate is an entry point of a state machine or composite state. In each region of the state machine or&#xD;&#xA;composite state it has at most a single transition to a vertex within the same region.&#xD;&#xA;[source: UML superstructure v2.4]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::Pseudostate"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="uml::Pseudostate elements for which kind is entry point"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExitPointPseudoState" eSuperTypes="#//Pseudostate">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="An exit point pseudostate is an exit point of a state machine or composite state. Entering an exit point within any region&#xD;&#xA;of the composite state or state machine referenced by a submachine state implies the exit of this composite state or&#xD;&#xA;submachine state and the triggering of the transition that has this exit point as source in the state machine enclosing the&#xD;&#xA;submachine or composite state.&#xD;&#xA;[source: UML superstructure v2.4]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::Pseudostate"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="uml::Pseudostate elements for which kind is exit point"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StateEventRealization" eSuperTypes="CapellaCore.ecore#//Allocation">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="a StateEventRealization is a specific kind of realization link between two StateEvent (typically of different design levels, or of different nature)&#xD;&#xA;[source: Capella study]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational,system,logical,physical"/>
      <details key="usage examples" value="none"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::Realization"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="realizedEvent" lowerBound="1"
        eType="#//StateEvent" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="alias"/>
        <details key="viatra.expression" value="targetElement"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="destination of the realization link : the state event that is being realized&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="keyword::none"/>
        <details key="explanation" value="Derived and transient"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="realizingEvent" lowerBound="1"
        eType="#//StateEvent" changeable="false" volatile="true" transient="true"
        derived="true">
      <eAnnotations source="http://www.polarsys.org/capella/derived">
        <details key="viatra.variant" value="alias"/>
        <details key="viatra.expression" value="sourceElement"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="the source of the realization link : the state event that is realizing another abstract state&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="keyword::none"/>
        <details key="explanation" value="Derived and transient"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StateEvent" abstract="true" eSuperTypes="CapellaCore.ecore#//NamedElement ../../org.polarsys.capella.common.data.behavior.gen/model/Behavior.ecore#//AbstractEvent">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="An event used in statemachine definition which occurs at a given condition. &#xD;&#xA;[source: Capella study]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="usage examples" value="../img/usage_examples/example_statemachine.png"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="none"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="expression" eType="ecore:EClass CapellaCore.ecore#//Constraint">
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::ChangeEvent::changeExpression if current element is a ChangeEvent&#xD;&#xA;uml::TimeEvent::when if current element is a TimeEvent&#xD;&#xA;"/>
        <details key="base metaclass in UML/SysML profile " value="uml::ChangeEvent and uml::TimeEvent&#xD;&#xA;"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="ownedStateEventRealizations"
        upperBound="-1" eType="#//StateEventRealization" containment="true">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="the realization links that are owned/contained in this StateEvent&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="keyword::nearestpackage"/>
        <details key="explanation" value="Elements are contained in the nearest possible parent container."/>
        <details key="constraints" value="Some elements on which StateEventRealization stereotype or any stereotype that inherits from it is applied"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ChangeEvent" eSuperTypes="#//StateEvent">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="A change event occurs when a Boolean-valued expression becomes true. For example, as a result of a change in the value&#xD;&#xA;held in a slot corresponding to an attribute, or a change in the value referenced by a link corresponding to an association.&#xD;&#xA;A change event is raised implicitly and is not the result of an explicit action&#xD;&#xA;[source: UML superstructure v2.4]"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::ChangeEvent"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" eType="#//ChangeEventKind">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="specifies the type of the state ChangeEvent (see ChangeEventKind)&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="type" value="refer to ChangeEventKind definition"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value=""/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TimeEvent" eSuperTypes="#//StateEvent">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="A time event specifies a point in time by an expression. The expression might be absolute or might be relative to some&#xD;&#xA;other point in time.&#xD;&#xA;[source: UML superstructure v2.4]&#xD;&#xA;"/>
      <details key="usage guideline" value="n/a"/>
      <details key="used in levels" value="operational, system, logical, physical"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
      <details key="reference documentation" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value=""/>
      <details key="base metaclass in UML/SysML profile " value="uml::TimeEvent"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" eType="#//TimeEventKind">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="specifies the type of the state TimeEvent (see TimeEventKind)&#xD;&#xA;[source: Capella study]"/>
        <details key="constraints" value="none"/>
        <details key="type" value="refer to TimeEventKind definition"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::TimeEvent::isRelative"/>
        <details key="explanation" value="A relative time trigger is specified with the keyword 'after' followed by an expression that evaluates to a time value, such&#xD;&#xA;as 'after (5 seconds).' An absolute time trigger is specified with the keyword 'at' followed by an expression that&#xD;&#xA;evaluates to a time value, such as 'Jan. 1, 2000, Noon'."/>
        <details key="constraints" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/semantic"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="TimeEventKind">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="TimeEventKind is an enumeration type.&#xD;&#xA;[source: Capella study]"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value="uml::TransitionKind"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eLiterals name="AT">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="An absolute time trigger is specified with the keyword 'at' followed by an expression that&#xD;&#xA;evaluates to a time value, such as 'Jan. 1, 2000, Noon'.&#xD;&#xA;[source: UML superstructure v2.4]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::TimeEvent::isRelative = false"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
    </eLiterals>
    <eLiterals name="AFTER" value="1">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="A relative time trigger is specified with the keyword 'after' followed by an expression that evaluates to a time value, such&#xD;&#xA;as 'after (5 seconds)'.&#xD;&#xA;[source: UML superstructure v2.4]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value="uml::TimeEvent::isRelative = true"/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="ChangeEventKind">
    <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
      <details key="description" value="ChangeEventKind is an enumeration type.&#xD;&#xA;[source:Capella study]"/>
      <details key="constraints" value="none"/>
      <details key="comment/notes" value="none"/>
    </eAnnotations>
    <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
      <details key="UML/SysML semantic equivalences" value="uml::TransitionKind"/>
      <details key="explanation" value="none"/>
      <details key="constraints" value="none"/>
    </eAnnotations>
    <eLiterals name="WHEN">
      <eAnnotations source="http://www.polarsys.org/kitalpha/ecore/documentation">
        <details key="description" value="A change event occurs when a Boolean-valued expression becomes true.&#xD;&#xA;[source:UML Superstructure v2.4]"/>
        <details key="constraints" value="none"/>
        <details key="comment/notes" value="none"/>
      </eAnnotations>
      <eAnnotations source="http://www.polarsys.org/capella/MNoE/CapellaLike/Mapping">
        <details key="UML/SysML semantic equivalences" value=""/>
        <details key="explanation" value="none"/>
        <details key="constraints" value="none"/>
      </eAnnotations>
    </eLiterals>
  </eClassifiers>
</ecore:EPackage>
